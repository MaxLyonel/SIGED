{% extends app.session.get('layout') %}
{% block contentoption %}
    
    <style type="text/css">
        [v-cloak]{
            display: none;
        }
        .buscador{
            margin-top: -20px;
            /* background: #E4E4E4; */
            padding: 10px;
        }
        .encabezado{
            padding: 5px;
            /* font-weight: bold; */
        }
        .estudiante{
            padding: 10px;
            background: #EEEEEE;
            text-align: center;
            font-weight: bold;
            font-size: 17px;
        }
        .jupper{
            text-transform: uppercase;
        }
        input[type='text']{
            /* background: #000000; */
            text-transform: uppercase;
            color: #000000 !important;
        }
        .select-nota:hover{
            /* border-color: #60AA5D; */
            background: #EAFBF1;
            color: #009900;
        }
        .seleccionado{
            background: #B8F1CA !important;
        }
        .headtabla{
            background: #717171 !important;
            color: #FFFFFF;
            border-bottom: none !important;
        }
        .check{
            /* background: #EEEEEE; */
            /* margin-right: 30px; */
        }
        h5{
            font-weight: bold;
        }
        .cajaPromedio{
            font-weight: bold; 
            /* background:#DDDDDD; */
            background:#EAEAEA !important;
        }
        .cajaNota{
            cursor: pointer;
        }

        .include{
            margin: 20px;
        }
        .titulo{
            padding: 5px;
        }
        .tachado{
            text-decoration: line-through;
            /* color: #D5956E; */
            /* color:  #D51528; */
            color:  #555555;
            opacity: 0.4;
            /* display: none; */
        }
        /* nota seleccionada */
        .notaNueva{
            /* color: #1EB480; */
            /* color: #7B7DA7; */
            font-size: 1.2em;
        }
        .notaNuevaAprobado{
            /* color: #1EB480; */
            color: #5CA813;
            font-size: 1.2em;
        }
        .notaNuevaReprobado{
            /* color: #1EB480; */
            color: #E62220;
            font-size: 1.2em;
        }
        input[type=”file”]#image {
            width: 0.1px;
            height: 0.1px;
            opacity: 0;
            overflow: hidden;
            position: absolute;
            z-index: -1;
        }
        label[for="image"] {
            font-size: 1rem;
            font-weight: 600;
            color: #fff;
            background-color: #14A1DA;
            display: inline-block;
            transition: all .5s;
            cursor: pointer;
            padding: 5px 20px !important;
            width: fit-content;
            text-align: center;
        }
        .vistaModificaciones{
            float: right;
            font-size: 1.2em;
        }
        textarea{
            resize: vertical;
        }
    </style>
    <style type="text/css">
        .requisitos{
            background: #EEEEEE;
            padding: 5px;
            padding-left: 50px;
            box-shadow: 4px 4px #DDDDDD;
            margin-bottom: 15px;
        }
        .requisitos > .checkbox > label{
            color: #2A3271;
            font-size: 1.2rem !important;
        }
    </style>

    <div class="header-content">
        <h2 name="tramiteEnviado"><i class="fa fa-list-alt"></i> Universidad <span></span></h2>
        <div class="breadcrumb-wrapper hidden-xs">
            <span class="label">Usted esta aquí:</span>
            <ol class="breadcrumb">
                <li>
                    <i class="fa fa-home"></i>
                    <a href="#">Universidad</a>
                    <i class="fa fa-angle-right"></i>
                </li>
                <li class="active">Personal Ejecutivo</li>
            </ol>
        </div><!-- /.breadcrumb-wrapper -->
    </div><!-- /.header-content -->
    <div class="include animated fadeIn">

    </div>
    <div id="app">
    <div v-cloak>
        <div class="body-content animated fadeIn">

            <div class="panel panel-primary" v-if="urlreporte == ''">
                <div class="panel-heading yearOld">
                    <h3 class="panel-title"> <i class="fa fa-file"></i> Personal Ejecutivo </h3>
                </div>
                <div class="panel-body">
                    <div class="row">
                        <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12">
                            <div class="text-center">
                                <h3>PERSONAL EJECUTIVO</h3>
                                <p>Universidades</p>
                            </div>
                            <a class="btn btn-primary yearOld" data-toggle="modal" href='#modalEstudiante' style="float:right; margin-top:-12px;" > <i class="fa fa-search"></i> Nuevo Personal </a>
                            <div class="clearfix"></div>
                        </div>

                    </div>
                </div>
            </div>
        </div>

        <div class="modal fade" id="modalEstudiante">
            <div class="modal-dialog" style="width:800px">
                <div class="modal-content">
                    <div class="modal-header yearOld">
                        <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                        <h4 class="modal-title"> <i class="fa fa-search"></i> Buscar Personal</h4>
                    </div>
                    <div class="modal-body">
                       {#  <div class="form-group row buscador">
                            <div class="col-xs-3 col-sm-3 col-md-3 col-lg-3 text-right">
                                Carnet de Identidad
                            </div>
                            <div class="col-xs-3 col-sm-3 col-md-3 col-lg-3">
                                <input type="text" class="form-control" v-model="rudeBuscar" maxlength="18" v-on:keyup.enter="buscarEstudiante()" placeholder="Ingrese el CI a buscar">
                            </div>
                            <div class="col-xs-3 col-sm-3 col-md-3 col-lg-3 text-right">
                                Complemento
                            </div>
                            <div class="col-xs-3 col-sm-3 col-md-3 col-lg-3">
                                <input type="text" class="form-control" v-model="rudeBuscar" maxlength="18" v-on:keyup.enter="buscarEstudiante()" placeholder="complemento">
                            </div>                            
                            <div class="col-xs-3 col-sm-3 col-md-3 col-lg-3">
                                <button v-on:click="buscarEstudiante()" type="button" class="btn btn-primary yearOld"><i class="fa fa-search"></i> Buscar </button>
                            </div>
                        </div> #}
                        <form name="form" method="post" data-toggle="validator" role="form" id="idSearchStudentForm" class="form-inline">
                                <div class="form-body">
                                  <div class="row">
                                      <div class="col-md-10 col-md-offset-1">
                                        <input type="text" v-model="DBsearch.cibuscar" id="form_ci" name="form[ci]" required="required" class="form-control" placeholder="Carnet Identidad" pattern="[A-Za-z0-9\sñÑ]{3,18}" maxlength="18" autocomplete="off" style="text-transform:uppercase">
                                        <input type="text" v-model="DBsearch.complementoval" id="form_complemento" name="form[complemento]" required="required" class="form-control" placeholder="Complemento" pattern="[A-Za-z0-9\sñÑ]{3,18}" maxlength="18" autocomplete="off" style="text-transform:uppercase">
                                        
                                        <button v-on:click="lookforperson()" type="button" class="btn btn-primary"><i class="fa fa-search"></i> Buscar </button>
                                        <button type="button" class="btn btn-danger mr-5" data-dismiss="modal">Cancelar</button>
                                      </div>
                                  </div>
                                </div><!-- /.form-body -->

                            
                        </form>                        

                        <div class="alert alert-warning" v-if="respuesta != ''"> <i class="fa fa-warning"></i> ${respuesta}</div>
                        <div v-if="buscando" class="text-center">
                            <img src="{{asset('img/loading.gif')}}" alt=""> Buscando...
                        </div>

                        <div v-if="answer">

			              <div v-if="answer">
			                <div class="panel panel-warning">
			                    <div class="panel-heading">
			                        <div class="panel-title">
			                        </div>
			                    </div>
			                        <div class="panel-body">
			                          <h4>Datos de la Busqueda</h4>
			                          <form role="form">

			                            <div class="row">
			                              <div class="col-sm-4">
			                              <label for="paterno">Paterno</label>
			                              <input type="input" class="form-control" placeholder="Paterno" v-model="dataPerson.paterno" maxlength="35" autocomplete="off" style="text-transform:uppercase" v-bind:readonly='swperson'>
			                              </div>
			                              <div class="col-sm-4">
			                              <label for="materno">Materno</label>
			                                  <input type="input" class="form-control" placeholder="Materno" v-model="dataPerson.materno" maxlength="35" autocomplete="off" style="text-transform:uppercase" v-bind:readonly='swperson'>
			                              </div>
			                              <div class="col-sm-4">
			                              <label for="Nombre(s)">Nombre(s)</label>
			                                  <input type="input" class="form-control" placeholder="Nombre(s)" v-model="dataPerson.nombre" maxlength="35" autocomplete="off" style="text-transform:uppercase" v-bind:readonly='swperson'>
			                              </div>
			                            </div>
			                            </br>  

			                            <div class="row">
			                              <div class="col-sm-3">
			                              <label for="ci">Carnet de Identidad</label>
			                              <input type="text" class="form-control" placeholder="Carnet Identidad" v-model="dataPerson.carnet" v-bind:readonly='swperson'>
			                              </div>
			                              <div class="col-sm-3">
			                              <label for="complemento(s)">Complemento</label>
			                                  <input type="text" class="form-control" placeholder="Complemento"  maxlength="2" autocomplete="off" style="text-transform:uppercase" v-model="dataPerson.complemento" v-bind:readonly='swperson'>
			                              </div>

			                              <div class="col-sm-3">
			                              <label for="fechanac">Fec. Nacimiento</label>
			                                  <input type="text" class="form-control" id="form_idfecnac" name="form[idfecnac]" placeholder="dd-mm-aaaa" v-model="dataPerson.fecNac" v-bind:readonly='swperson'>
			                              </div>
			                              <div class="col-sm-3" v-if='!swperson'>
			                              <label for="genero">G&eacute;nero</label>
			                                <select name="arrGenero" id="idarrGenero" v-model="dataPerson.generoId" class="custom-select form-control" v-model="dataPerson.genero">  
			                                  {# <option v-for="item in DBGenero"  :value="item.generoId">${ item.genero }</option>        #}
			                                </select>
			                              </div>
			                            </div>
			                            </br>     
   
			                           

			                          <div class="row" v-if="!swperson">
			                            <div class="col-sm-3">
			                                  <label for="ext">Extranejero</label>
			                                  <select name="arrApode" id="idarrGenero" v-model="dataPerson.extranjero" class="custom-select form-control" v-model="dataPerson.foreign">  
			                                  <option value="0">No</option>
			                                  <option value="1">Si</option>
			                                  </select> 
			                            </div>                          
			                          </div>                            

			                            </br>
			                            
			                          </form>
			                        </div>
			                </div> 
			              </div>                        

                        </div>
                    </div>
                </div>
            </div>
        </div>


    </div>
    </div>

{% endblock %}
{% block javascripts %}
    {{ parent() }}
    <script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/axios/0.15.2/axios.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@8"></script>
    <script>
        var app = new Vue({
            delimiters: ['${', '}'],
            el: '#app',
            data: {
                
                buscando: false,
                respuesta: '',
                
                
                inscripciones: [],
                datos: [],

                idInscripcion: '',
                flujoTipo: '',
                notas: [],
                filas: [],
                notasCualitativas: [],
                filasCualitativas: [],
                justificacion: '',
                informe: '',
                flujoTipo: '',
                formularioEnviado: false,
                urlreporte: '',
                respuestaIdTramite: '',
                
                actualEstadomatricula: '',
                nuevoEstadomatricula: '',
                estadosMatricula: [],
                promedioGeneral: '',
                nuevoPromedioGeneral: '',

                checkInforme: false,
                checkCuaderno: false,
                checkFormulario: false,

                DBsearch: [],
                dataPerson: [],
                swperson: false,
                answer: false,
            },
            methods: {
                cerrarModal: function(){
                    $('#modalCalificaciones').modal('hide');
                },
                inArray: function(needle, haystack) {
                    var length = haystack.length;
                    for(var i = 0; i < length; i++) {
                        if(haystack[i] == needle) return true;
                    }
                    return false;
                },
                claseNotaTipo: function(tiponota, gestion){
                    console.log(gestion);
                    if(gestion <= 2020){
                        if(this.inArray(tiponota, [5,6,7,8,9,11]  ) ){
                            if(gestion == 2020)
                                return ['select-nota','cajaNota'];
                            else
                                return ['cajaPromedio'];
                        }else{
                            return ['select-nota','cajaNota'];
                        }
                    }else{
                        if(this.inArray(tiponota, [6,7,8]  ) ){
                            return ['select-nota','cajaNota'];
                        }else{
                            return ['cajaPromedio'];
                        }
                    }
                },
                lookforperson: function(){
                    this.buscando = true;
                    this.estudiante = '';
                    this.carnet = '';
                    this.complemento = '';
                    this.inscripciones = '';
                    this.respuesta = '';
                    this.datos = '';
                    
                    this.directorNombre = '';
                    this.directorCarnet = '';
                    this.directorComplemento = '';

                    this.idInscripcion = '';
                    this.sie = '';
                    this.institucioneducativa = '';
                    this.nivel = '';
                    this.grado = '';
                    this.paralelo = '';
                    this.turno = '';
                    this.gestion = '';
                    this.departamento = '';
                    this.distrito = '';

                    this.notas = [];
                    this.filas = [];
                    this.notasCualitativas = [];
                    this.filasCualitativas = [];
                    this.justificacion = '';
                    this.informe = '';

                    if (this.DBsearch.cibuscar.length == 0) {
                        this.respuesta = 'Debe ingresar un CI válido';
                        this.buscando = false;
                        return;
                    }

                    if (this.DBsearch.cibuscar.length < 6) {
                        this.respuesta = 'El CI ingresado no es válido';
                        this.buscando = false;
                        return;
                    }
                    if(typeof(this.DBsearch.complementoval)  === 'undefined'){
                    	this.DBsearch.complementoval = '';
                    }
                    axios.get(Routing.generate('staff_lookforperson', this.DBsearch))
                    .then(response => {
                        if (response.status == 200) {
                        	
                        	this.dataPerson = response.data.arrPerson;

                        	this.swperson   = response.data.swperson;
                        	this.answer   = response.data.answer;

                            $('[data-toggle="tooltip"]').tooltip();
                        }
                        if( response.status == 202){
                            this.respuesta = response.data;
                        }

                        this.buscando = false;
                    })
                    .catch(e => {
                        console.log(e);
                        this.buscando = false;
                    });
                },
                seleccionarInscripcion: function(pos){
                    this.cargandoCalificaciones = true;

                    this.idInscripcion = this.inscripciones[pos].idInscripcion;
                    this.sie = this.inscripciones[pos].sie;
                    this.institucioneducativa = this.inscripciones[pos].institucioneducativa;
                    this.nivel = this.inscripciones[pos].nivel;
                    this.grado = this.inscripciones[pos].grado;
                    this.paralelo = this.inscripciones[pos].paralelo;
                    this.turno = this.inscripciones[pos].turno;
                    this.gestion = this.inscripciones[pos].gestion;
                    this.departamento = this.inscripciones[pos].departamento;
                    this.distrito = this.inscripciones[pos].distrito;
                    this.datos = [];

                    this.notas = [];
                    this.filas = [];
                    this.notasCualitativas = [];
                    this.filasCualitativas = [];
                    this.justificacion = '';
                    this.informe = '';

                    this.estadomatricula = '';
                    this.operativo = '';
                    this.idNivel = '';

                    this.nuevoEstadomatricula = '';

                    this.promedioGeneral = '';
                    this.nuevoPromedioGeneral = '';

                    // CARGAMOS LAS CALIFICACIONES
                    axios.get(Routing.generate('tramite_add_mod_cal_buscar_calificaciones', {
                        idInscripcion: this.idInscripcion, 
                        idTramite: this.idTramite,
                        flujoTipo: this.flujoTipo
                    }))
                    .then(response => {
                        if (response.data.tramitePendiente.length > 0) {
                            // console.log(response.data.tramitePendiente[0]);
                            var msg = 'La inscripción tiene un trámite pendiente. <br> <b>Trámite Nro. '+ response.data.tramitePendiente[0].tramite_id +'</b>';
                            Swal.fire({
                              title: 'Tramites pendientes!',
                              html: msg,
                              type: 'warning'
                            });
                        }else{
                            this.datos = response.data.datos;
                            console.log(this.datos);
                            this.estadosMatricula = response.data.estadosMatricula;
                            this.promedioGeneral = response.data.promedioGeneral;
                            this.nuevoPromedioGeneral = response.data.promedioGeneral;

                            var me = this;
                            $.each(this.estadosMatricula, function(index, val) {
                                if (val['id'] == me.datos.estadoMatricula) {
                                    me.actualEstadomatricula = val['estadoMatricula'];
                                    me.nuevoEstadomatricula = val['estadoMatricula'];
                                }
                            });

                            $('#modalEstudiante').modal('hide');
                        }
                        this.cargandoCalificaciones = false;
                    })
                    .catch(e => {
                        Swal.fire(
                          'Error!',
                          e,
                          'danger'
                        );

                        this.cargandoCalificaciones = false;
                    });
                },
                agregarNota: function(idEstudianteNota, asignatura, bimestre, nota, idNota, idFila, idNotaTipo, idEstudianteAsignatura, gestion){
                    if (idNotaTipo != 5 && idNotaTipo != 6 && idNotaTipo != 7 && idNotaTipo != 8 && idNotaTipo != 9 && idNotaTipo != 11 || gestion == 2021) {

                        var index = this.filas.indexOf(idFila);
                        
                        var nuevaNota = {
                            idEstudianteNota: idEstudianteNota,
                            asignatura: asignatura,
                            bimestre: bimestre,
                            nota: nota,
                            notaNueva: '',
                            idNota: idNota,
                            idFila: idFila,
                            idNotaTipo: idNotaTipo,
                            idEstudianteAsignatura: idEstudianteAsignatura,
                            gestion:gestion
                        }

                        // console.log(this.gestion);
                        var me = this;

                        $('body').removeClass('modal-open');

                        if(index == -1){
                            // AGREGAR CALIFICACION
                            const {value: calificacion} = Swal.fire({
                                title: 'Agregar calificación',
                                input: 'text',
                                inputValue: nuevaNota.nota,
                                showCancelButton: true,
                                inputValidator: (value) => {
                                    if (!value) {
                                        return 'Ingrese una calificación!'
                                    }
                                    if (isNaN(value)) {
                                        return 'La calificación debe ser un número!'
                                    }
                                    if (isNaN(parseInt(value))) {
                                        return 'La calificación debe ser un número valido!'
                                    }  
                                    if (value < 0) {
                                        return 'La calificación no puede ser negativa!'
                                    }                                      
                                    if (value == 0) {
                                        return 'La calificación no puede ser cero!'
                                    }

                                    if (nuevaNota.nota == value) {
                                        return 'La nueva calificación no puede ser igual a la calificación actual'
                                    }

                                    // NOTAS TRIMESTRALES
                                    if ((idNotaTipo == 30 || idNotaTipo == 31 || idNotaTipo == 32) && value > 60) {
                                        return 'La calificación no puede ser mayor a 60!'   
                                    }

                                    if ((idNotaTipo == 27 || idNotaTipo == 28 || idNotaTipo == 29) && value > 10) {
                                        return 'La calificación no puede ser mayor a 10!'   
                                    }

                                    // NOTAS BIMESTRALES
                                    if ((idNotaTipo == 1 || idNotaTipo == 2 || idNotaTipo == 3 || idNotaTipo == 4) && value > 100) {
                                        return 'La calificación no puede ser mayor a 100!'
                                    }

                                    // NOTAS trimestrales - 2021
                                    if ( gestion == 2021 && ((idNotaTipo == 6 || idNotaTipo == 7 || idNotaTipo == 8 ) && value > 100) ){
                                        return 'La calificación no puede ser mayor a 100!'
                                    }                                    

                                    nuevaNota.notaNueva = value;

                                    this.validarValorNota(nuevaNota);
                                    
                                    this.notas.push(nuevaNota);
                                    this.filas.push(idFila);
                                    $('#'+idFila).addClass('seleccionado');
                                    console.log('donde');
                                },
                                onClose: () => {
                                    $('body').addClass('modal-open');
                                }
                            })
                        }else{
                            console.log('no');
                            // MODIFICAR CALIFICACION
                            // Swal.fire(
                            //   'Aviso!',
                            //   'La calificación ya fue seleccionada',
                            //   'warning'
                            // )
                            var me = this;
                            const {value: calificacion} = Swal.fire({
                                title: 'Modificar calificación',
                                input: 'text',
                                inputValue: this.notas[index].notaNueva,
                                showCancelButton: true,
                                inputValidator: (value) => {
                                    if (!value) {
                                        this.eliminarNota(this.notas[index]);
                                        return;
                                    }
                                    if (isNaN(value)) {
                                        return 'La calificación debe ser un número!'
                                    }
                                    if (value == 0) {
                                        return 'La calificación no puede ser cero!'
                                    }
                                    if (nuevaNota.nota == value) {
                                        return 'La nueva calificación no puede ser igual a la calificación actual'
                                    }

                                    // NOTAS TRIMESTRALES
                                    if ((idNotaTipo == 30 || idNotaTipo == 31 || idNotaTipo == 32) && value > 60) {
                                        return 'La calificación no puede ser mayor a 60!'   
                                    }

                                    if ((idNotaTipo == 27 || idNotaTipo == 28 || idNotaTipo == 29) && value > 10) {
                                        return 'La calificación no puede ser mayor a 10!'   
                                    }

                                    // NOTAS BIMESTRALES
                                    if ((idNotaTipo == 1 || idNotaTipo == 2 || idNotaTipo == 3 || idNotaTipo == 4) && value > 100) {
                                        return 'La calificación no puede ser mayor a 100!'
                                    }

                                    // nuevaNota.notaNueva = value;
                                    this.notas[index].notaNueva = value;
                                    this.validarValorNota(this.notas[index]);

                                },
                                onClose: () => {
                                    $('body').addClass('modal-open');
                                }
                            })
                            
                        }

                        // $(".swal2-input").focus(function(){    
                        //   this.select();
                        // });
                    }else{

                    }

                    $('[data-toggle="popover"]').popover();
                    $('[data-toggle="tooltip"]').tooltip();
                },
                eliminarNota: function(row){
                    // this.notas.splice(pos,1);
                    var index = this.notas.indexOf(row);

                    // cargamos la nota al valor de nueva nota
                    var me = this;
                    $.each(this.datos.cuantitativas, function(index, val) {
                        if (val['asignatura'] == row.asignatura) {
                            $.each(val['notas'], function(index2, val2) {
                                if (val2['idFila'] == row.idFila) {
                                    me.datos.cuantitativas[index].notas[index2].notaNueva = '';
                                }
                            });
                        }
                    });

                    this.notas.splice(index, 1);
                    var index1 = this.filas.indexOf(row.idFila);
                    this.filas.splice(index1,1);

                    $('#'+row.idFila).removeClass('seleccionado');

                    this.calcularPromedios();
                },
                validarNota: function(event){
                    var k = event.charCode || event.keyCode;
                    if ((k < 48 || k > 57) //NUmeros
                        && (k != 13) //ENTER
                        && (k != 8) //retroceso
                        && (k != 9) //tab
                    ){
                        event.preventDefault();
                        return false;
                    }
                },
                validarValorNota: function(nota){
                    // VALIDACIONES TRIMESTRALES
                    if(nota.idNotaTipo == 6 || nota.idNotaTipo == 7 || nota.idNotaTipo == 8){
                        if(nota.gestion == 2020){
                            console.log('notaaaaaa11'+nota.notaNueva);
                            if(nota.notaNueva < 0){ nota.notaNueva = 0; }
                            if(nota.notaNueva > 100){ nota.notaNueva = 100; }                            
                            console.log('notaaaaaa22'+nota.notaNueva);
                        }else{
                            if(nota.gestion == 2021){
                                if(nota.notaNueva < 0){ nota.notaNueva = 0; }
                                if(nota.notaNueva > 100){ nota.notaNueva = 100; }
                            }else{
                                if(nota.notaNueva < 0){ nota.notaNueva = 0; }
                                if(nota.notaNueva > 70){ nota.notaNueva = 70; }
                            }
                        }
                        
                    }
                    if(nota.idNotaTipo == 30 || nota.idNotaTipo == 31 || nota.idNotaTipo == 32 || nota.idNotaTipo == 10){
                        if(nota.notaNueva < 0){ nota.notaNueva = 0; }
                        if(nota.notaNueva > 60){ nota.notaNueva = 60; }    
                    }
                    if(nota.idNotaTipo == 27 || nota.idNotaTipo == 28 || nota.idNotaTipo == 29){
                        if(nota.notaNueva < 0){ nota.notaNueva = 0; }
                        if(nota.notaNueva > 10){ nota.notaNueva = 10; }
                    }

                    // VALIDACION PARA NOTAS BIMESTRALES
                    if(nota.idNotaTipo == 1 || nota.idNotaTipo == 2 || nota.idNotaTipo == 3 || nota.idNotaTipo == 4 || nota.idNotaTipo == 5){
                        if(nota.notaNueva < 0){ nota.notaNueva = 0; }
                        if(nota.notaNueva > 100){ nota.notaNueva = 100; }    
                    }                    

                    if(nota.notaNueva != "" && nota.notaNueva != 0){
                        nota.notaNueva = Math.round(nota.notaNueva);
                    }
                    console.log('notaaaaaa '+nota.notaNueva);
                    // cargamos la nota al valor de nueva nota
                    var me = this;

                    $.each(this.datos.cuantitativas, function(index, val) {
                        if (val['asignatura'] == nota.asignatura) {
                            console.log(val['asignatura']);
                            console.log(nota.asignatura);
                            $.each(val['notas'], function(index2, val2) {
                                if (val2['idFila'] == nota.idFila) {
                                    me.datos.cuantitativas[index].notas[index2].notaNueva = nota.notaNueva;
                                }
                            });
                        }
                    });    
                    //console.log(this.datos.cuantitativas)       ;
                    this.calcularPromedios();
                },
                calcularPromedios: function(){
                    var me = this;
                    var nulos;
                    var suma;
                    var promedio;
                    var cantidadPromedios = 0;
                    var arrayPromedios = [];
                    //to year 2020 and avg trim
                    if(this.gestion == 2021){
                        $.each(this.datos.cuantitativas, function(index, val) {
                            nulos = 0;
                            suma = 0;
                            promedio = 0;
                            $.each(val['notas'], function(index2, val2) {
                                if (val2['idNotaTipo'] != 9) {
                                    var valor = val2['notaNueva'];
                                    if(valor == ''){
                                        valor = val2['nota'];
                                        if (valor == '') {
                                            valor = 0;
                                            nulos = nulos + 1;
                                        }
                                    }
                                    suma = suma + valor;
                                }
                                if (val2['idNotaTipo'] == 9 && nulos == 0) {
                                    // CALCULAMOS EL PROMEDIO Y LO AGREGAMOS AL OBJETO
                                    promedio = Math.round(suma/3);
                                    me.datos.cuantitativas[index].notas[index2].notaNueva = promedio;
                                    // AGREGAMOS EL PROMEDIO AL ARRAY
                                    arrayPromedios.push({
                                        idAsignatura: val['idAsignatura'],
                                        promedio: promedio
                                    });
                                    // INCREMENTAMOS LA CANTIDAD DE PROMEDIOS
                                    cantidadPromedios+=1;
                                }
                                if (val2['idNotaTipo'] == 9 && nulos > 0) {
                                    me.datos.cuantitativas[index].notas[index2].notaNueva = '';
                                }
                            });
                        });

                        // CALCULAMOS EL ESTADO DE MATRÍCULA
                        var cantidadMaterias = this.datos.cuantitativas.length;
                        console.log(cantidadMaterias);
                        console.log(cantidadPromedios);

                        if(cantidadMaterias == cantidadPromedios){
                            var me = this;
                            $.each(this.estadosMatricula, function(index, val) {
                                if (val['id'] == 5) {
                                    me.nuevoEstadomatricula = val['estadoMatricula'];
                                }
                            });
                            // CALCULAMOS EL ESTADO GENERAL DE ACUERDO AL PROMEDIO GENERAL ANUAL EN PRIMARIA en la gestion 2019
                            if (this.datos.gestion >= 2019 && this.datos.nivel == 12) {
                                var sumaPromedios = 0;
                                var promedioGeneralAnual;
                                $.each(arrayPromedios, function(index, val) {
                                    sumaPromedios = sumaPromedios + val.promedio;
                                });
                                promedioGeneralAnual = Math.round(sumaPromedios/cantidadMaterias);

                                if (promedioGeneralAnual < 51) {
                                    $.each(me.estadosMatricula, function(index, val) {
                                        if (val['id'] == 28) {
                                            me.nuevoEstadomatricula = val['estadoMatricula'];
                                        }
                                    });
                                }

                                this.nuevoPromedioGeneral = promedioGeneralAnual;

                            }else{
                                $.each(arrayPromedios, function(index, val) {
                                    // NO CONSIDERAMOS LAS MATERIAS (ESPECIFICACMENTE PARA LA GESTION 2018)
                                    // 1052 CIENCIAS NATURALES: FISICA
                                    // 1053 CIENCIAS NATURALES: QUIMICA
                                    if(val.promedio < 51 && val.idAsignatura != 1052 && val.idAsignatura != 1053){
                                        $.each(me.estadosMatricula, function(index, val) {
                                            if (val['id'] == 11) {
                                                me.nuevoEstadomatricula = val['estadoMatricula'];
                                            }
                                        });
                                    }
                                });
                            }
                        }else{
                            var me = this;
                            $.each(this.estadosMatricula, function(index, val) {
                                if (val['estadoMatricula'] == me.actualEstadomatricula) {
                                    me.nuevoEstadomatricula = val['estadoMatricula'];
                                }
                            });
                        }                        

                    }else{
                        // CÁLCULO DE PROMEDIOS Y ESTADO DE MATRICULA PARA NOTAS BIMESTRALES
                        if ((this.gestion >= 2014 && this.datos.operativo >= 4) || (this.gestion == 2013 && this.datos.grado == 1) ) {
                            $.each(this.datos.cuantitativas, function(index, val) {
                                nulos = 0;
                                suma = 0;
                                promedio = 0;
                                $.each(val['notas'], function(index2, val2) {
                                    if (val2['idNotaTipo'] != 5) {
                                        var valor = val2['notaNueva'];
                                        if(valor == ''){
                                            valor = val2['nota'];
                                            if (valor == '') {
                                                valor = 0;
                                                nulos = nulos + 1;
                                            }
                                        }
                                        suma = suma + valor;
                                    }
                                    if (val2['idNotaTipo'] == 5 && nulos == 0) {
                                        // CALCULAMOS EL PROMEDIO Y LO AGREGAMOS AL OBJETO
                                        promedio = Math.round(suma/4);
                                        me.datos.cuantitativas[index].notas[index2].notaNueva = promedio;
                                        // AGREGAMOS EL PROMEDIO AL ARRAY
                                        arrayPromedios.push({
                                            idAsignatura: val['idAsignatura'],
                                            promedio: promedio
                                        });
                                        // INCREMENTAMOS LA CANTIDAD DE PROMEDIOS
                                        cantidadPromedios+=1;
                                    }
                                    if (val2['idNotaTipo'] == 5 && nulos > 0) {
                                        me.datos.cuantitativas[index].notas[index2].notaNueva = '';
                                    }
                                });
                            });

                            // CALCULAMOS EL ESTADO DE MATRÍCULA
                            var cantidadMaterias = this.datos.cuantitativas.length;
                            if(cantidadMaterias == cantidadPromedios){
                                var me = this;
                                $.each(this.estadosMatricula, function(index, val) {
                                    if (val['id'] == 5) {
                                        me.nuevoEstadomatricula = val['estadoMatricula'];
                                    }
                                });
                                // CALCULAMOS EL ESTADO GENERAL DE ACUERDO AL PROMEDIO GENERAL ANUAL EN PRIMARIA en la gestion 2019
                                if (this.datos.gestion >= 2019 && this.datos.nivel == 12) {
                                    var sumaPromedios = 0;
                                    var promedioGeneralAnual;
                                    $.each(arrayPromedios, function(index, val) {
                                        sumaPromedios = sumaPromedios + val.promedio;
                                    });
                                    promedioGeneralAnual = Math.round(sumaPromedios/cantidadMaterias);

                                    if (promedioGeneralAnual < 51) {
                                        $.each(me.estadosMatricula, function(index, val) {
                                            if (val['id'] == 28) {
                                                me.nuevoEstadomatricula = val['estadoMatricula'];
                                            }
                                        });
                                    }

                                    this.nuevoPromedioGeneral = promedioGeneralAnual;

                                }else{
                                    $.each(arrayPromedios, function(index, val) {
                                        // NO CONSIDERAMOS LAS MATERIAS (ESPECIFICACMENTE PARA LA GESTION 2018)
                                        // 1052 CIENCIAS NATURALES: FISICA
                                        // 1053 CIENCIAS NATURALES: QUIMICA
                                        if(val.promedio < 51 && val.idAsignatura != 1052 && val.idAsignatura != 1053){
                                            $.each(me.estadosMatricula, function(index, val) {
                                                if (val['id'] == 11) {
                                                    me.nuevoEstadomatricula = val['estadoMatricula'];
                                                }
                                            });
                                        }
                                    });
                                }
                            }else{
                                var me = this;
                                $.each(this.estadosMatricula, function(index, val) {
                                    if (val['estadoMatricula'] == me.actualEstadomatricula) {
                                        me.nuevoEstadomatricula = val['estadoMatricula'];
                                    }
                                });
                            }
                        }else{
                            // CÁLCULO DE PROMEDIOS Y ESTADO DE MATRICULA PARA NOTAS TRIMESTRALES
                            $.each(this.datos.cuantitativas, function(index, val) {
                                nulos = 0;
                                suma1t = 0;
                                suma2t = 0;
                                suma3t = 0;
                                promedioAnual = 0;
                                reforzamiento = 0;
                                promedioFinal = 0;
                                $.each(val['notas'], function(index2, val2) {
                                    if (val2['idNotaTipo'] != 6 && val2['idNotaTipo'] != 7 && val2['idNotaTipo'] != 8 && val2['idNotaTipo'] != 9 && val2['idNotaTipo'] != 11) {
                                        var valor = val2['notaNueva'];
                                        if(valor == ''){
                                            valor = val2['nota'];
                                            if (valor == '') {
                                                valor = 0;
                                                nulos = nulos + 1;
                                            }
                                        }

                                        if (val2['idNotaTipo'] == 27 || val2['idNotaTipo'] == 30) {
                                            suma1t = suma1t + valor;
                                        }
                                        if (val2['idNotaTipo'] == 28 || val2['idNotaTipo'] == 31) {
                                            suma2t = suma2t + valor;
                                        }
                                        if (val2['idNotaTipo'] == 29 || val2['idNotaTipo'] == 32) {
                                            suma3t = suma3t + valor;
                                        }
                                    }

                                    if (val2['idNotaTipo'] == 6) {
                                        me.datos.cuantitativas[index].notas[index2].notaNueva = suma1t;
                                    }
                                    if (val2['idNotaTipo'] == 7) {
                                        me.datos.cuantitativas[index].notas[index2].notaNueva = suma2t;
                                    }
                                    if (val2['idNotaTipo'] == 8) {
                                        me.datos.cuantitativas[index].notas[index2].notaNueva = suma3t;
                                    }

                                    if (val2['idNotaTipo'] == 9) {
                                        promedioAnual = Math.round((suma1t + suma2t + suma3t)/3);
                                        me.datos.cuantitativas[index].notas[index2].notaNueva = promedioAnual;
                                    }else{
                                        if (val2['idNotaTipo'] == 10) {
                                            if (promedioAnual >= 36) {
                                                reforzamiento = 0;
                                            }else{
                                                reforzamiento = valor;
                                            }
                                            me.datos.cuantitativas[index].notas[index2].notaNueva = reforzamiento;
                                        }else{
                                            if (val2['idNotaTipo'] == 11 && reforzamiento != 0 && reforzamiento != '') {
                                                promedioFinal = promedioAnual + reforzamiento;
                                                me.datos.cuantitativas[index].notas[index2].notaNueva = promedioFinal;

                                                arrayPromedios.push({
                                                    idAsignatura: val['idAsignatura'],
                                                    promedio: promedioFinal
                                                });
                                                // INCREMENTAMOS LA CANTIDAD DE PROMEDIOS
                                                cantidadPromedios+=1;

                                            }else{
                                                if (val2['idNotaTipo'] == 11) {
                                                    me.datos.cuantitativas[index].notas[index2].notaNueva = 0;
                                                    
                                                    arrayPromedios.push({
                                                        idAsignatura: val['idAsignatura'],
                                                        promedio: promedioAnual
                                                    });
                                                    // INCREMENTAMOS LA CANTIDAD DE PROMEDIOS
                                                    cantidadPromedios+=1;
                                                }
                                            }
                                        }
                                    }
                                });
                            });

                            // CALCULAMOS EL ESTADO DE MATRÍCULA
                            var cantidadMaterias = this.datos.cuantitativas.length;
                            if(cantidadMaterias == cantidadPromedios){
                                var me = this;
                                $.each(this.estadosMatricula, function(index, val) {
                                    if (val['id'] == 5) {
                                        me.nuevoEstadomatricula = val['estadoMatricula'];
                                    }
                                });
                                // CALCULAMOS EL ESTADO GENERAL DE ACUERDO AL PROMEDIO GENERAL ANUAL EN PRIMARIA en la gestion 2019
                                $.each(arrayPromedios, function(index, val) {
                                    if(val.promedio < 36){
                                        $.each(me.estadosMatricula, function(index, val) {
                                            if (val['id'] == 11) {
                                                me.nuevoEstadomatricula = val['estadoMatricula'];
                                            }
                                        });
                                    }
                                });
                            }else{
                                var me = this;
                                $.each(this.estadosMatricula, function(index, val) {
                                    if (val['estadoMatricula'] == me.actualEstadomatricula) {
                                        me.nuevoEstadomatricula = val['estadoMatricula'];
                                    }
                                });
                            }
                        }                        

                    }

                },
                agregarNotaCualitativa: function(idEstudianteNotaCualitativa,idInscripcion,idNotaTipo,idFila,notaCualitativa,notaCuantitativa,notaTipo,idEstudianteNotaCualitativa){
                    var nuevaNotaCualitativa = {
                        idEstudianteNotaCualitativa: idEstudianteNotaCualitativa,
                        idInscripcion: idInscripcion,
                        idNotaTipo: idNotaTipo,
                        idFila: idFila,
                        notaCualitativa: notaCualitativa,
                        notaCuantitativa: notaCuantitativa,
                        bimestre: notaTipo,
                        notaNuevaCualitativa: ''
                    }

                    var index = this.filasCualitativas.indexOf(idFila);

                    $('body').removeClass('modal-open');

                    if(index == -1){
                        const {value: valoracion} = Swal.fire({
                            title: 'Agregar valoración',
                            input: 'text',
                            inputValue: nuevaNotaCualitativa.notaCualitativa,
                            showCancelButton: true,
                            inputValidator: (value) => {
                                if (!value) {
                                    return 'Ingrese una valoración!'
                                }

                                value = value.toUpperCase();

                                if (value.length < 15) {
                                    return 'La valoración debe tener al menos 15 digitos!'
                                }
                                if (nuevaNotaCualitativa.notaCualitativa == value) {
                                    return 'La nueva valoración no puede ser igual a la valoración actual'
                                }

                                nuevaNotaCualitativa.notaNuevaCualitativa = value;

                                this.validarValorNotaCualitativa(nuevaNotaCualitativa);

                                this.notasCualitativas.push(nuevaNotaCualitativa);
                                this.filasCualitativas.push(idFila);
                                $('#'+idFila).addClass('seleccionado');

                                $('body').addClass('modal-open');
                            },
                            onClose: () => {
                                $('body').addClass('modal-open');
                            }
                        })
                    }else{
                        var me = this; 
                        // console.log(me.notasCualitativas[index].notaNuevaCualitativa);
                        const {value: valoracion} = Swal.fire({
                            title: 'Modificar valoración',
                            input: 'text',
                            inputValue: this.notasCualitativas[index].notaNuevaCualitativa,
                            showCancelButton: true,
                            inputValidator: (value) => {
                                if (!value) {
                                    this.eliminarNotaCualitativa(this.notasCualitativas[index]);
                                    return;
                                }

                                value = value.toUpperCase();

                                if (value.length < 15) {
                                    return 'La valoración debe tener al menos 15 digitos!'
                                }
                                if (nuevaNotaCualitativa.notaCualitativa == value) {
                                    return 'La nueva valoración no puede ser igual a la valoración actual'
                                }
                                // nuevaNota.notaNueva = value;
                                this.notasCualitativas[index].notaNuevaCualitativa = value;
                                this.validarValorNotaCualitativa(this.notasCualitativas[index]);

                                $('body').addClass('modal-open');
                            },
                            onClose: () => {
                                $('body').addClass('modal-open');
                            }
                        })


                        // this.eliminarNotaCualitativa(nuevaNotaCualitativa);
                    }
                },
                eliminarNotaCualitativa: function(row){
                    // this.notas.splice(pos,1);
                    var index = this.notasCualitativas.indexOf(row);

                    // cargamos la nota al valor de nueva nota
                    var me = this;
                    $.each(this.datos.cualitativas, function(index, val) {
                        if (val['idNotaTipo'] == row.idNotaTipo) {
                            me.datos.cualitativas[index].notaCualitativaNueva = '';
                        }
                    });

                    this.notasCualitativas.splice(index, 1);
                    var index1 = this.filasCualitativas.indexOf(row.idFila);
                    this.filasCualitativas.splice(index1,1);

                    $('#'+row.idFila).removeClass('seleccionado');
                    console.log(this.filas);
                },
                validarNotaCualitativa: function(){
                    var key = window.event;
                    var k = key.charCode || key.keyCode;
                    if ((k < 48 || k > 57) //NUmeros
                        && (k != 13) //ENTER
                        && (k != 8) //retroceso
                        && (k != 9) //tab
                    )
                    return false;
                },
                validarValorNotaCualitativa(notaCualitativa){
                    // cargamos la nota al valor de nueva nota
                    var me = this;
                    $.each(this.datos.cualitativas, function(index, val) {
                        if (val['idNotaTipo'] == notaCualitativa.idNotaTipo) {
                            me.datos.cualitativas[index].notaCualitativaNueva = notaCualitativa.notaNuevaCualitativa.toUpperCase();
                        }
                    });
                },
                getImage: function(event){
                    var informe = event.target.files[0];
                    var allowedExtensions = /(.jpg|.jpeg|.png|.gif|.pdf)$/i;
                    if(!allowedExtensions.exec(event.target.value)){
                        event.target.value = '';
                        Swal.fire(
                              'Archivo incorrecto!',
                              'El archivo adjunto debe ser una imagen o un archivo pdf',
                              'warning'
                            );
                        this.informe = '';
                        this.checkInforme = false;
                        return false;
                    }else{
                        var megas = (informe.size / 1024)/1024;
                        if (megas > 2) {
                            event.target.value = '';
                            Swal.fire(
                              'Tamaño no permitido!',
                              'El archivo debe tener un tamaño menor a 2MB',
                              'warning'
                            );
                            this.informe = '';
                            this.checkInforme = false;
                            return false;
                        }
                    }
                    this.informe = event.target.files[0];
                    console.log(this.informe);
                    this.checkInforme = true;
                },
                enviarSolicitud: function(){
                    // DESACTIVAMOS EL BOTON DE ENVIAR

                    // VALIDAR NOTAS
                    var notasValidas = true;
                    $.each(this.notas, function(index, val) {
                        if(val.notaNueva == '' || val.notaNueva == 0){
                            notasValidas = false;
                            // break;
                        }
                    });
                    if(!notasValidas){
                        Swal.fire(
                          'Completar calificación!',
                          'Las calificaciones no pueden ser vacias o tener valor cero.',
                          'warning'
                        );
                        return;
                    }
                    
                    // VALIDAR NOTAS CUALITATIVAS
                    var notasCualitativasValidas = true;
                    var cualitativaMensaje = '';
                    $.each(this.notasCualitativas, function(index, val) {
                        if(val.notaNuevaCualitativa.trim() == ''){
                            cualitativaMensaje = 'Las valoraciones no pueden estar vacias.';
                            notasCualitativasValidas = false;
                            // break;
                        }

                        if(val.notaNuevaCualitativa.trim().length < 15){
                            cualitativaMensaje = 'Las valoraciones deben tener al menos 15 caracteres.';
                            notasCualitativasValidas = false;
                            // break;
                        }
                    });
                    if(!notasCualitativasValidas){
                        Swal.fire(
                          'Completar valoración!',
                          cualitativaMensaje,
                          'warning'
                        );
                        return;
                    }

                    // VALIDAMOS QUE SE HAYA LLENADO EL JUSTIFICATIVO
                    if (this.justificacion.trim().length == 0) {
                        this.$refs.justificacion.focus();
                        Swal.fire(
                          'Justificar!',
                          'Debe justificar el motivo por el que esta realizando la solicitud.',
                          'warning'
                        );
                        return;
                    }

                    // VALIDAMOS QUE SE HAYA SELECCIONADO LA IMAGEN DEL INFORME
                    if (typeof this.informe != 'object') {
                        Swal.fire(
                          'Adjuntar Informe',
                          'Debe adjuntar el informe técnico, puede ser un archivo de imagen o PDF, y debe tener un tamaño menor a 2MB',
                          'warning'
                        );
                        return;
                    }

                    // VALIDAMOS LOS DOCUMENTOS MINIMOS
                    if (!this.checkInforme || !this.checkCuaderno || !this.checkFormulario) {
                        Swal.fire(
                          'Requisitos!',
                          'Debe seleccionar todos los requisitos mínimos establecidos.',
                          'warning'
                        );
                        return;
                    }

                    $.each(this.notasCualitativas, function(index, val) {
                        val.notaNuevaCualitativa = val.notaNuevaCualitativa.toUpperCase();
                    });

                    Swal.fire({
                        title: '¿Enviar solicitud?',
                        text: "La solicitud será enviada a la Direccion Distrital",
                        type: 'question',
                        showCancelButton: true,
                        confirmButtonColor: '#3085d6',
                        cancelButtonColor: '#d33',
                        confirmButtonText: 'Si, enviar solicitud',
                        cancelButtonText: 'Cancelar'
                    }).then((result) => {
                        if (result.value) {
                            var data = new FormData();
                            data.append('idTramite', this.idTramite);
                            data.append('idInscripcion', this.idInscripcion);
                            data.append('codigoRude', this.codigoRude);
                            data.append('estudiante', this.estudiante);
                            data.append('carnet', this.carnet);
                            data.append('complemento', this.complemento);
                            data.append('sie', this.sie);
                            data.append('institucioneducativa', this.institucioneducativa);
                            data.append('nivel', this.nivel);
                            data.append('grado', this.grado);
                            data.append('paralelo', this.paralelo);
                            data.append('turno', this.turno);
                            data.append('gestion', this.gestion);
                            data.append('departamento', this.departamento);
                            data.append('distrito', this.distrito);
                            
                            data.append('directorNombre', this.directorNombre);
                            data.append('directorCarnet', this.directorCarnet);
                            data.append('directorComplemento', this.directorComplemento);

                            data.append('flujoTipo', this.flujoTipo);
                            data.append('notas', JSON.stringify(this.notas));
                            data.append('notasCualitativas', JSON.stringify(this.notasCualitativas));
                            data.append('justificacion', this.justificacion);
                            data.append('checkInforme', this.checkInforme);
                            data.append('checkCuaderno', this.checkCuaderno);
                            data.append('checkFormulario', this.checkFormulario);
                            data.append('informe', this.informe);

                            this.formularioEnviado = true;

                            axios.post(Routing.generate('tramite_add_mod_cal_formulario_save'), data)
                            .then(response => {
                                // window.location.href = "{{path('wf_tramite_index', { tipo: 3 })}}";
                                this.respuestaIdTramite = response.data.idTramite;
                                this.urlreporte = response.data.urlreporte;

                                document.location.href = "#tramiteEnviado";
                                
                            })
                            .catch(e => {
                                this.formularioEnviado = false;
                                Swal.fire(
                                  'No se pudo enviar la solicitud!',
                                  '',
                                  'error'
                                );
                            });
                        }
                    })
                }
            },
            mounted(){
            }
        });

        // $(document).ready(function(){
        //     $('[data-toggle="tooltip"]').tooltip();
        //     $('[data-toggle="popover"]').popover();
        //     // $("td").focus();
        //     console.log('adsfadsfsadf');
        // });

        $(".jnumbersletters").keypress(function (key) {
            var key = key || window.event;
            var k = key.charCode || key.keyCode;
            if ((k < 97 || k > 122)//letras minusculas
                && (k < 65 || k > 90) //letras mayusculas
                && (k < 48 || k > 57) //NUmeros
                // && (k != 13) //ENTER
                && (k != 8) //retroceso
                && (k != 9) //tab
                && (k != 241) //ñ
                 && (k != 209) //Ñ
                 && (k != 32) //espacio
                 && (k != 225) //á
                 && (k != 233) //é
                 && (k != 237) //í
                 && (k != 243) //ó
                 && (k != 250) //ú
                 && (k != 193) //Á
                 && (k != 201) //É
                 && (k != 205) //Í
                 && (k != 211) //Ó
                 && (k != 218) //Ú
                 && (k != 44) //coma ,
                 && (k != 46) //punto .
                )
                return false;
        });

    </script>
{% endblock %}