
{% extends 'layoutEspecialSie.html.twig' %}

{% block contentoption %}
<style type="text/css">
.validation{ 
  background: #12c593 !important;
  padding: 10px !important;
  border-radius: 0 !important;
  position: relative; 
  display: inline-block !important;
  box-shadow: 1px 1px 1px #aaaaaa;
  margin-top: 10px;
}
.newRude{ 
  background: #20e5fb !important;
  padding: 10px !important;
  border-radius: 0 !important;
  position: relative; 
  display: inline-block !important;
  box-shadow: 1px 1px 1px #aaaaaa;
  margin-top: 10px;
}
.custom-date{
	background: #FFF !important;
}
</style>


    <!-- Start page header -->
    <div class="header-content">
        <h2><i class="fa fa-table"></i> Inscripción de nuevos estudiantes sin código RUDE <span></span></h2>
        <div class="breadcrumb-wrapper hidden-xs">
            <span class="label">Usted esta aquí:</span>
            <ol class="breadcrumb">
                <li>
                    <i class="fa fa-home"></i>
                    <a href="#">Inscripcion</a>
                    <i class="fa fa-angle-right"></i>
                </li>
                <li class="active">Nuevos sin código RUDE</li>
            </ol>
        </div><!-- /.breadcrumb-wrapper -->
    </div><!-- /.header-content -->
    <!--/ End page header -->


    <!-- /.row -->
<div id="app">
<div v-cloak>

	<div class="body-content animated fadeIn">
        <div class="row">
            <div class="col-xs-12 col-lg-12">
                <div class="panel panel-icon panel-default">
                    <div class="panel-heading">
                        <i class="fa fa-search"></i>
                        <strong>Si el estudiante no cuenta con Carnet de Identidad, debe solicitar la inscripción en la Dirección Distrital</strong>
                        <div class="pull-right">
                            {# <a href="{{ path('estudiantehistorialmodificacion') }}">Retornar Lista</a> #}
                        </div>                                        
                    </div>
                    {% if enableoption %}
                    <div class="panel-body">
                        <!-- form to search student -->
                       

                         <form role="form">
                            <div class="row">
                             <div class="col-sm-2">
                                <label for="idarrCedula">¿El Carnet de Identidad es?</label>
                                <select name="DBExpedido" id="idarrCedula" v-model="dataNewStudent.cedulaTipoId" class="custom-select form-control"> 
 								                  {% for item in arrCedula %}
                                    <option  value="{{ item.cedulaTipoId }}">{{ item.cedulaTipo }}</option>       
								                  {% endfor %}
                                </select> 
                              </div>
                              <div class="col-sm-2">
                              <label for="ci">(*)Carnet de Identidad</label>
                              <input type="text" class="form-control" placeholder="Carnet Identidad" v-model="dataNewStudent.cifind">
                              </div>
                              <div class="col-sm-2">
                              <label for="complemento(s)">Complemento</label>
                                  <input type="text" class="form-control" placeholder="Complemento"  maxlength="2" autocomplete="off" style="text-transform:uppercase" v-model="dataNewStudent.complementofind">
                              </div>
                              <div class="col-sm-1">
                              <label for="expedido">Expedido</label>
                                <select name="DBExpedido" id="idarrExpe" v-model="dataNewStudent.expedidoIdfind" class="custom-select form-control"> 
 								                  {% for entity in arrExpedido %}
                                    <option  value="{{ entity.id }}">{{ entity.sigla }}</option>       
								                  {% endfor %}
                                </select> 
                              </div>
                              <div class="col-sm-3">
                              	<label for="fechanac">(*)Fec. Nacimiento  dd-mm-aaaa</label>
                              	    <!-- <vuejs-datepicker input-class="custom-date" :bootstrap-styling="true" :format="customFormatter" v-model="dataNewStudent.fecnacfindOrig"></vuejs-datepicker>
                              	    <input type="text" class="form-control" placeholder="Complemento"  maxlength="2" autocomplete="off" style="text-transform:uppercase" v-model="dataNewStudent.fecnacfind" > -->
                                  <input type="text" placeholder="dd-mm-aaaa" id="form_idfecnac" name="form[idfecnac]" class="form-control jupper" v-model="dataNewStudent.fecnacfind">
                              </div>

                              <div class="col-sm-2" v-if="allowwithoutci">
	                              <label for="form_caseespecial" class="validation">SIN CI :</label>
  	                       			<input type="checkbox" v-model="dataNewStudent.withoutcifind" id="form_withoutcifind" name="form[withoutcifind]" class="form-check-input" value="1">
                              </div>
                               

                            </div>
                            </br>     
                            <div class="row">
                              <div class="col-sm-4">
                              <label for="paterno">Paterno</label>
                              <input type="input" class="form-control" placeholder="Paterno" v-model="dataNewStudent.paterno" maxlength="35" autocomplete="off" style="text-transform:uppercase">
                              </div>
                              <div class="col-sm-4">
                              <label for="materno">Materno</label>
                                  <input type="input" class="form-control" placeholder="Materno" v-model="dataNewStudent.materno" maxlength="35" autocomplete="off" style="text-transform:uppercase">
                              </div>
                              <div class="col-sm-4">
                              <label for="Nombre(s)">(*)Nombre(s)</label>
                                  <input type="input" class="form-control" placeholder="Nombre(s)" v-model="dataNewStudent.nombre" maxlength="35" autocomplete="off" style="text-transform:uppercase">
                              </div>
                            </div>
                            </br>
                            <div class="form-group row buscador">
	                            <div class="col-xs-3 col-sm-3 col-md-3 col-lg-3">
	                                <button v-on:click="buscarEstudiante()" type="button" class="btn btn-primary"><i class="fa fa-search"></i> Buscar y Validar</button>
	                            </div>
                          	</div>

                          	<div v-if="buscando" class="text-center">
                                <img src="{{asset('img/loading.gif')}}" alt=""> Buscando...
                            </div>

                            <div v-if=" message != '' && existStudent != ''">

                            	<!-- data new studen  -->
                            	<p class="encabezado bg-primary">INFORMACIÓN ESTUDIANTE(S) EXISTENTE</p>
                            	<table class="table table-dark">
                                <tbody>
                                  <tr>
                                    <th>#</th>
                                    <th>Cod. RUDE</th>
                                    <th>CI-COMPL.</th>
                                    <th>Paterno</th>
                                    <th>Materno</th>
                                    <th>Nombre(s)</th>
                                    <th>Fecha Nacimiento</th>	
                                  </tr>
                                  
                                  <tr v-for="(DBstudent,rindex) in DBstudentExist">
                                    <td>${ rindex }</td>
                                    <td>${DBstudent.rude | uppercase}</td>
                                    <td>${DBstudent.carnet} ${DBstudent.complemento}</td>
                                    <td>${DBstudent.paterno | uppercase}</td>
                                    <td>${DBstudent.materno | uppercase}</td>
                                    <td>${DBstudent.nombre | uppercase}</td>
                                    <td>${DBstudent.fecNac}</td>
                                  </tr>

                                </tbody>
                              </table>
                        	  </div>

                            <div class="alert alert-info" v-if="message != ''"> <i class="fa fa-warning"></i> ${message}</div>
                            
                            <div v-if="responseprocess">

                            	<!-- data new studen  -->
                            	<p class="encabezado bg-primary">INFORMACIÓN DEL NUEVO ESTUDIANTE</p>
                            	<table class="table table-dark">
                                <tbody>
                                  <tr>
                                    <th>Paterno: ${dataNewStudent.paterno | uppercase}</th>
                                    <th>Materno: ${dataNewStudent.materno | uppercase}</th>
                                    <th>Nombre(s): ${dataNewStudent.nombre | uppercase}</th>
                                  </tr>
                                  <tr>
                                    <th>CI: ${dataNewStudent.cifind}</th>
                                    <th>Complemento: ${dataNewStudent.complementofind}</th>
                                    <th>Fecha Nacimiento: ${dataNewStudent.fecnacfind}</th>
                                    
                                  </tr>
                                  
                                  
                                </tbody>
                              </table>
								            </br>
                            	<!-- end data new studen  -->

                            	<p class="encabezado bg-primary">INFORMACIÓN ADICIONAL</p>

	                            <div class="row">
	                             <div class="col-sm-3">
		                             <label for="genero">G&eacute;nero</label>
		                                <select name="arrGenero" id="idarrGenero" v-model="dataNewStudent.generoId" class="custom-select form-control">
		                                  <option v-for="item in DBGenero"  :value="item.generoId">${ item.genero }</option>       
		                                </select>
	                              </div>
                                <div class="col-sm-3">
		                             <label for="genero">Estado civil</label>
		                                <select name="arrEstadoCivil" id="idarrEstadoCivil" v-model="dataNewStudent.estadoCivilId" class="custom-select form-control">
		                                  <option v-for="item in DBEstadoCivil"  :value="item.estadoCivilId">${ item.estadoCivil }</option>       
		                                </select>
	                              </div>
                                <div class="col-sm-3">
	                                <label for="grupoSanguineo">Grupo Sanguíneo</label>                                  
	                                <select name="arrSangreTipo" id="idSangreTipo" v-model="dataNewStudent.sangreTipoId" class="custom-select form-control"  >
	                                  <option v-for="item in DBSangreTipo"  :value="item.sangreTipoId">${ item.grupoSanguineo }</option>       
	                                </select>
	                              </div>
                                <div class="col-sm-3">
	                                <label for="idiomaMaterno">Idioma Materno</label>                                  
	                                <select name="arrIdiomaMaterno" id="idIdiomaMaterno" v-model="dataNewStudent.idiomaMaternoId" class="custom-select form-control"  >
	                                  <option v-for="item in DBIdiomaMaterno"  :value="item.idiomaMaternoId">${ item.idiomaMaterno }</option>       
	                                </select>
	                              </div>

	                            </div>

	                            <div class="row">
	                              <div class="col-sm-3">
	                                <label for="pais">Pais</label>                                  
	                                <select name="arrPais" id="idarrPais_p" v-model="dataNewStudent.paisId" class="custom-select form-control" v-on:change="setPais();">
	                                  <option v-for="item in DBPais"  :value="item.paisId">${ item.pais }</option>       
	                                </select>
	                              </div>
	                              <div class="col-sm-3">
	                                  <label for="depto">Departamento</label>
	                                  <select name="arrPais" id="idarrPais_dept" v-model="dataNewStudent.lugarNacTipoId" class="custom-select form-control" v-on:change="setDepto();">  
	                                    <option v-for="item in DBDepto"  :value="item.deptoId">${ item.depto }</option>
	                                  </select>
	                              </div>
	                              <div class="col-sm-3">
	                                  <label for="provincia">Provincia</label>
	                                  <select name="arrPais" id="idarrPais_provi" v-model="dataNewStudent.lugarProvNacTipoId" class="custom-select form-control" >  
	                                    <option v-for="item in DBProvincia"  :value="item.provinciaId">${ item.provincia }</option>
	                                  </select>
	                              </div>
	                              <div class="col-sm-3">
	                                  <label for="localidad">Localidad</label>
	                                  <input type="input" class="form-control" id="localidad" placeholder="Localidad" v-model="dataNewStudent.localidad" maxlength="50" autocomplete="off" style="text-transform:uppercase">
	                              </div>
	                            </div>

	                           
	                            <div class="row">
	                              <div class="col-sm-6">
	                                  <label for="correo">Correo</label>
	                                  <input type="input" class="form-control" id="correo" placeholder="Correo electrónico" v-model="dataNewStudent.correo" maxlength="200" autocomplete="off" >
	                              </div>
	                              <div class="col-sm-6">
	                                  <label for="celular">Celular</label>
	                                  <input type="input" class="form-control" id="celular" placeholder="Número de celular" v-model="dataNewStudent.celular" maxlength="40" autocomplete="off" style="text-transform:uppercase">
	                              </div>
	                            </div>
                              <br>
                              <p class="encabezado bg-primary">DATOS DE DISCAPACIDAD</p>
	                            <div class="row">
	                              <div class="col-sm-6">
	                                  <label for="codepedis">Carnet CODEPEDIS</label>
	                                  <input type="input" class="form-control" id="codepedis" placeholder="Numero de carnet CODEPEDIS" v-model="dataNewStudent.carnetcodepedis" maxlength="200" autocomplete="off" style="text-transform:uppercase">
	                              </div>
	                              <div class="col-sm-6">
	                                  <label for="ibc">Carnet IBC</label>
	                                  <input type="input" class="form-control" id="ibc" placeholder="Número de carnet IBC" v-model="dataNewStudent.carnetibc" maxlength="40" autocomplete="off" style="text-transform:uppercase">
	                              </div>
	                            </div>
                               <p class="encabezado bg-primary">DATOS DE PARTIDA DE NACIMIENTO </p>
                               <div class="row">
					                              <div class="col-sm-4">
                                            <label for="certificado">Adjuntar Certificado de Nacimiento</label>
                                            <input type="file" name="image" @change="getImage" accept="file/*" class="form-control" id="archivoAdjuntoId">
                                        </div>

                               </div>
                                <div class="row">
	                              <div class="col-sm-3">
	                                  <label for="oficialia">Oficialia</label>
	                                  <input type="input" class="form-control" id="oficialia" placeholder="Oficialia" v-model="dataNewStudent.oficialia" maxlength="40" autocomplete="off" style="text-transform:uppercase">
	                              </div>
	                              <div class="col-sm-3">
	                                  <label for="libro">Libro</label>
	                                  <input type="input" class="form-control" id="libro" placeholder="Libro" v-model="dataNewStudent.libro" maxlength="40" autocomplete="off" style="text-transform:uppercase">
	                              </div>
	                              <div class="col-sm-3">
	                                  <label for="partida">Partida</label>
	                                  <input type="input" class="form-control" id="partida" placeholder="Partida" v-model="dataNewStudent.partida" maxlength="40" autocomplete="off" style="text-transform:uppercase">
	                              </div>	                             
	                              <div class="col-sm-3">
	                                  <label for="folio">Folio</label>
	                                  <input type="input" class="form-control" id="folio" placeholder="Folio" v-model="dataNewStudent.folio" maxlength="40" autocomplete="off" style="text-transform:uppercase">
	                              </div>	                             
	                            </div>

	                            </br>
                               <div class="row">
	                              <div class="col-sm-3">
	                                  <label for="localidad"><B>INGRESE EL CÓDIGO DEL CENTRO EDUCATIVO ESPECIAL</B></label>
	                                  <input type="input" class="form-control" id="sieid" placeholder="SIE" v-model="dataNewStudent.sie" maxlength="8" v-on:keyup="getInfoUe(1);">
	                              </div>
									
			                        </div>
	                            </br>

	                            <div v-if="buscandoue" class="text-center">
                                	<img src="{{asset('img/loading.gif')}}" alt=""> Buscando...
	                            </div>                
	                            <div class="alert alert-info" v-if="!nombreue"> <i class="fa fa-warning"></i> ${messageue}</div>


	                            <div v-if="swprocessue">
	                            	<div class="row">
		                              <div class="col-md-12">
	                            		<p class="p-4 mb-3 bg-primary"> <strong>CENTRO EDUCATIVO: ${nombreue}</strong> </p>
			                          </div>
			                        </div>

                              <div class="row">
                                  <div class="col-xs-3 col-sm-3 col-md-3 col-lg-3">
			                                <button v-on:click="doInscriptionEspecial(1)" type="button" class="btn btn-info" :disabled="state.isSending"><i class="fa fa-book"></i> Guardar datos</button>
			                            </div>
			                        </div>
	                           
	                          </div>
                            
                        	</div>

                        	<div v-if="swinscription">
                        		<p class="encabezado bg-primary">INFORMACIÓN DEL NUEVO ESTUDIANTE</p>
                            	<table class="table table-dark">
                                <tbody>
                                  <tr>
                                    <th>Cod. Rude: <label class="newRude">${DBNewStudent.rude }</label> </th>
                                    <th>Paterno: ${DBNewStudent.paterno }</th>
                                    <th>Materno: ${DBNewStudent.materno }</th>
                                    <th>Nombre(s): ${DBNewStudent.nombre }</th>
                                  </tr>			    
                                  
                                </tbody>
                              </table>
                              </br>
                             
                        	</div>
                   	
                                                      
                          </form>
                            
                    </div>
                    {% else %}
                    <div class="panel-body">
                    	<div class="alert alert-warning"> <i class="fa fa-warning"></i> {{message}}</div>
                    </div>
                    {% endif %}
                </div>
            </div>
        </div>
	</div>
</div>
</div>

{% endblock %}
{% block javascripts%}
    {{parent()}}
    <script type="text/javascript">
		// $("#form_idfecnac").inputmask({ "alias": "dd-mm-yyyy", 'placeholder':'dd-mm-aaaa' });
	</script>
	
    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.24.0/moment-with-locales.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/axios/0.15.2/axios.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@8"></script>   
      <script src="{{asset('js/inputmask.js')}}"></script>
    <script type="text/javascript">
// $("#form_idfecnac").inputmask({ "alias": "dd-mm-yyyy", 'placeholder':'dd-mm-aaaa' });
    
    Vue.filter('uppercase', function (value) {
    	if (typeof value === "undefined") 
			return '';
		else
			return value.toUpperCase()
	})

        var app = new Vue({
            delimiters: ['${', '}'],
            el: '#app',

            /*components: {
			  	vuejsDatepicker
			  },*/

            data: {
              state: {isSending: false},
		          allowwithoutci : '{{allowwithoutci}}',
            	dataNewStudent: {'withoutcifind':false, 'swnewforeign':false, 'articuleten':false, 'swrezago':false},
 		          oldStudent: {'articuleten':false, 'swrezago':false},
            	responseprocess:false,
            	swprocessue:false,
            	swinscription:false,
            	nombreue:true,
            	buscando:false,
                buscandoue:false,
                existStudent:false,
                swhomonimo:false,
            	message:'',           	
            	swci:'',           	
            	messageue:'',           	
                DBPais: {},
                DBDepto: {},
                DBIdiomaMaterno: {},
                DBSangreTipo: {},
                DBEstadoCivil: {},
                DBProvincia: {},
                DBNewStudent:{},
                DBNewInscription:{},
                DBstudentExist:{},
                dataSaveStudent:{},
                informe:'',
                swhistory:false,
                swoldinscription:false,
                codigoRude:'',
                gestion:'',
                item:'',
                arraOptionBuscar:'',
                rudeBuscar:'',
                optionBuscar:'',
                studentId:'',
                urlreport: '',
                responseSegip:'',
                responseFormTwo:'',
                respuesta:'',
                dataStudentModif: {},
                dataModifyToSend:[],
                archivoAdjunto:'',
                showbuttonPDF:false,
                swCertification:false,
               
            },
            methods: {

            	clearFields: function(){
            		this.buscando = true;
                    this.responseprocess = false;
                    this.swinscription = false;
                    this.swprocessue = false;
                    this.DBstudentExist=false;
                    this.existStudent=false;
                    this.message = '';
                    this.dataNewStudent.generoId= '';
                    this.dataNewStudent.grupoSanguineoId= '';
                    this.dataNewStudent.idiomaMaternoId= '';
                    this.dataNewStudent.paisId= '';
                    this.dataNewStudent.estadoCivilId= '';
                	this.DBDepto= '';
                	this.DBProvincia= '';
                	this.dataNewStudent.localidad='';
                	this.dataNewStudent.sie = '';
                	this.swhomonimo = false;

                this.dataNewStudent.typeInscription = 0;

            		this.swhomonimo = false;
                	this.swoldinscription = false;
	                this.oldStudent = {};  
            	},
                buscarEstudiante: function(){
                	let _this = this;
                	_this.clearFields();
                	this.state.isSending = false;
                    
                  if (typeof this.dataNewStudent.withoutcifind === "undefined") {
					          this.dataNewStudent.withoutcifind = false;
					        }

                  if(!this.dataNewStudent.withoutcifind){
                    if (typeof this.dataNewStudent.cifind === "undefined") {
                          Swal.fire(
                                    'Carnet de Identidad',
                                    'Debe ingresar un Carnet de Identidad válido, en caso de que la/el estudiante no tenga el carnet de identidad, el registro se lo realiza por medio del TÉCNICO DE DISTRITO',
                                    'warning'
                                    );
                          this.buscando = false;
                                return;
                    } 					
                  }
                  if (typeof this.dataNewStudent.fecnacfind === "undefined") {
                    Swal.fire(
                                    'Fecha de Nacimiento',
                                    'Debe ingresar la Fecha de Nacimiento del Estudiante Ej: 01-01-2015',
                                    'warning'
                                    );
                        this.buscando = false;
                              return;
                  }
                  if (typeof this.dataNewStudent.nombre === "undefined" || this.dataNewStudent.nombre == "") {
                    Swal.fire(
                                    'Nombre del Estudiante',
                                    'Debe ingresar el Nombre(s) del Estudiante',
                                    'warning'
                                    );
                        this.buscando = false;
                        return;
                  }					
                  if (((typeof this.dataNewStudent.paterno === "undefined" || typeof this.dataNewStudent.materno === "undefined") && (this.dataNewStudent.paterno == "" || this.dataNewStudent.materno == ""))) {
                    Swal.fire(
                                    'Apellidos del Estudiante',
                                    'Debe ingresar Apellido(s) del Estudiante',
                                    'warning'
                                    );
                        this.buscando = false;
                        return;
                  }
                  if ( this.dataNewStudent.withoutcifind==false && (typeof this.dataNewStudent.cedulaTipoId === "undefined" || typeof this.dataNewStudent.cedulaTipoId === "" )) {
                    Swal.fire(
                                    'El Carnet de Identidad es?',
                                    'Debe  seleccionar si el estudiante es Nacional o extranjero',
                                    'warning'
                                    );
                        this.buscando = false;
                        return;
                  }
                  if (typeof this.dataNewStudent.complementofind === "undefined") {
                    this.dataNewStudent.complementofind = '';
                  }
                  if (typeof this.dataNewStudent.expedidoIdfind === "undefined") {
                    this.dataNewStudent.expedidoIdfind = 0;
                  }				

                  if (typeof this.dataNewStudent.cedulaTipoId === "undefined") {
                    this.dataNewStudent.cedulaTipoId = 0;
                  }		
					
                    axios.get(Routing.generate('newinscriptionEspecial_checksegipstudent', this.dataNewStudent ))
                    .then(response => {
                        if (response.status == 200) {
                        	this.responseprocess = response.data.swcreatestudent;
                        	this.message = response.data.message;
                          this.swci = response.data.swci;
                        	this.DBGenero= response.data.arrGenero;
                        	this.DBPais= response.data.arrPais;
                          this.DBSangreTipo= response.data.arrSangreTipo;
                          this.DBIdiomaMaterno= response.data.arrIdiomaMaterno;
                          this.DBEstadoCivil= response.data.arrEstadoCivil;
                        	this.DBstudentExist= response.data.arrStudentExist;
                        	this.existStudent = response.data.existStudent;
                        }                        
                        this.buscando = false;
                    })
                    .catch(e => {
                        console.log(e);
                        this.buscando = false;
                    });
                },
           
                setGenero: function(){
                    var me = this;
                    $.each(this.DBGenero, function (i, value) {
                        if(me.dataStudentModif.generoTipoId == value.generoId) {
                            me.dataStudentModif.generoTipo = value.genero;
                        }
                    });                    
                },
               
                setPais: function(){
                	
                    var me = this;
                    if(me.dataNewStudent.paisId == 1){
                         axios.post(Routing.generate('newinscriptionInipri_getdepto',{ paisId:me.dataNewStudent.paisId }  ))
                            .then(response => {
                                if (response.status == 200) {
                                    this.DBDepto = response.data.arrDepto;
                                    $('[data-toggle="tooltip"]').tooltip();
                                }
                                this.buscando = false;
                            })
                            .catch(e => {
                                console.log(e);
                                this.buscando = false;
                            });
                    }else{
                        this.DBDepto = '';
                        this.DBProvincia = '';
                        me.dataStudentModif.lugarNacTipoId ='';
                        me.dataStudentModif.lugarProvNacTipoId ='';
                    }
                    
                },
                setDepto: function(){
                    var me = this;
                  /*  $.each(this.DBDepto, function (i, value) {
                        if(me.dataStudentModif.lugarNacTipoId == value.deptoId) {
                            me.dataStudentModif.lugarNacTipo = value.depto;
                        }                        
                    });*/  
                    
                    if(me.dataNewStudent.paisId == 1 && me.dataNewStudent.lugarNacTipoId>0){
                         axios.post(Routing.generate('newinscriptionInipri_getprovincia', me.dataNewStudent ))
                            .then(response => {
                                if (response.status == 200) {
                                    this.DBProvincia = response.data.arrProvincia;
                                    $('[data-toggle="tooltip"]').tooltip();
                                }
                                if( response.status == 202){
                                    this.respuesta = response.data;
                                }

                                this.buscando = false;
                            })
                            .catch(e => {
                                console.log(e);
                                this.buscando = false;
                            });
                    }else{
                        this.DBDepto = '';
                        this.DBProvincia = '';
                        me.dataStudentModif.lugarNacTipoId ='';
                        me.dataStudentModif.lugarProvNacTipoId ='';
                    }

                },
                setProvincia: function(){
                    var me = this;
                    $.each(this.DBProvincia, function (i, value) {
                        if(me.dataStudentModif.lugarProvNacTipoId == value.provinciaId) {
                            me.dataStudentModif.lugarProvNacTipo = value.provincia;
                            me.dataModifyToSend.push({'provinciaId':me.dataStudentModif.lugarProvNacTipoId})
                        }
                    });                    
                }, 
                getInfoUe: function(newobject){
                	if(newobject == 1){
                		this.dataSaveStudent = this.dataNewStudent;
                	}else{
                		this.dataSaveStudent = this.oldStudent;
                	}                	

                	if(this.dataSaveStudent.sie.length >= 7){

                	     		
                		this.messageue='';
                		this.buscandoue = true;
                		    axios.post(Routing.generate('newinscriptionEspecial_getInfoUe', this.dataSaveStudent ))
                            .then(response => {
                                if (response.status == 200) {
                                    this.swprocessue = response.data.swprocessue;
                                    this.nombreue = response.data.nombreue;
                                    this.messageue = response.data.message;
                                    $('[data-toggle="tooltip"]').tooltip();
                                }
                               
                                this.buscandoue = false;
                            })
                            .catch(e => {
                                console.log(e);
                                // this.buscando = false;
                            });
                	}
                },
              
        doInscriptionEspecial: function(swnewforeign){
                  
			if(swnewforeign == 0){
                           this.oldStudent.swnewforeign = swnewforeign;
                           this.dataSaveStudent = this.oldStudent;
                         }else{
                           this.dataNewStudent.swnewforeign = swnewforeign;
                           this.dataSaveStudent = this.dataNewStudent;
                         }
                         
		
		 if (this.dataSaveStudent.generoId == '') {
                        Swal.fire(
                        'Campo Género requerido',
                        'Debe seleccionar Género',
                        'warning'
                        );
                        return;
                    }
		 if (this.dataSaveStudent.paisId == '') {
                        Swal.fire(
                        'Campo Pais requerido',
                        'Debe debe seleccinar un Pais',
                        'warning'
                        );
                        return;
                    }
		 if (this.dataSaveStudent.sangreTipoId == '') {
                        Swal.fire(
                        'Campo Grupo Sanguíneo requerido',
                        'Debe seleccionar el Grupo Sanguínea',
                        'warning'
                        );
                        return;
                    }
		 
                 if(this.dataSaveStudent.paisId == 1){
                        if(typeof this.dataSaveStudent.lugarNacTipoId ==='undefined' ){
                                Swal.fire(
                                'Campo Departamento requerido',
                                'Debe seleccionar un Departamento',
                                'warning'
                                );
                                return;
                        }

                         if(typeof this.dataSaveStudent.lugarProvNacTipoId ==='undefined' ){
                                Swal.fire(
                                'Campo Provincia requerido',
                                'Debe seleccionar una Provincia',
                                'warning'
                                );
                                return;
                        }
                        if(this.dataSaveStudent.localidad =='' ){
                                Swal.fire(
                                'Campo Localidad requerido',
                                'Debe registrar la localidad',
                                'warning'
                                );
                                return;
                        }


                }


           
           
                /*validate the file attached*/
		if(this.allowwithoutci){
                    if (typeof this.informe != 'object') {
                        Swal.fire(
                        'Adjuntar Documento',
                        'Debe adjuntar el CERTIFICADO DE NACIMIENTO para ralizar la inscripción, puede ser un archivo de imagen o PDF',
                        'warning'
                        );
                        return;
                    }
                 }
                	Swal.fire({
                        title: 'Guardar datos?',
                        text: "esta seguro de guardar los datos y crear el codigo RUDE",
                        type: 'question',
                        showCancelButton: true,
                        confirmButtonColor: '#3085d6',
                        cancelButtonColor: '#d33',
                        confirmButtonText: 'Si, proceder',
                        cancelButtonText: 'Cancelar'
                    }).then((result) => {
                    	if (result.value) {

                    	//	if(swnewforeign == 0){
                    	//		this.oldStudent.swnewforeign = swnewforeign;
                    	//		this.dataSaveStudent = this.oldStudent;
                    	//	}else{
                    	//		this.dataNewStudent.swnewforeign = swnewforeign;
                    	//		this.dataSaveStudent = this.dataNewStudent;
                    	//	}                    		
							this.state.isSending = true; 
                    		var data = new FormData();
                            data.append('datos', JSON.stringify(this.dataSaveStudent));
                            data.append('informe', this.informe);

	            		    axios.post(Routing.generate('newinscriptionEspecial_doInscriptionEspecial'), data )
	                        .then(response => {
	                            if (response.status == 200) {
	                                this.DBNewStudent = response.data.arrStudent;
	                                this.DBNewInscription = response.data.arrInscription;
									                this.responseprocess=false;
									                this.swinscription=response.data.swinscription;
									                this.message=response.data.message;
	                                this.dataNewStudent = {};

	                                $('[data-toggle="tooltip"]').tooltip();
	                            }
	                           
	                            this.buscandoue = false;
	                            //this.message = false;
	                            this.existStudent = false;
	                            this.swoldinscription = false;
	                        })
	                        .catch(e => {
	                            console.log(e);
	                            // this.buscando = false;
	                        });
                    	}
                    })

            	
                },
                // copyfecnac: function(){
                // 	console.log(this.dataNewStudent.fecnacfind);
                // 	return;
                // },

                customFormatter(date) {
			      return moment(date).format('l');
			    },
                               

                getImage: function(event){
                    var informe = event.target.files[0];
                    var allowedExtensions = /(.jpg|.jpeg|.png|.gif|.pdf)$/i;
                    if(!allowedExtensions.exec(event.target.value)){
                        event.target.value = '';
                        Swal.fire(
                              'Archivo incorrecto!',
                              'El archivo adjunto debe ser una imagen o un archivo pdf',
                              'warning'
                            );
                        this.informe = '';
                        return false;
                    }else{
                        var megas = (informe.size / 1024)/1024;
                        if (megas > 2) {
                            event.target.value = '';
                            Swal.fire(
                              'Tamaño no permitido!',
                              'El archivo debe tener un tamaño menor a 2MB',
                              'warning'
                            );
                            this.informe = '';
                            return false;
                        }
                    }
                    this.informe = event.target.files[0];
                },                

            },
            mounted(){
                var selector = document.getElementById("form_idfecnac");
                Inputmask("datetime",{ inputFormat: "dd-mm-yyyy", outputFormat: "mm-yyyy-dd", inputEventOnly: true}).mask(selector);
            }
        });

        $(document).ready(function(){
            $('[data-toggle="tooltip"]').tooltip();
            $("td").focus();
        });        


    function validarFormatoFecha(campo) {
        var RegExPattern = /^\d{1,2}\-\d{1,2}\-\d{4}$/;
        if ((campo.match(RegExPattern)) && (campo!='')) {
                return true;
        } else {
                return false;
        }
    }    


    </script>
{%endblock%}
