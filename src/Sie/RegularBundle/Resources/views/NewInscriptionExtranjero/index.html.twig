{% extends 'layoutRegular.html.twig' %}
{% block stylesheets %}
    {{parent()}}
    <style>
        .higherWider {
            width:800px;
            margin-top:100px;
        }
        [v-cloak]{
            display: none;
        }
        .tachado{
            text-decoration: line-through;
            /* color: #D5956E; */
            color:  #D51528;
            opacity: 0.4;
        }
    </style>

{% endblock %}
{% block contentoption %}

</style>


    <!-- Start page header -->
    <div class="header-content">
      <br>
        <h2><i class="fa fa-file"></i> Inscripción: Estudiante que proviene del Exterior del País<span></span></h2>
        <div class="breadcrumb-wrapper hidden-xs">
            <span class="label">Usted esta aquí:</span>
            <ol class="breadcrumb">
                <li>
                    <i class="fa fa-home"></i>
                    <a href="#">Inscripción Est. Proviene del Exterior</a>
                    {# <i class="fa fa-angle-right"></i> #}
                </li>
                <li class="active">Buscar</li>
            </ol>
        </div><!-- /.breadcrumb-wrapper -->
    </div><!-- /.header-content -->
    <!--/ End page header -->


    <!-- /.row -->
<div id="app">
<div v-cloak>
    <div class="modal fade" id="modalEstudianteTwo" data-backdrop="static">
        <div class="modal-dialog" style="width:800px">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                    <h4 class="modal-title">HISTORIAL DEL ESTUDIANTE</h4>
                </div>
                <div class="modal-body">

							  <div v-if="swhistory" class="text-center">
                                <img src="{{asset('img/loading.gif')}}" alt=""> Buscando...
                              </div>

                              <div v-if="historyReg">

                                <h4 align="center" class="text-primary">Educación Regular</h4><hr>
                                <div id="" class="dataTables_wrapper form-inline" role="grid">
                                <table id="example-table" class="table table-striped table-bordered table-hover table-green " aria-describedby="example-table_info" style="font-size:11px">
                                    <thead>
                                      <tr role="row">
                                       <th class="text-center">Gestión</th>
                                       <th class="text-center">SIE</th>
                                       <th class="text-center">Unidad Educativa</th>
                                       <th class="text-center">Nivel</th>
                                       <th class="text-center">Grado</th>
                                       <th class="text-center">Paralelo</th>
                                       <th class="text-center">Turno</th>
                                       <th class="text-center">Estado Matrícula</th>
                                      </tr>
                                    </thead>

                                    <tbody role="alert" aria-live="polite" aria-relevant="all">
                                      <tr v-for="(historyR, index) in historyReg">
                                        <td>${historyR.gestion_tipo_id_raep}</td>
                                        <td>${historyR.institucioneducativa_id_raep}</td>
                                        <td>${historyR.institucioneducativa_raep}</td>
                                        <td>${historyR.nivel_r}</td>
                                        <td>${historyR.grado_r}</td>
                                        <td>${historyR.paralelo_raep}</td>
                                        <td>${historyR.turno_raep}</td>
                                        <td class="text-center">${historyR.estadomatricula_fin_r}</td>
                                      </tr>
                                    </tbody>
                                  </table>
                                </div>

                              </div>

                              <div v-if="historyAlt">

                                <h4 align="center" class="text-primary">Educación Alternativa</h4><hr>
                                <div id="" class="dataTables_wrapper form-inline" role="grid">
                                <table id="example-table" class="table table-striped table-bordered table-hover table-green " aria-describedby="example-table_info" style="font-size:11px">
                                    <thead>
                                      <tr role="row">
                                       <th class="text-center">Gestión</th>
                                       <th class="text-center">SIE / Subcentro</th>
                                       <th class="text-center">Centro</th>
                                       <th class="text-center">Periodo</th>
                                       <th class="text-center">Acreditación</th>
                                       <th class="text-center">Área</th>
                                       <th class="text-center">Especialidad</th>
                                       <th class="text-center">Paralelo</th>
                                       <th class="text-center">Turno</th>
                                      </tr>
                                    </thead>

                                    <tbody role="alert" aria-live="polite" aria-relevant="all">
                                      <tr v-for="(historyA, index) in historyAlt">
                                        <td>${historyA.gestion_tipo_id_raep}</td>
                                        <td>${historyA.institucioneducativa_id_raep} - ${historyA.sucursal_tipo_id_a}</td>
                                        <td>${historyA.institucioneducativa_raep}</td>
                                        <td>${historyA.periodo_raep}</td>
                                        <td>${historyA.acreditacion_a}</td>
                                        <td>${historyA.facultad_area_a}</td>
                                        <td>${historyA.especialidad_a}</td>
                                        <td>${historyA.paralelo_raep}</td>
                                        <td>${historyA.turno_raep}</td>
                                      </tr>
                                    </tbody>
                                  </table>
                                </div>

                              </div>                            

                              <div v-if="historyEsp">

                                <h4 align="center" class="text-primary">Educación Especial</h4><hr>
                                <div id="" class="dataTables_wrapper form-inline" role="grid">
                                <table id="example-table" class="table table-striped table-bordered table-hover table-green " aria-describedby="example-table_info" style="font-size:11px">
                                    <thead>
                                      <tr role="row">
                                       <th class="text-center">Gestion</th>
                                       <th class="text-center">SIE</th>
                                       <th class="text-center">Centro</th>
                                       <th class="text-center">Área</th>
                                       <th class="text-center">Nivel</th>
                                       <th class="text-center">Grado</th>
                                       <th class="text-center">Paralelo</th>
                                       <th class="text-center">Turno</th>
                                       <th class="text-center">Técnico</th>
                                      </tr>
                                    </thead>

                                    <tbody role="alert" aria-live="polite" aria-relevant="all">
                                      <tr v-for="(historyE, index) in historyEsp">
                                        <td>${historyE.gestion_tipo_id_raep}</td>
                                        <td>${historyE.institucioneducativa_id_raep}</td>
                                        <td>${historyE.institucioneducativa_raep}</td>
                                        <td>${historyE.area_especial_e}</td>
                                        <td>${historyE.nivel_e}</td>
                                        <td>${historyE.grado_e}</td>
                                        <td>${historyE.paralelo_raep}</td>
                                        <td>${historyE.turno_raep}</td>
                                        <td>${historyE.tecnica_e}</td>
                                      </tr>
                                    </tbody>
                                  </table>
                                </div>

                              </div>

                              <div v-if="historyPer">

                                <h4 align="center" class="text-primary">Programa Nacional de Post-alfabetización</h4><hr>
                                <div id="" class="dataTables_wrapper form-inline" role="grid">
                                <table id="example-table" class="table table-striped table-bordered table-hover table-green " aria-describedby="example-table_info" style="font-size:11px">
                                    <thead>
                                      <tr role="row">
                                        <th class="text-center">Gestión</th>
                                        <th class="text-center">Lugar</th>
                                        <th class="text-center">Plan</th>
                                        <th class="text-center">Grado</th>
                                        <th class="text-center">Fecha Inicio</th>
                                        <th class="text-center">Fecha Fin</th>
                                        <th class="text-center">Id Curso</th>
                                        <th class="text-center">Estado Matrícula</th>
                                        <th class="text-center">Acciones</th>
                                      </tr>
                                    </thead>

                                    <tbody role="alert" aria-live="polite" aria-relevant="all">
                                      <tr v-for="(historyP, index) in historyPer">
                                        <td>${historyP.gestion}</td>
                                        <td>${historyP.institucioneducativa}</td>
                                        <td>${historyP.partp}</td>
                                        <td>${historyP.bloquep}</td>
                                        <td></td>
                                      </tr>
                                    </tbody>
                                  </table>
                                </div>

                              </div>

                </div>
            </div>
        </div>
    </div> 
	<div class="body-content animated fadeIn">
        <div class="alert alert-warning alert-dismissible" role="alert">
            <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                <span aria-hidden="true">&times;</span>
            </button>
            <strong>Importante:</strong> 
            <p>
                Estudiantes extranjeros con documentación que acredite el último año de escolaridad cursado, deberán ser inscritos al año de escolaridad que corresponde. 
            </p>
            <p>
                Estudiantes extranjeros que <strong>NO</strong> cuenten con documentación deberán ser evaluados según el grupo etario.
            </p>
            <p>
              Todos los casos aplica la convalidación de estudios con resolución administrativa departamental, a traves del cual se reconoce su continuidad de estudios, y se aplica en la gestión en la llega o se presenta para la convalidación.
            </p>
        </div>
  

        <div class="row">
            <div class="col-xs-12 col-lg-12">

                <div class="panel panel-icon panel-default">
                    
                    {% if enableoption %}
                    <div class="panel-body">
                        <!-- form to search student -->
                         <form role="form">

                          <ul class="nav nav-tabs" >
                            <li role="presentation" class="active">
                                <a href="#sinrude" data-toggle="tab">
                                    <h5><strong> INSCRIPCIÓN POR DATOS DEL ESTUDIANTE </strong></h5>
                                </a>
                            </li>
                            <li role="presentation">
                                <a href="#conrude" data-toggle="tab">
                                    <h5><strong> INSCRIPCIÓN POR CÓDIGO RUDE </strong></h5>
                                </a>
                            </li>
                          </ul>

                              <!-- Tab panes -->
                    <div class="tab-content">
                          <div role="tabpanel" class="tab-pane fade in active" id="sinrude">
                             <div class="panel-heading">
                                <i class="fa fa-search"></i>
                                <strong> Si el estudiante no cuenta con Carnet de Identidad, debe solicitar la inscripción en la Dirección Distrital</strong>
                              </div>

                              <div class="row">
                              <div class="col-sm-2">
                              <label for="ci">(*)Carnet de Identidad</label>
                              <input type="text" class="form-control" placeholder="Carnet Identidad" v-model="dataNewStudent.cifind">
                              </div>
                              <div class="col-sm-2">
                              <label for="complemento(s)">Complemento</label>
                                  <input type="text" class="form-control" placeholder="Complemento"  maxlength="2" autocomplete="off" style="text-transform:uppercase" v-model="dataNewStudent.complementofind">
                              </div>
                              <div class="col-sm-1">
                              <label for="expedido">Expedido</label>
                                <select name="DBExpedido" id="idarrExpe" v-model="dataNewStudent.expedidoIdfind" class="custom-select form-control"> 
 								                {% for entity in arrExpedido %}
                                  <option  value="{{ entity.id }}">{{ entity.sigla }}</option>       
								                {% endfor %}
                                </select> 
                              </div>
                              <div class="col-sm-2">
                              	<label for="fechanac">(*)Fec. Nacimiento  dd-mm-aaaa</label>
                              	    <!-- <vuejs-datepicker input-class="custom-date" :bootstrap-styling="true" :format="customFormatter" v-model="dataNewStudent.fecnacfindOrig"></vuejs-datepicker>
                              	    <input type="text" class="form-control" placeholder="Complemento"  maxlength="2" autocomplete="off" style="text-transform:uppercase" v-model="dataNewStudent.fecnacfind" > -->
                                  <input type="text" placeholder="dd-mm-aaaa" id="form_idfecnac" name="form[idfecnac]" class="form-control jupper" v-model="dataNewStudent.fecnacfind">
                              </div>

                              <div class="col-sm-1">
                                {% if allowwithoutci %}
                                    <label for="form_caseespecial" class="validation">SIN CI :</label>
                                    <input type="checkbox" v-model="dataNewStudent.withoutcifind" id="form_withoutcifind" name="form[withoutcifind]" class="form-check-input" value="1">
                                {% endif %}
                              </div>

                              

                              <div class="col-sm-3">

                                  <div class="form-group">

                                      <input class="form-check-input" type="radio" name="nacionalidad" id="nacional" value="NA"  v-model="tipo_persona" checked>
                                      <label class="form-check-label" for="nacional">
                                          Carnet de Identidad Nacional 
                                      </label>
                                  </div>
                                  <div class="form-check">
                                      <input class="form-check-input" type="radio" name="nacionalidad" id="extranjero" value="EX" v-model="tipo_persona">
                                      <label class="form-check-label" for="extranjero">
                                          Carnet de Identidad Extranjero (Comienza con 'E')
                                      </label>
                                  </div>
                                  
                              </div>

                              

                            </div>
                            </br>     
                            <div class="row">
                              <div class="col-sm-4">
                              <label for="paterno">Paterno</label>
                              <input type="input" class="form-control" placeholder="Paterno" v-model="dataNewStudent.paterno" maxlength="35" autocomplete="off" style="text-transform:uppercase">
                              </div>
                              <div class="col-sm-4">
                              <label for="materno">Materno</label>
                                  <input type="input" class="form-control" placeholder="Materno" v-model="dataNewStudent.materno" maxlength="35" autocomplete="off" style="text-transform:uppercase">
                              </div>
                              <div class="col-sm-4">
                              <label for="Nombre(s)">(*)Nombre(s)</label>
                                  <input type="input" class="form-control" placeholder="Nombre(s)" v-model="dataNewStudent.nombre" maxlength="35" autocomplete="off" style="text-transform:uppercase">
                              </div>
                            </div>
                            </br>
                            
                            <div class="form-group row buscador">
	                            <div class="col-xs-3 col-sm-3 col-md-3 col-lg-3">
	                                <button v-on:click="buscarEstudiante()" type="button" class="btn btn-primary"><i class="fa fa-search"></i>Buscar && Validar</button>
	                            </div>
                        	</div>
                          </br>
                          </div>
                          <div role="tabpanel" class="tab-pane" id="conrude">
                             
                          <form>
                            <div class="form-group">
                              <label for="rude">Código Rude</label>
                              <input type="text" v-model="dataNewStudent.rude"  class="form-control" id="exampleInputPassword1" placeholder="Rude">
                            </div>
                            <button v-on:click="lookforrude()" type="button" class="btn btn-primary"><i class="fa fa-search"></i>**Buscar && Validar</button>
                          </form>
                          </div>
                    </div>
                    <!-- end Tab panes -->
                         
                        	<div v-if="buscando" class="text-center">
                                <img src="{{asset('img/loading.gif')}}" alt=""> Buscando...
                            </div>

                            <div v-if=" message != '' && existStudent != ''">

                            	<!-- data new studen  -->
                            	<p class="encabezado bg-primary">INFORMACIÓN ESTUDIANTE(S) EXISTENTE</p>
                            	<table class="table table-dark">
								  <tbody>
								  	<tr>
								  	  <th>#</th>
								  	  <th>Cod. RUDE</th>
								      <th>CI-COMPL.</th>
								      <th>Paterno</th>
								      <th>Materno</th>
								      <th>Nombre(s)</th>
								      <th>Fecha Nacimiento</th>	
								  	</tr>
								    
								    <tr v-for="(DBstudent,rindex) in DBstudentExist">
								      <td>${ rindex }</td>
								      <td>${DBstudent.rude | uppercase}</td>
								      <td>${DBstudent.carnet} ${DBstudent.complemento}</td>
								      <td>${DBstudent.paterno | uppercase}</td>
								      <td>${DBstudent.materno | uppercase}</td>
								      <td>${DBstudent.nombre | uppercase}</td>
								      <td>${DBstudent.fecNac} </td>
								      <td><button v-on:click="oldInscription(DBstudent.idStudent, rindex)" type="button" class="btn btn-info"><i class="fa fa-book"></i> INSCRIBIR </button></td>
								    </tr>

								    <tr >
								    	<th colspan="3" align="center">
								    		<button v-on:click="goHomonimo()" type="button" class="btn btn-info"><i class="fa fa-book"></i> INSCRIPCIÓN NUEVA</button>								    		
								    	</th>
								    </tr>
								    
								    
								  </tbody>
								</table>
                        	</div>

                            <div class="alert alert-warning" v-if="message != ''"> <i class="fa fa-warning"></i> ${message}</div>
                            
                            <div v-if="responseprocess">

                            	<!-- data new studen  -->
                            	<p class="encabezado bg-primary">1. INFORMACIÓN DEL NUEVO ESTUDIANTE </p>
                            	<table class="table table-dark">
								  <tbody>
								    <tr>
								      <th>Paterno: ${dataNewStudent.paterno | uppercase}</th>
								      <th>Materno: ${dataNewStudent.materno | uppercase}</th>
								      <th>Nombre(s): ${dataNewStudent.nombre | uppercase}</th>
								    </tr>
								    <tr>
								      <th>CI: ${dataNewStudent.cifind}</th>
								      <th>Complemento: ${dataNewStudent.complementofind}</th>
								      <th>Fecha Nacimiento: ${dataNewStudent.fecnacfind}</th>
								      
								    </tr>
								    
								    
								  </tbody>
								</table>

								</br>
                            	<!-- end data new studen  -->




                            	<p class="encabezado bg-primary">INFORMACIÓN DEL ESTUDIANTE EXTRANJERO</p>

	                            <div class="row">
	                               <div class="col-sm-3">
	                                <label for="pais">Pais Procedencia:</label>                                  
	                                <select name="arrPais" id="idarrPais_p" v-model="dataNewStudent.paisId" class="custom-select form-control">
	                                  <option v-for="item in DBPais"  :value="item.paisId">${ item.pais }</option>       
	                                </select>
	                              </div>
	                             <div class="col-sm-3">
		                             <label for="Unidad Educativa De">Unidad Educativa De:</label>
		                   			 <input type="input" class="form-control" id="fromue" placeholder="" v-model="dataNewStudent.institucionEducativaDe" maxlength="50" >
	                              </div>
	                              <!-- v-if="swhomonimo" -->
	                             	<div class="col-sm-3" >
	                             		<label for="Curso Vencido:">Curso Vencido:</label>
	                             		<input type="input" class="form-control" id="fromue" placeholder="" v-model="dataNewStudent.cursoVencido" maxlength="30" >
			                            
	                              	</div>
	                          	</div>                            	

	                            <div class="row">
	                             <div class="col-sm-3">
		                             <label for="genero">G&eacute;nero</label>
		                                <select name="arrGenero" id="idarrGenero" v-model="dataNewStudent.generoId" class="custom-select form-control">
		                                  <option v-for="item in DBGenero"  :value="item.generoId">${ item.genero }</option>       
		                                </select>
	                              </div>
	                              <!-- v-if="swhomonimo" -->
	                          	</div>

	                            <!-- <div class="row">
	                              <div class="col-sm-3">
	                                <label for="pais">Pais</label>                                  
	                                <select name="arrPais" id="idarrPais_p" v-model="dataNewStudent.paisId" class="custom-select form-control" v-on:change="setPais();">
	                                  <option v-for="item in DBPais"  :value="item.paisId">${ item.pais }</option>       
	                                </select>
	                              </div>
	                              <div class="col-sm-3">
	                                  <label for="depto">Departamento</label>
	                                  <select name="arrPais" id="idarrPais_dept" v-model="dataNewStudent.lugarNacTipoId" class="custom-select form-control" v-on:change="setDepto();">  
	                                    <option v-for="item in DBDepto"  :value="item.deptoId">${ item.depto }</option>
	                                  </select>
	                              </div>
	                              <div class="col-sm-3">
	                                  <label for="provincia">Provincia</label>
	                                  <select name="arrPais" id="idarrPais_provi" v-model="dataNewStudent.lugarProvNacTipoId" class="custom-select form-control" >  
	                                    <option v-for="item in DBProvincia"  :value="item.provinciaId">${ item.provincia }</option>
	                                  </select>
	                              </div>
	                              <div class="col-sm-3">
	                                  <label for="localidad">Localidad</label>
	                                  <input type="input" class="form-control" id="localidad" placeholder="Localidad" v-model="dataNewStudent.localidad" maxlength="50" autocomplete="off" style="text-transform:uppercase">
	                              </div>
	                            </div> -->
	                            </br>

	                            <p class="encabezado bg-primary">INFORMACIÓN UNIDAD EDUCATIVA</p>
	                            <div class="row">
	                              <div class="col-sm-3">
	                                  <label for="localidad">SIE</label>
	                                  <input type="input" class="form-control" id="sieid" placeholder="SIE" v-model="dataNewStudent.sie" maxlength="8" v-on:keyup="getInfoUe(1);">
	                              </div>
 					<div class="col-sm-5" >
                                         <label for="genero">Adjuntar Documumento: LIBRETA ESCOLAR/DOCUMENTO DE APROBACIÓN </label>
                                         <input type="file" name="image" @change="getImage" accept="file/*" class="form-control" id="archivoAdjuntoId">
                                        </div>

	                            </div>
	                            </br>

	                            <div v-if="buscandoue" class="text-center">
                                	<img src="{{asset('img/loading.gif')}}" alt=""> Buscando...
	                            </div>                
	                            <div class="alert alert-info" v-if="!nombreue"> <i class="fa fa-warning"></i> ${messageue}</div>


	                            <div v-if="swprocessue">

	                            	<div class="row">
		                              <div class="col-md-12">
	                            		<p class="p-3 mb-2 bg-info text-white"> <strong>UNIDAD EDUCATIVA: ${nombreue}</strong> </p>
			                          </div>
			                        </div>

		                            <div class="row">
		                              <div class="col-sm-3">
		                                <label for="nivel">Nivel</label>                                  
		                                <select name="arrLevel" id="idpais" v-model="dataNewStudent.nivelId" class="custom-select form-control" v-on:change="setGrado(1);">
		                                  <option value="">Seleccionar...</option>
		                                  <option v-for="item in DBLevel"  :value="item.id">${ item.level }</option>       
		                                </select>
		                              </div>
		                              <div class="col-sm-3">
		                                  <label for="depto">Grado</label>
		                                  <select name="arrGrado" id="idgrado" v-model="dataNewStudent.gradoId" class="custom-select form-control" v-on:change="setParalelo(1);">  
		                                  	<option value="">Seleccionar...</option>
		                                    <option v-for="item in DBGrado"  :value="item.id">${ item.grado }</option>
		                                  </select>
		                              </div>
		                              <div class="col-sm-3">
		                                  <label for="paralelo">Paralelo</label>
		                                  <select name="arrParalelo" id="idparalelo" v-model="dataNewStudent.paraleloId" class="custom-select form-control"  v-on:change="setTurno(1);">  
		                                  	<option value="">Seleccionar...</option>
		                                    <option v-for="item in DBParalelo"  :value="item.id">${ item.paralelo }</option>
		                                  </select>
		                              </div>
		                              <div class="col-sm-3">
		                                  <label for="turno">Turno</label>
		                                  <select name="arrTurno" id="idturno" v-model="dataNewStudent.turnoId" class="custom-select form-control" >  
		                                  	<option value="">Seleccionar...</option>
		                                    <option v-for="item in DBTurno"  :value="item.id">${ item.turno }</option>
		                                  </select>
		                              </div>		                             
		                            </div>
		                        	</br>

		                            <div class="row">
			                            <div class="col-xs-3 col-sm-3 col-md-3 col-lg-3">
			                                <button v-on:click="doInscriptionExt(1)" type="button" class="btn btn-info" :disabled="state.isSending"><i class="fa fa-book"></i> Inscribir nuevo</button>
			                            </div>
		                        	</div>

	                            </div>
                            
                        	</div>

                        	<div v-if="swinscription">
				 <div class="alert alert-success" > <i class="fa fa-book"></i>Registro realizado con Ëxito</div>
                        		<p class="encabezado bg-primary">INFORMACIÓN DEL NUEVO ESTUDIANTE 2222</p>
                            	<table class="table table-dark">
								  <tbody>
								    <tr>
								      <th>Cod. Rude: <label class="newRude">${DBNewStudent.rude }</label> </th>
								      <th>Paterno: ${DBNewStudent.paterno }</th>
								      <th>Materno: ${DBNewStudent.materno }</th>
								      <th>Nombre(s): ${DBNewStudent.nombre }</th>
								    </tr>			    
								    
								  </tbody>
								</table>

								</br>

								<p class="encabezado bg-primary">INFORMACIÓN DE LA INSCRIPCION</p>
                            	<table class="table table-dark">
								  <tbody>
								  	  <tr>
								      <th>SIE: ${DBNewInscription.sie }</th>
								      <th colspan="3">Institucioneducativa: ${DBNewInscription.institucioneducativa }</th>
								    </tr>
								    <tr>
								      <th>Nivel: ${DBNewInscription.nivelTipo }</th>
								      <th>Grado: ${DBNewInscription.gradoTipo }</th>
								      <th>Paralelo: ${DBNewInscription.paraleloTipo }</th>
								      <th>Turno: ${DBNewInscription.turnoTipo }</th>
								    </tr>
								  
								    
								    
								  </tbody>
								</table>

								</br>
                        		
                        	</div>




                            <div v-if="swoldinscription">



                            	<!-- data new studen  -->
                            	<p class="encabezado bg-primary">INFORMACIÓN DEL NUEVO ESTUDIANTE 3333</p>
                            	<table class="table table-dark">
								  <tbody>
								  	<tr>
								      <th>Cod. Rude: ${oldStudent.rude | uppercase}</th>
								       <th>
								       
								       	<a class="btn btn-primary" data-toggle="modal" href='#modalEstudianteTwo' v-on:click="showhistory(oldStudent.rude)"> <i class="fa fa-eye"></i> VER HISTORIAL </a>
								       </th>
								    </tr>
								    <tr>
								      <th>Paterno: ${oldStudent.paterno | uppercase}</th>
								      <th>Materno: ${oldStudent.materno | uppercase}</th>
								      <th>Nombre(s): ${oldStudent.nombre | uppercase}</th>
								    </tr>
								    <tr>
								      <th>CI: ${oldStudent.carnet}</th>
								      <th>Complemento: ${oldStudent.complemento}</th>
								      <th>Fecha Nacimiento: ${oldStudent.fecNac}</th>
								      
								    </tr>
								    
								    
								  </tbody>
								</table>

								</br>
                            	<!-- end data new studen  -->



								{#
                            	<p class="encabezado bg-primary">INFORMACIÓN ADICIONAL DEL ESTUDIANTE</p>

	                            <div class="row">
	                             <div class="col-sm-3">
		                             <label for="genero">G&eacute;nero</label>
		                                <select name="arrGenero" id="idarrGenero" v-model="oldStudent.generoId" class="custom-select form-control">
		                                  <option v-for="item in DBGenero"  :value="item.generoId">${ item.genero }</option>       
		                                </select>
	                              </div>
	                             	<div class="col-sm-3" v-if="swhomonimo">
			                             <label for="genero">Adjuntar Documento</label>
			                                <input type="file" name="image" @change="getImage" accept="file/*" class="form-control" id="archivoAdjuntoId">
	                              	</div>
	                          	</div>

	                            <div class="row">
	                              <div class="col-sm-3">
	                                <label for="pais">Pais</label>                                  
	                                <select name="arrPais" id="idarrPais_p" v-model="oldStudent.paisId" class="custom-select form-control" v-on:change="setPais();">
	                                  <option v-for="item in DBPais"  :value="item.paisId">${ item.pais }</option>       
	                                </select>
	                              </div>
	                              <div class="col-sm-3">
	                                  <label for="depto">Departamento</label>
	                                  <select name="arrPais" id="idarrPais_dept" v-model="oldStudent.lugarNacTipoId" class="custom-select form-control" v-on:change="setDepto();">  
	                                    <option v-for="item in DBDepto"  :value="item.deptoId">${ item.depto }</option>
	                                  </select>
	                              </div>
	                              <div class="col-sm-3">
	                                  <label for="provincia">Provincia</label>
	                                  <select name="arrPais" id="idarrPais_provi" v-model="oldStudent.lugarProvNacTipoId" class="custom-select form-control" >  
	                                    <option v-for="item in DBProvincia"  :value="item.provinciaId">${ item.provincia }</option>
	                                  </select>
	                              </div>
	                              <div class="col-sm-3">
	                                  <label for="localidad">Localidad</label>
	                                  <input type="input" class="form-control" id="localidad" placeholder="Localidad" v-model="oldStudent.localidad" maxlength="50" autocomplete="off" style="text-transform:uppercase">
	                              </div>
	                            </div>
	                            </br>
								#}
	                            <p class="encabezado bg-primary">INFORMACIÓN UNIDAD EDUCATIVA</p>
				
				<div class="row">
                                       <div class="col-sm-3">
                                        <label for="pais">Pais Procedencia:</label>
                                        <select name="arrPais" id="idarrPais_p" v-model="oldStudent.paisId" class="custom-select form-control">
                                          <option v-for="item in DBPais"  :value="item.paisId">${ item.pais }</option>
                                        </select>
                                      </div>
                                     <div class="col-sm-3">
                                             <label for="Unidad Educativa De">Unidad Educativa De:</label>
                                                         <input type="input" class="form-control" id="fromue" placeholder="" v-model="oldStudent.institucionEducativaDe" maxlength="50" >
                                      </div>
                                      <!-- v-if="swhomonimo" -->
                                        <div class="col-sm-3" >
                                                <label for="Curso Vencido:">Curso Vencido:</label>
                                                <input type="input" class="form-control" id="fromue" placeholder="" v-model="oldStudent.cursoVencido" maxlength="30" >

                                        </div>
                                 </div>


				<div class="row">
				</div>



	                            <div class="row">
	                              <div class="col-sm-3">
	                                  <label for="sie">SIE</label>
	                                  <input type="input" class="form-control" id="sieid" placeholder="SIE" v-model="oldStudent.sie" maxlength="8" v-on:keyup="getInfoUe(0);">
	                              </div>
					<div class="col-sm-5" >
                                             <label for="genero">Adjuntar Documento: LIBRETA ESCOLAR/DOCUMENTO DE APROBACIÓN </label>
                                             <input type="file" name="image" @change="getImage" accept="file/*" class="form-control" id="archivoAdjuntoId">
                                        </div>

	                            </div>
	                            </br>

	                            <div v-if="buscandoue" class="text-center">
                                	<img src="{{asset('img/loading.gif')}}" alt=""> Buscando...
	                            </div>                
	                            <div class="alert alert-info" v-if="!nombreue"> <i class="fa fa-warning"></i> ${messageue}</div>


	                            <div v-if="swprocessue">

	                            	<div class="row">
		                              <div class="col-md-12">
	                            		<p class="p-3 mb-2 bg-info text-white"> <strong>UNIDAD EDUCATIVA: ${nombreue}</strong> </p>
			                          </div>
			                        </div>

		                            <div class="row">
		                              <div class="col-sm-3">
		                                <label for="nivel">Nivel</label>                                  
		                                <select name="arrLevel" id="idpais" v-model="oldStudent.nivelId" class="custom-select form-control" v-on:change="setGrado(0);">
		                                  <option value="">Seleccionar...</option>
		                                  <option v-for="item in DBLevel"  :value="item.id">${ item.level }</option>       
		                                </select>
		                              </div>
		                              <div class="col-sm-3">
		                                  <label for="depto">Grado</label>
		                                  <select name="arrGrado" id="idgrado" v-model="oldStudent.gradoId" class="custom-select form-control" v-on:change="setParalelo(0);">  
		                                  	<option value="">Seleccionar...</option>
		                                    <option v-for="item in DBGrado"  :value="item.id">${ item.grado }</option>
		                                  </select>
		                              </div>
		                              <div class="col-sm-3">
		                                  <label for="paralelo">Paralelo</label>
		                                  <select name="arrParalelo" id="idparalelo" v-model="oldStudent.paraleloId" class="custom-select form-control"  v-on:change="setTurno(0);">  
		                                  	<option value="">Seleccionar...</option>
		                                    <option v-for="item in DBParalelo"  :value="item.id">${ item.paralelo }</option>
		                                  </select>
		                              </div>
		                              <div class="col-sm-3">
		                                  <label for="turno">Turno</label>
		                                  <select name="arrTurno" id="idturno" v-model="oldStudent.turnoId" class="custom-select form-control" >  
		                                  	<option value="">Seleccionar...</option>
		                                    <option v-for="item in DBTurno"  :value="item.id">${ item.turno }</option>
		                                  </select>
		                              </div>		                             
		                            </div>
		                        	</br>

		                            <div class="row">
			                            <div class="col-xs-3 col-sm-3 col-md-3 col-lg-3">
			                                <button v-on:click="doInscriptionExt(0)" type="button" class="btn btn-info" :disabled="state.isSending"><i class="fa fa-book"></i> Inscribir </button>
			                            </div>
		                        	</div>

	                            </div>
                            
                        	</div>                        	                    	
                                                      
                          </form>
                            
                    </div>
                    {% else %}
                    <div class="panel-body">
                    	<div class="alert alert-warning"> <i class="fa fa-warning"></i> {{message}}</div>
                    </div>
                    {% endif %}
                </div>
            </div>
        </div>
	</div>
</div>
</div>

{% endblock %}
{% block javascripts%}
    {{parent()}}
    <script type="text/javascript">
		// $("#form_idfecnac").inputmask({ "alias": "dd-mm-yyyy", 'placeholder':'dd-mm-aaaa' });
	</script>
	
    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.24.0/moment-with-locales.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/axios/0.15.2/axios.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@8"></script>   
      <script src="{{asset('js/inputmask.js')}}"></script>
    <script type="text/javascript">
// $("#form_idfecnac").inputmask({ "alias": "dd-mm-yyyy", 'placeholder':'dd-mm-aaaa' });
    
    Vue.filter('uppercase', function (value) {
    	if (typeof value === "undefined") 
			return '';
		else
			return value.toUpperCase()
	})

        var app = new Vue({
            delimiters: ['${', '}'],
            el: '#app',

            /*components: {
			  	vuejsDatepicker
			  },*/

            data: {
              tuipo_persona: '',
            	state: {isSending: false},
            	dataNewStudent: {'withoutcifind':false, 'swnewforeign':false},
            	oldStudent:{'withoutcifind':false, 'swnewforeign':false},
            	dataSaveStudent: {},
            	//dataNewStudent: {},
            	responseprocess:false,
            	swprocessue:false,
            	swinscription:false,
            	swoldinscription:false,
            	nombreue:true,
            	buscando:false,
                buscandoue:false,
                existStudent:false,
                swhomonimo:false,
            	message:'',           	
            	messageue:'',           	
                DBPais: {},
                DBDepto: {},
                DBProvincia: {},
                DBLevel: {},
                DBGrado:{},
                DBParalelo:{},
                DBTurno:{},
                DBNewStudent:{},
                DBNewInscription:{},
				DBstudentExist:{},

				swhistory:false,
			    historyReg:{},
			    historyAlt:{},
			    historyEsp:{},
			    historyPer:{},
				
				informe:'',


                codigoRude:'',
                gestion:'',
                item:'',
                arraOptionBuscar:'',
                rudeBuscar:'',
                optionBuscar:'',
                studentId:'',
                studentHistModId:false,
                urlreport: '',
                swOne:false,
                swTwo:false,
                responseSegip:'',
                responseFormTwo:'',
                respuesta:'',
                dataStudentModif: {},
                dataModifyToSend:[],
                archivoAdjunto:'',
                
                showbuttonPDF:false,
                swCertification:false,
               
            },
            methods: {
		        lookforrude: function(){
                    this.buscando = true;
                    this.responseprocess = false;
                    this.swinscription = false;
                    this.swoldinscription = false;
                    this.swprocessue = false;
                    this.DBstudentExist=false;
                    this.oldStudent=false;
                    this.existStudent=false;
                    this.message = '';
                    this.dataNewStudent.generoId= '';
                    this.dataNewStudent.paisId= '';
                        this.DBDepto= '';
                        this.DBProvincia= '';
                        this.dataNewStudent.localidad='';
                        this.dataNewStudent.sie = '';
                        this.swhomonimo = false;


                        this.dataNewStudent.nivelId='';
                        this.dataNewStudent.gradoId='';
                        this.dataNewStudent.paraleloId='';
                        this.dataNewStudent.turnoId='';

                         this.oldStudent = false;


                        if (typeof this.dataNewStudent.rude === "undefined") {
                                            Swal.fire(
                                              'RUDE',
                                              'Debe ingresar el  CÓDIGO RUDE DEL ESTUDIANTE',
                                              'warning'
                                              );
                                            this.buscando = false;
                                          return;
                                        }
                                  


                            axios.get(Routing.generate('newForeign_lookforrude', this.dataNewStudent ))
                            .then(response => {
                                if (response.status == 200) {
                                        this.responseprocess = response.data.swcreatestudent;
                                        this.message = response.data.message;
                                        this.DBGenero= response.data.arrGenero;
                                        this.DBPais= response.data.arrPais;
                                        this.DBstudentExist= response.data.arrStudentExist;
                                        this.dataNewStudent.fecnacfind = this.DBstudentExist.fecnacfind;
                                        this.existStudent = response.data.existStudent;
                              }
                                this.buscando = false;
                            })
                            .catch(e => {
                                console.log(e);
                                this.buscando = false;
                            });

		        },
                buscarEstudiante: function(){

                	// this.dataNewStudent.fecnacfind = this.dataNewStudent.fecnacfindOrig;

// console.log(this.dataNewStudent);return;
                	// this.dataNewStudent.withoutcifind = false;

                    this.buscando = true;
                    this.responseprocess = false;
                    this.swinscription = false;
                    this.swoldinscription = false;
                    this.swprocessue = false;
                    this.DBstudentExist=false;
                    this.oldStudent=false;
                    this.existStudent=false;
                    this.message = '';
                    this.dataNewStudent.generoId= '';
                    this.dataNewStudent.paisId= '';
                	this.DBDepto= '';
                	this.DBProvincia= '';
                	this.dataNewStudent.localidad='';
                	this.dataNewStudent.sie = '';
                	this.swhomonimo = false;


                	this.dataNewStudent.nivelId='';
            		this.dataNewStudent.gradoId='';
            		this.dataNewStudent.paraleloId='';
            		this.dataNewStudent.turnoId='';

            		 this.oldStudent = false;    

                    
                    if (typeof this.dataNewStudent.withoutcifind === "undefined") {
					  this.dataNewStudent.withoutcifind = false;
					}
					if(!this.dataNewStudent.withoutcifind){
						if (typeof this.dataNewStudent.cifind === "undefined") {
	        				Swal.fire(
		                        'Carnet de Identidad',
		                        'Debe ingresar un Carnet de Identidad válido',
		                        'warning'
		                        );
	        				this.buscando = false;
		                    return;
						} 					
					}
					if (typeof this.dataNewStudent.fecnacfind === "undefined") {
						Swal.fire(
		                        'Fecha de Nacimiento',
		                        'Debe ingresar la Fecha de Nacimiento del Estudiante Ej: 01-01-2015',
		                        'warning'
		                        );
        				this.buscando = false;
	                    return;
					}
					if (typeof this.dataNewStudent.nombre === "undefined" || this.dataNewStudent.nombre == "") {
						Swal.fire(
		                        'Nombre del Estudiante',
		                        'Debe ingresar el Nombre(s) del Estudiante',
		                        'warning'
		                        );
        				this.buscando = false;
        				return;
					}					
					if (((typeof this.dataNewStudent.paterno === "undefined" || typeof this.dataNewStudent.materno === "undefined") && (this.dataNewStudent.paterno == "" || this.dataNewStudent.materno == ""))) {
						Swal.fire(
		                        'Apellidos del Estudiante',
		                        'Debe ingresar Apellido(s) del Estudiante',
		                        'warning'
		                        );
        				this.buscando = false;
        				return;
					}
					if (typeof this.dataNewStudent.complementofind === "undefined") {
					  this.dataNewStudent.complementofind = '';
					}
					if (typeof this.dataNewStudent.expedidoIdfind === "undefined") {
					  this.dataNewStudent.expedidoIdfind = 0;
					}					

          //dcastillo 2402
          //para validacion segip
          this.dataNewStudent.tipo_persona = 1;
          if(this.tipo_persona == 'EX'){
            // si es extranjero
            this.dataNewStudent.tipo_persona = 2;
          } 
          console.log('objeto dataNewStudent:');
          console.log(this.dataNewStudent);

				
					
                    axios.get(Routing.generate('newForeign_checksegipstudent', this.dataNewStudent ))
                    .then(response => {
                        if (response.status == 200) {
                        	this.responseprocess = response.data.swcreatestudent;
                        	this.message = response.data.message;
                        	this.DBGenero= response.data.arrGenero;
                        	this.DBPais= response.data.arrPais;
                        	this.DBstudentExist= response.data.arrStudentExist;
                        	this.existStudent = response.data.existStudent;
                        }                        
                        this.buscando = false;
                    })
                    .catch(e => {
                        console.log(e);
                        this.buscando = false;
                    });
                },
                goHomonimo: function(){
                	this.swhomonimo = false;
                	this.swoldinscription = false;
	                this.oldStudent = false;
	                this.swprocessue = false;

                	Swal.fire({
                        title: 'Continuar con la inscripción Nueva?',
                        text: "esta seguro de CONTINUAR la Inscripción",
                        type: 'question',
                        showCancelButton: true,
                        confirmButtonColor: '#3085d6',
                        cancelButtonColor: '#d33',
                        confirmButtonText: 'Si, proceder',
                        cancelButtonText: 'Cancelar'
                    }).then((result) => {
                    	if (result.value) {                	
                    		this.dataNewStudent.swnewforeign = 1;
							axios.get(Routing.generate('newForeign_gohomonimo', this.dataNewStudent ))
		                    .then(response => {
		                        if (response.status == 200) {
		                        	this.responseprocess = response.data.swcreatestudent;
		                        	this.message = response.data.message;
		                        	this.DBGenero= response.data.arrGenero;
		                        	this.DBPais= response.data.arrPais;
		                        	// this.DBstudentExist= response.data.arrStudentExist;
		                        	this.existStudent = response.data.existStudent;
		                        	this.swhomonimo = response.data.swhomonimo;

		                        }                        
		                        this.buscando = false;
		                    })
		                    .catch(e => {
		                        console.log(e);
		                        this.buscando = false;
		                    });
	                   }
	                })


                },
                oldInscription: function(idStudent, index){

                	//this.swhomonimo = false;
                	this.swhomonimo = false;
                	this.swoldinscription = false;
	                this.oldStudent = {};
	                               
					//console.log(this.oldStudent);return;
                	Swal.fire({
                        title: 'Continuar con la Inscripción?',
                        text: "Esta seguro de CONTINUAR la Inscripción...",
                        type: 'question',
                        showCancelButton: true,
                        confirmButtonColor: '#3085d6',
                        cancelButtonColor: '#d33',
                        confirmButtonText: 'Si, proceder',
                        cancelButtonText: 'Cancelar'
                    }).then((result) => {
                    	if (result.value) {                	
						this.oldStudent = this.DBstudentExist[index];
						this.oldStudent.swnewforeign = 0;
						this.oldStudent.withoutcifind = this.dataNewStudent.withoutcifind;
						this.oldStudent.fecnacfind = this.dataNewStudent.fecnacfind;
						axios.get(Routing.generate('newForeign_gohomonimo', this.oldStudent ))
	                    .then(response => {
	                        if (response.status == 200) {
	                        	this.responseprocess = false;
	                        	this.message = response.data.message;
	                        	this.DBGenero= response.data.arrGenero;
	                        	this.DBPais= response.data.arrPais;
	                        	// this.DBstudentExist= response.data.arrStudentExist;
	                        	this.existStudent = response.data.existStudent;
	                        	//this.swhomonimo = response.data.swhomonimo;
	                        	this.swoldinscription = response.data.swhomonimo;
	                        	this.oldStudent = this.DBstudentExist[index];
	                        }                        
	                        this.buscando = false;
	                    })
	                    .catch(e => {
	                        console.log(e);
	                        this.buscando = false;
	                    });
	                   }
	                })


                },
			    showhistory: function(rude){
			    	
			      this.swhistory = true;
			      this.historyReg = false;
			      this.historyAlt = false;
			      this.historyEsp = false;
			      this.historyPer = false;

			      axios.get(Routing.generate('newForeign_showhistory', {
			                rude: rude
			            }))
			            .then(response => {
			              if(response.status == 200){
			                this.historyReg  = response.data.dataInscriptionR;
			                this.historyAlt  = response.data.dataInscriptionA;
			                this.historyEsp  = response.data.dataInscriptionE;
			                this.historyPer  = response.data.dataInscriptionP;
			              }
			                this.swhistory = false;
			            })
			            .catch(e => {
			                console.log(e);
			                this.buscando = false;
			            });
			      
			    }, 
                setGenero: function(){
                    var me = this;
                    $.each(this.DBGenero, function (i, value) {
                        if(me.dataStudentModif.generoTipoId == value.generoId) {
                            me.dataStudentModif.generoTipo = value.genero;
                        }
                    });                    
                },
                setPais: function(){
                	
                    var me = this;
                    
                    /*$.each(this.DBPais, function (i, value) {
                        if(me.dataStudentModif.paisId == value.paisId) {
                            me.dataStudentModif.pais = value.pais;
                            me.dataModifyToSend.push({'paisId':me.dataStudentModif.paisId})
                        }
                    });*/
                    
                    if(me.dataNewStudent.paisId == 1){
                         axios.post(Routing.generate('newForeign_getdepto',{ paisId:me.dataNewStudent.paisId }  ))
                            .then(response => {
                                if (response.status == 200) {
                                    this.DBDepto = response.data.arrDepto;
                                    $('[data-toggle="tooltip"]').tooltip();
                                }
                                this.buscando = false;
                            })
                            .catch(e => {
                                console.log(e);
                                this.buscando = false;
                            });
                    }else{
                        this.DBDepto = '';
                        this.DBProvincia = '';
                        me.dataStudentModif.lugarNacTipoId ='';
                        me.dataStudentModif.lugarProvNacTipoId ='';
                    }
                    
                },
                setDepto: function(){
                    var me = this;
                  /*  $.each(this.DBDepto, function (i, value) {
                        if(me.dataStudentModif.lugarNacTipoId == value.deptoId) {
                            me.dataStudentModif.lugarNacTipo = value.depto;
                        }                        
                    });*/  
                    
                    if(me.dataNewStudent.paisId == 1 && me.dataNewStudent.lugarNacTipoId>0){
                         axios.post(Routing.generate('newForeign_getprovincia', me.dataNewStudent ))
                            .then(response => {
                                if (response.status == 200) {
                                    this.DBProvincia = response.data.arrProvincia;
                                    $('[data-toggle="tooltip"]').tooltip();
                                }
                                if( response.status == 202){
                                    this.respuesta = response.data;
                                }

                                this.buscando = false;
                            })
                            .catch(e => {
                                console.log(e);
                                this.buscando = false;
                            });
                    }else{
                        this.DBDepto = '';
                        this.DBProvincia = '';
                        me.dataStudentModif.lugarNacTipoId ='';
                        me.dataStudentModif.lugarProvNacTipoId ='';
                    }





                },
                setProvincia: function(){
                    var me = this;
                    $.each(this.DBProvincia, function (i, value) {
                        if(me.dataStudentModif.lugarProvNacTipoId == value.provinciaId) {
                            me.dataStudentModif.lugarProvNacTipo = value.provincia;
                            me.dataModifyToSend.push({'provinciaId':me.dataStudentModif.lugarProvNacTipoId})
                        }
                    });                    
                }, 
                getInfoUe: function(newobject){

                	if(newobject == 1){
                		this.dataSaveStudent = this.dataNewStudent;
                	}else{
                		this.dataSaveStudent = this.oldStudent;
                	}

                	if(this.dataSaveStudent.sie.length >= 7){

                		if(newobject == 1){
	                		this.dataNewStudent.nivelId='';
	                		this.dataNewStudent.gradoId='';
	                		this.dataNewStudent.paraleloId='';
	                		this.dataNewStudent.turnoId='';
	                	}else{
	                		this.oldStudent.nivelId='';
	                		this.oldStudent.gradoId='';
	                		this.oldStudent.paraleloId='';
	                		this.oldStudent.turnoId='';
	                		
	                	}
                		this.messageue='';
                		


                		this.buscandoue = true;

                		    axios.post(Routing.generate('newForeign_getInfoUe', this.dataSaveStudent ))
                            .then(response => {
                                if (response.status == 200) {
                                    this.DBLevel = response.data.aniveles;
                                    this.swprocessue = response.data.swprocessue;
                                    this.nombreue = response.data.nombreue;
                                    this.messageue = response.data.message;
                                    $('[data-toggle="tooltip"]').tooltip();
                                }
                               
                                this.buscandoue = false;
                            })
                            .catch(e => {
                                console.log(e);
                                // this.buscando = false;
                            });

                	}
                },
                setGrado: function(newobject){
                	if(newobject == 1){
                		this.dataSaveStudent = this.dataNewStudent;
                		this.dataNewStudent.paraleloId='';
                		this.dataNewStudent.turnoId='';
                	}else{
                		this.dataSaveStudent = this.oldStudent;
                		this.oldStudent.paraleloId='';
                		this.oldStudent.turnoId='';
                	}	
                		

            		    axios.post(Routing.generate('newForeign_setGrado', this.dataSaveStudent ))
                        .then(response => {
                            if (response.status == 200) {
                                this.DBGrado = response.data.arrGrado;
                                $('[data-toggle="tooltip"]').tooltip();
                            }
                           
                            this.buscandoue = false;
                        })
                        .catch(e => {
                            console.log(e);
                            // this.buscando = false;
                        });

            	
                },    
                setParalelo: function(newobject){
                	if(newobject == 1){
                		this.dataSaveStudent = this.dataNewStudent;
                		this.dataNewStudent.turnoId='';
                	}else{
                		this.dataSaveStudent = this.oldStudent;
                		this.oldStudent.turnoId='';
                	}                		
                		

            		    axios.post(Routing.generate('newForeign_setParalelo', this.dataSaveStudent ))
                        .then(response => {
                            if (response.status == 200) {
                                this.DBParalelo = response.data.arrParalelo;
                                $('[data-toggle="tooltip"]').tooltip();
                            }
                           
                            this.buscandoue = false;
                        })
                        .catch(e => {
                            console.log(e);
                            // this.buscando = false;
                        });

            	
                },     
                setTurno: function(newobject){
                	
                	if(newobject == 1){
                		this.dataSaveStudent = this.dataNewStudent;
                	}else{
                		this.dataSaveStudent = this.oldStudent;
                	}                	

            		    axios.post(Routing.generate('newForeign_setTurno', this.dataSaveStudent ))
                        .then(response => {
                            if (response.status == 200) {
                                this.DBTurno = response.data.arrTurno;
                                $('[data-toggle="tooltip"]').tooltip();
                            }
                           
                            this.buscandoue = false;
                        })
                        .catch(e => {
                            console.log(e);
                            // this.buscando = false;
                        });

            	
                },        
                doInscriptionExt: function(swnewforeign){
          		 if(swnewforeign == 0){
                        	 this.oldStudent.swnewforeign = swnewforeign;
                                 this.dataSaveStudent = this.oldStudent;
                         }else{
                                 this.dataNewStudent.swnewforeign = swnewforeign;
                                 this.dataSaveStudent = this.dataNewStudent;
                         }

		    if(this.dataSaveStudent.generoId == '') {
                        Swal.fire(
                        'Campo Género requerido',
                        'Debe seleccionar Género',
                        'warning'
                        );
                        return;
                    }

 		    if (this.dataSaveStudent.paisId == '') {
                        Swal.fire(
                        'Campo Pais requerido',
                        'Debe debe seleccinar un Pais',
                        'warning'
                        );
                        return;
                    }
		   if (this.dataSaveStudent.paisId == '') {
                        Swal.fire(
                        'Campo Pais requerido',
                        'Debe debe seleccinar un Pais',
                        'warning'
                        );
                        return;
                    }
		 if(this.dataSaveStudent.paisId == 1){
                        if(typeof this.dataSaveStudent.lugarNacTipoId ==='undefined' ){
                                Swal.fire(
                                'Campo Departamento requerido',
                                'Debe seleccionar un Departamento',
                                'warning'
                                );
                                return;
                        }

                         if(typeof this.dataSaveStudent.lugarProvNacTipoId ==='undefined' ){
                                Swal.fire(
                                'Campo Provincia requerido',
                                'Debe seleccionar una Provincia',
                                'warning'
                                );
                                return;
                        }
                        if(this.dataSaveStudent.localidad =='' ){
                                Swal.fire(
                                'Campo Localidad requerido',
                                'Debe registrar la localidad',
                                'warning'
                                );
                                return;
                        }


                }
	           if (this.dataSaveStudent.gradoId == '') {
                        Swal.fire(
                        'Campo Grado requerido',
                        'Debe seleccionar un Grado',
                        'warning'
                        );
                        return;
                    }
                 if (this.dataSaveStudent.paraleloId == '') {
                        Swal.fire(
                        'Campo Paralelo requerido',
                        'Debe seleccionar un Paralelo',
                        'warning'
                        );
                        return;
                    }
                 if (this.dataSaveStudent.turnoId == '') {
                        Swal.fire(
                        'Campo Turno requerido',
                        'Debe seleccionar un Turno',
                        'warning'
                        );
                        return;
                    }

                if (this.dataSaveStudent.institucionEducativaDe == '') {
                     Swal.fire(
                        'Campo Unidad Educativa de requerido',
                        'Debe registrar Unidad Educativa de',
                        'warning'
                        );
                        return;
                    }

                if (this.dataSaveStudent.cursoVencido == '') {
                     Swal.fire(
                        'Campo Curso Vencido es requerido',
                        'Debe registrar Curso Vencido',
                        'warning'
                        );
                        return;
                    }


		  if (typeof this.informe != 'object') {
                        Swal.fire(
                        'Adjuntar Documento',
                        'Debe adjuntar el DOCUMENTO SOLICITADO para ralizar la inscripción, puede ser un archivo de imagen o PDF',
                        'warning'
                        );
                        return;
                    }




                	Swal.fire({
                        title: 'Realizar Inscripción?',
                        text: "esta seguro de realizar la Inscripción",
                        type: 'question',
                        showCancelButton: true,
                        confirmButtonColor: '#3085d6',
                        cancelButtonColor: '#d33',
                        confirmButtonText: 'Si, proceder',
                        cancelButtonText: 'Cancelar'
                    }).then((result) => {
                    	if (result.value) {

                    		//console.log(this.dataSaveStudent);return;
                    		this.state.isSending = true; 
                    		var data = new FormData();
                            data.append('datos', JSON.stringify(this.dataSaveStudent));
                            data.append('informe', this.informe);

	            		    axios.post(Routing.generate('newForeign_doInscriptionExt'), data )
	                        .then(response => {
	                            if (response.status == 200) {
	                                this.DBNewStudent = response.data.arrStudent;
	                                this.DBNewInscription = response.data.arrInscription;
									
									this.swinscription=response.data.swinscription;
									this.message=response.data.message;
	                                this.dataNewStudent = {};
	                                this.responseprocess=false;
									this.swoldinscription=false;

	                                $('[data-toggle="tooltip"]').tooltip();
	                            }
	                           
	                            this.buscandoue = false;
	                            this.message = false;
	                            this.existStudent = false;
	                        })
	                        .catch(e => {
	                            console.log(e);
	                            // this.buscando = false;
	                        });
                    	}
                    })

            	
                },
                // copyfecnac: function(){
                // 	console.log(this.dataNewStudent.fecnacfind);
                // 	return;
                // },

                customFormatter(date) {
			      return moment(date).format('l');
			    },
                               



                getImage: function(event){
                    var informe = event.target.files[0];
                    var allowedExtensions = /(.jpg|.jpeg|.png|.gif|.pdf)$/i;
                    if(!allowedExtensions.exec(event.target.value)){
                        event.target.value = '';
                        Swal.fire(
                              'Archivo incorrecto!',
                              'El archivo adjunto debe ser una imagen o un archivo pdf',
                              'warning'
                            );
                        this.informe = '';
                        return false;
                    }else{
                        var megas = (informe.size / 1024)/1024;
                        if (megas > 2) {
                            event.target.value = '';
                            Swal.fire(
                              'Tamaño no permitido!',
                              'El archivo debe tener un tamaño menor a 2MB',
                              'warning'
                            );
                            this.informe = '';
                            return false;
                        }
                    }
                    this.informe = event.target.files[0];
                },                

            },
            mounted(){
                var selector = document.getElementById("form_idfecnac");
                Inputmask("datetime",{ inputFormat: "dd-mm-yyyy", outputFormat: "mm-yyyy-dd", inputEventOnly: true}).mask(selector);
            }
        });

        $(document).ready(function(){
            $('[data-toggle="tooltip"]').tooltip();
            $("td").focus();
        });        


    function validarFormatoFecha(campo) {
        var RegExPattern = /^\d{1,2}\-\d{1,2}\-\d{4}$/;
        if ((campo.match(RegExPattern)) && (campo!='')) {
                return true;
        } else {
                return false;
        }
    }    





















        var lookforStudent = function () {
            //get the values
           var rude = $('#form_codeRude').val();
           var selectOption = $('#form_arrOption').val();
            
            if (rude.length <= 0) {
                alert("Necesita código RUDE para realizar la busqueda");
                return false;
            }
            if (selectOption == '') {
                alert("Necesita seleccionar criterio de busqueda");
                return false;
            }
            
            dataForm = $('#idFormFindStudent').serialize();
            $.ajax({
                type: 'post',
                data: dataForm,
                url: Routing.generate('specialmodificationdata_student_lookfor_student'),
                beforeSend: function () {
                    $("#dataStudent").empty();
                    $("#dataStudent").append('<div class="text-center"><img src="{{asset('img/loading.gif')}}" class="loading img-responsive" /></div>');
                },
                success: function (data) {
                    $("#dataStudent").empty();
                    $("#dataStudent").append(data);
                },
                statusCode: {
                    500: function () {

                    },
                    404: function () {

                    }
                }
            });
        }

                // formdataId
        var updateDataStudent = function(){
            var message = '';
            if($('#form_resoladm').val()==''){
                message+= '- Necesita Resolucion Administrativa\n';
            }
            if($('#form_fecharesoladm').val()==''){
                message+= '- Necesita Fecha Resolucion Administrativa\n';
            }
            if($('#form_obs').val()==''){
                message+= '- Necesita registrar justificativo\n';
            }            
            if(message){
                alert(message);
                return false;
            }
            if(!validarFormatoFecha($('#form_fecharesoladm').val())){
              alert('Revise formato de Fecha Resolucion Administrativa (dd-mm-aaaa)');
              return false;
            }
            
            var dataForm = $('#formdataStudentId').serialize();
            if (confirm('¿Esta seguro de realizar el cambio?')) {
                    $.ajax({
                        type: 'post',
                        data: dataForm,
                        url: Routing.generate('specialmodificationdata_student_updateDataStudent'),
                        beforeSend: function () {
                            $("#dataStudent").empty();
                            $("#dataStudent").append('<div class="text-center"><img src="{{asset('img/loading.gif')}}" class="loading img-responsive" /></div>');
                        },
                        success: function (data) {
                            
                            $("#dataStudent").empty();
                            $("#dataStudent").append(data);
                        },
                        statusCode: {
                            500: function () {

                            },
                            404: function () {

                            }
                        }
                    });
            } else {
              return false;
            }
        }


    


        function dep(es) {

            $.ajax({
                type: 'get',
                url: Routing.generate('search_departamentos_st', {'pais': parseInt(es)}),
                beforeSend: function () {
                    $("#form_departamento").empty();
                    $("#form_provincia").empty();
                    /*$("#localidad").empty();*/
                    $("#div-load").parent().append('<div class="loading"></div>');
                },
                success: function (data) {
                    $("#form_departamento").empty();
                    $("#form_provincia").empty();

                    $.each(data.departamento, function (i, value) {
                        $("#form_departamento").append('<option value="' + i + '">' + value + '</option>');
                    });
                    $(".loading").remove();
                }
            });
        }



        function prov(d) {
            $.ajax({
                type: 'get',
                url: Routing.generate('search_provincias_st', {'departamento': parseInt(d)}),
                beforeSend: function () {
                    $("#form_provincia").empty();
                    $("#div-load-prov").parent().append('<div class="loading"></div>');
                },
                success: function (data) {
                    $("#form_provincia").empty();
                    $.each(data.provincia, function (i, value) {
                        $("#form_provincia").append('<option value="' + i + '">' + value + '</option>');
                    });
                    $(".loading").remove();
                }
            });
        }        








    </script>
{%endblock%}
