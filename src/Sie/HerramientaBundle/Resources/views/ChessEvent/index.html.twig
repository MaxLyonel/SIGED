{% extends 'layoutHerramienta.html.twig' %}
{% block stylesheets %}
    {{parent()}}
    <style>

        [v-cloak]{
            display: none;
        }
        .readData{
            background-color: lightblue;
            color:  #000;
            opacity: 0.8;
         

        }
		.jupper{
			text-transform: uppercase;
		}

        .seleccionado{
			  color: currentColor;
			  display: inline-block;  /* For IE11/ MS Edge bug */
			  pointer-events: none;
			  text-decoration: none;        	
            background: #111406 !important;
            pointer-events: none;
        }		     
    </style>

{% endblock %}
{% block contentoption %}


<!-- Start page header -->
<div class="header-content">
	<h2><i class="fa fa-table"></i> Registro Evento Ajedrez <span></span></h2>
	<div class="breadcrumb-wrapper hidden-xs">
		<span class="label">Usted esta aquí:</span>
		<ol class="breadcrumb">
			<li>
				<i class="fa fa-home"></i>
				<a href="#">Registro Evento Ajedrez</a>
				<i class="fa fa-angle-right"></i>
			</li>
			<li class="active"></li>
		</ol>
	</div><!-- /.breadcrumb-wrapper -->
</div><!-- /.header-content -->
<!--/ End page header -->

<!-- /.row -->
<div id="app" v-cloak>

    <div class="modal fade" id="modalNewInscription" data-backdrop="static">
        <div class="modal-dialog" style="width:800px">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                    <h4 class="modal-title"> </h4>
                </div>
                <div class="modal-body">

				    <div class="panel panel-info">
					    	<div class="panel-heading">
					    	    <h4>Inscripcion:</br> ${infoUE.modalidadLabel} </br>${infoUE.faseLabel} </br>${infoUE.categorieLabel} </h4>
					    	</div>
					    <div class="panel-body">
					    </div>  
				   </div>


					<form class="form-row">
						<div class="form-group">
							<label for="rude">Código RUDE: </label>
							<input type="text" v-model="infoUE.codigoRude"  class="form-control" id="exampleInputPassword1" placeholder="RUDE">
						</div>
						<button v-on:click="findStudent(infoUE)" type="button" class="btn btn-primary"><i class="fa fa-search"></i> Buscar </button>
					</form>					   


					<div class="table-responsive" v-if="existStudent">
						<div class="alert alert-info" role="alert">Resultado de la busqueda</div>    									
                    	<table class="table table-dark">
                    		<thead>
                    			<tr ><th colspan="5">Resultado de la busqueda</th></tr>
                    		</thead>
							<tbody>
							<tr>
								<th>RUDE</th>
								<th>CI</th>
								<th>Paterno</th>
								<th>Materno</th>
								<th>Nombre(s)</th>
							</tr>

							<tr>
								<th>Institucion Educativa</th>
								<th>${infoUE.institucioneducativa}</th>
							</tr>									
							{# 
							<tr >
								<th colspan="6" align="left">
								<button v-on:click="mostrarFormulario()" type="button" class="btn btn-success" title="Caso de Homónimo"> Proceder con  el Registro de Datos </button>								    		
								</th>
							</tr> #}
							</tbody>
						</table>							
					</div>				

                </div>
            </div>
        </div>
    </div> 



	{#<div v-if="cortina" class="cortina">
		<i class="fa fa-refresh fa-spin"></i> Procesando... 
	</div>#}
	<div class="body-content animated fadeIn">

		<div class="row">
			<div class="col-md-12">
				<div class="panel panel-default">
					<div class="panel-body">
						<h3 class="titulo">Registro Evento Ajedrez</h3>
						<div class="col-md-5">
							<div role="tabpanel">
								<!-- Nav tabs -->
								<ul class="nav nav-tabs" role="tablist">
									<li role="presentation" :class="{active: opcion == 1}" @click="opcion = 1">
										<a role="tab" data-toggle="tab">Buscar por SIE</a>
									</li>
								</ul>
								<!-- Tab panes -->
								<div class="tab-content">
									<div role="tabpanel" :class="['tab-pane', {active: opcion == 1}]">

										<form class="form-row">
											<div class="form-group">
												<label for="rude">Código SIE: </label>
												<input type="text" v-model="infoUE.sie"  class="form-control" id="exampleInputPassword1" placeholder="SIE">
											</div>
											<button v-on:click="findUEData()" type="button" class="btn btn-primary"><i class="fa fa-search"></i> Continuar </button>
										</form>																
									</div>
								</div>
							</div>							
						</div>
						</br></br>
						<div class="col-md-7">
							<div v-if="buscando" class="text-center">
								<img src="{{asset('img/loading.gif')}}" alt=""> Buscando...
							</div>						
							<div class="table-responsive" v-if="infoUE.existUE">
	                        	<table class="table table-dark">
	                        		<thead>
	                        			<tr ><th colspan="2">Resultado de la busqueda</th></tr>
	                        		</thead>
									<tbody>
									<tr>
										<th >Cod. SIE</th>
										<th>${infoUE.sie}</th>
									</tr>
									<tr>
										<th>Institucion Educativa</th>
										<th>${infoUE.institucioneducativa}</th>
									</tr>									
									{# 
									<tr >
										<th colspan="6" align="left">
										<button v-on:click="mostrarFormulario()" type="button" class="btn btn-success" title="Caso de Homónimo"> Proceder con  el Registro de Datos </button>								    		
										</th>
									</tr> #}
									</tbody>
								</table>								
							</div>

						</div>

						<div class="col-md-12">
						

							{# tabla con los datos encontrados #}
							<div v-if="buscando" class="text-center">
								<img src="{{asset('img/loading.gif')}}" alt=""> Buscando...
							</div>

							<div style="padding: 15px;" v-if='infoUE.existUE'>
								<h4 style="text-align: center;background-color:#4694e8 ;color: white;" >Seleccionar Información para la inscripción</h4>
								<hr>

								<form>								
								  <div class="form-row">
								    <div class="form-group col-md-6">
								      <label for="mod">Modalidad</label>
										<select name="modalidades" id="idmodalidades_p" v-model="infoUE.modalidadId" class="custom-select js-example-basic-multiple form-control" >
											<option v-for="item in DBModalidades"  v-text="item.modalidad" :id="item.id" :value="item.id" >${ item.modalidad }</option>       
										</select>								      
								    </div>
								    <div class="form-group col-md-6">
								      <label for="lvel">Nivel</label>
										<select name="modalidades" id="idmodalidades_p" v-model="infoUE.levelId" class="custom-select js-example-basic-multiple form-control" v-on:change="getInfoEvent(infoUE.modalidadId, infoUE.levelId, this.value)">
											<option v-for="item in DBLevel" :id="item.id" :value="item.id" >${ item.level }</option>       
										</select>
								    </div>
								  </div>
								  
								  <div class="form-row">
								    <div class="form-group col-md-6">
								      <label for="fase">Fase</label>
										<select name="arrFase" id="idarrPais_p" v-model="infoUE.faseId" class="custom-select js-example-basic-multiple form-control">
											<option v-for="item in DBFases"  :value="item.id">${ item.descripcion }</option>       
										</select>							      
								    </div>
								    <div class="form-group col-md-6">
								      <label for="Categoría">Categoría</label>
										<select name="arrCategoria" id="idarrPais_p" v-model="infoUE.categorieId" class="custom-select js-example-basic-multiple form-control">
											<option v-for="item in DBCategories"  :value="item.id">${ item.categoria }</option>       
										</select>
								    </div>
								  </div>								  
								  <button v-on:click="dataSelected(infoUE)" type="button" class="btn btn-primary mb-2">Seleccionar</button>
								</form>

  
							</div>
						</div>	
						
						<div class="col-md-6" v-if="existSelectData">
							<div clsas="row">
								<div class="table-responsive">
									<table class="table table-bordered">
									  <thead>
									  	<tr>
									  		<th colspan="3">Seleccionar Estudiantes</th>
									  	</tr>									  
									    <tr>
									      <th>Modalidad</th>
									      <th>Fase</th>
									      <th>Categoria</th>
									      {# <th></th> #}
									    </tr>
									  </thead>
									  <tbody>
									    <tr>
									      <td>${infoUE.modalidadLabel}</td>
									      <td>${infoUE.faseLabel}</td>
									      <td>
									      	${infoUE.categorieLabel}

									      </td>
									      {# <td><a href="#" v-on:click="startInscription(infoUE)" type="button" class="">Inscribir</a></td> #}
									    </tr>
									    <tr>
									    	<td>Grado</td>
									    	<td>
												<select name="arrGradoallow" id="idgrado_p" v-model="infoUE.gradeId" class=" form-control" v-on:change="getParalelos(infoUE)">
													<option v-for="item in DBInscriptionLevel"  :value="item.id">${ item.grade }</option>       
												</select>									    		
									    	</td>
									    </tr>
									    <tr>
									    	<td>Paralelos</td>
									    	<td>
												<select name="arrParall" id="idparall_p" v-model="infoUE.parallelId" class=" form-control">
													<option v-for="item in DBParallels"  :value="item.paralelo_tipo_id">${ item.paralelo }</option>       
												</select>									    		
									    	</td>
									    	<td>
									    		<button v-on:click="showStudents(infoUE)" type="button" class="btn btn-primary mb-2">Buscar</button>
									    	</td>
									    </tr>
									  </tbody>
									</table>									
								</div>
							</div>

							<div v-if=" existStudent ">
                            	<!-- data new studen  -->
                            	<p class=" bg-primary">&nbsp&nbsp  INFORMACIÓN ESTUDIANTE</p>
								<small>
								<div class="table-responsive">
	                            	<table class="table table-dark">
										<tbody>
										<tr>
											
											<th>#</th>
											<th>Cod. RUDE</th>
											<th>CI-COMPL.</th>
											<th>Paterno</th>
											<th>Materno</th>
											<th>Nombre(s)</th>
											<th>Genero</th>
											<th>option</th>	
										</tr>
										
										<tr v-for="(student,rindex) in DBstudent">
											<td>${rindex+1}</td>
											<td>${student.codigo_rude | uppercase}</td>
											<td>${student.carnet_identidad} ${student.complemento}</td>
											<td>${student.paterno | uppercase}</td>
											<td>${student.materno | uppercase}</td>
											<td>${student.nombre | uppercase}</td>
											<td>${student.genero | uppercase}</td>
											{#  #}
											<td><a href="#" v-on:click="doInscription(infoUE, student.inscriptionid)" v-bind:id="student.inscriptionid" :class="{disabled: linkDisabled}"> Inscribir  </td>										
										</tr>

										<tr >
											<th colspan="6" align="left">
											{# <button v-on:click="doInscription()" type="button" class="btn btn-success" title="C"> Inscribir </button>								    		 #}
											</th>
										</tr>
										</tbody>
									</table>
								</div>
								</small>
                        	</div>



						</div>

						<div class="col-md-6" v-if="existSelectData">

							<div clsas="row">
								<div class="table-responsive">
									<table class="table table-bordered">
									  <thead>
									  	<tr>
									  		<th colspan="3">Inscritos</th>
									  	</tr>
									    <tr>
									      <th>Modalidad</th>
									      <th>Fase</th>
									      <th>Categoria</th>
									      {# <th></th> #}
									    </tr>
									  </thead>
									  <tbody>
									    <tr>
									      <td>${infoUE.modalidadLabel}</td>
									      <td>${infoUE.faseLabel}</td>
									      <td>
									      	${infoUE.categorieLabel}

									      </td>
									    </tr>
									  </tbody>
									</table>									
								</div>
							</div>

						</div>


					</div>
				</div>
			</div>
		</div>
		
	</div>
</div>	

{% endblock %}
{% block javascripts%}
    {{parent()}}
    <script type="text/javascript">
    // $("#form_idfecnac").inputmask({ "alias": "dd-mm-yyyy", 'placeholder':'dd-mm-aaaa' });
  </script>
  
<script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.24.0/moment-with-locales.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/axios/0.15.2/axios.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@8"></script>   
<script src="https://cdnjs.cloudflare.com/ajax/libs/vue-the-mask/0.11.1/vue-the-mask.min.js" integrity="sha512-qXurwUG9teY1KFtbBifUHInCiNK/POQqJeFRSoaHg1pHEB1tBUlFKRsfPzm1D6b6ueeQOCKldvXYCtOsPURrcw==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>

<link href="{{ asset('bower_components/select2/dist/css/select2.min.css') }}" rel="stylesheet" />
<script src="{{ asset('bower_components/select2/dist/js/select2.min.js') }}"></script>



<script type="text/javascript">

	var app = new Vue({
		delimiters: ['${', '}'],
		el: '#app',
		data: {
			opcion: 1,
			infoUE:{
				sie:80730460,
				institucioneducativa:'',
				modalidadLabel:'',
				faseLabel:'',
				categorieLabel:'',
				existUE:0
			},
			infoUE2:{
				sie:80730460,
				institucioneducativa:'',
				modalidadLabel:'',
				faseLabel:'',
				categorieLabel:'',
				existUE:0
			},
			DBModalidades: {},
			DBLevel:  {},
			DBFases: {},
			DBCategories: {},
			DBselectedData: {},
			DBstudent: {},
			DBParallels: {},
			DBInscriptionLevel: {},
			existSelectData:false,
			existStudent:false,
			existParall:false,
			linkDisabled:false,
			/////////////////////////////
			categorias: [
				{'id': 'A', 'description': 'Cat.A'},
				{'id': 'B', 'description': 'Cat.B'},
				{'id': 'C', 'description': 'Cat.C'},
				
			],

			
		

			buscando: false,
		
			
			showbuttonPDF:false,
			swCertification:false,

			procesar: false,
			
			
		},
		filters: {
			uppercase: function(v) {
				return v.toUpperCase();
			}
		},	

		components: {
			//vuejsDatepicker
		},

		mounted(){	
			//this.loadData(); 
			//var selector = document.getElementById("fecha_vencimiento");
			//Inputmask("datetime",{ inputFormat: "dd-mm-yyyy", outputFormat: "mm-yyyy-dd", inputEventOnly: true}).mask(selector);              
		
		},

		methods: {
			findUEData:function(){
				this.existSelectData=false;
				this.DBModalidades={};
				this.DBFases={};
				this.DBCategories={};
				this.infoUE.existUE = 0;
				this.buscando=true;
				if (typeof this.infoUE.sie === "undefined") {
					Swal.fire(
						'Atencion !',
						'Debe ingresar el  CÓDIGO SIE',
						'warning'
						);
					this.buscando = false;
					return;
				}				

				axios.post(Routing.generate('cheesevent_findUEData', this.infoUE ))
				.then(response => {
					if (response.status == 200) {
							// console.log(response.data);

							if(response.data.existUE == true){

								this.infoUE.sie = response.data.sie;
								this.infoUE.institucioneducativa = response.data.institucioneducativa;
								this.infoUE.existUE = response.data.existUE;
								this.DBModalidades = response.data.arrModalidades;
								this.DBLevel = response.data.arrLevel;
								console.log(this.DBModalidades);
							}else{
								Swal.fire(
								'Atencion !',
								'CÓDIGO SIE NO EXISTE',
								'warning'
								);
							}
							
					}
					this.buscando = false;
				})
				.catch(e => {
					console.log(e);
					this.buscando = false;
				});				

			},
			getInfoEvent: function(modalidadId, levelId, selectModalidad){
				// console.log(event.target.value);
				this.existSelectData=false;
				axios.post(Routing.generate('cheesevent_getInfoEvent', this.infoUE ))
				.then(response => {
					if (response.status == 200) {
							// console.log(response.data);

							if(response.data.existUE == true){
								this.DBFases = response.data.arrFases;
								this.DBCategories = response.data.arrCategories;
								
							}else{
								Swal.fire(
								'Atencion !',
								'no answer...',
								'warning'
								);
							}
							
					}
					this.buscando = false;
				})
				.catch(e => {
					console.log(e);
					this.buscando = false;
				});					


			},
			dataSelected: function(selectedData){
				this.existSelectData=false;
				this.existParall = false;
				this.DBParallels={};
				this.existStudent=false;
				this.DBstudent={};				
				axios.post(Routing.generate('cheesevent_dataSelected', this.infoUE ))
				.then(response => {
					if (response.status == 200) {
						this.DBselectedData = response.data.selectedData;
							// console.log(response.data);

							if(response.data.existSelectData == true){
								
								// this.DBselectedData = response.data.selectedData;
								this.infoUE.modalidadLabel = response.data.modalidadLabel;
								this.infoUE.faseLabel = response.data.faseLabel;
								this.infoUE.categorieLabel = response.data.categorieLabel;
								this.infoUE.genderRequest = response.data.genderRequest;
								this.DBInscriptionLevel = response.data.arrAllowGrade;
								this.existSelectData = response.data.existSelectData;

								// this.infoUE2.krlos = 'krlos';
								// this.DBCategories = response.data.arrCategories;
								
							}else{
								Swal.fire(
								'Atencion !',
								'no answer...',
								'warning'
								);
							}
							
					}
					this.buscando = false;
				})
				.catch(e => {
					console.log(e);
					this.buscando = false;
				});					
			},
			startInscription:function(infoUEsend){
				$('#modalNewInscription').modal('show');
			},
			findStudent:function(infoUEsel){
				axios.post(Routing.generate('cheesevent_findStudent', infoUEsel ))
				.then(response => {
					if (response.status == 200) {
						this.DBselectedData = response.data.selectedData;
							// console.log(response.data);

							if(response.data.existStudent == true){
								
								// this.DBselectedData = response.data.selectedData;
								this.infoUE.modalidadId = response.data.modalidadId;
								this.infoUE.faseId = response.data.faseId;
								this.infoUE.categorieId = response.data.categorieId;
								this.infoUE.sie = response.data.sie;
								this.DBstudent = response.data.arrStudents;

								this.existStudent = response.data.existStudent;

								// this.infoUE2.krlos = 'krlos';
								// this.DBCategories = response.data.arrCategories;
								
							}else{
								Swal.fire(
								'Atencion !',
								'no answer...',
								'warning'
								);
							}
							
					}
					this.buscando = false;
				})
				.catch(e => {
					console.log(e);
					this.buscando = false;
				});	
			},
			getParalelos:function(infoUEAll){
				this.existParall = false;
				this.DBParallels={};
				this.existStudent=false;
				this.DBstudent={};
				axios.post(Routing.generate('cheesevent_getParalelos', infoUEAll ))
				.then(response => {
					if (response.status == 200) {
						this.DBselectedData = response.data.selectedData;
							// console.log(response.data);

							if(response.data.existParall == true){
								
								// this.DBselectedData = response.data.selectedData;
								// this.infoUE.modalidadId = response.data.modalidadId;
								// this.infoUE.faseId = response.data.faseId;
								// this.infoUE.categorieId = response.data.categorieId;
								// this.infoUE.sie = response.data.sie;
								this.DBParallels = response.data.arrParallels;

								this.existParall = response.data.existParall;

								// this.infoUE2.krlos = 'krlos';
								// this.DBCategories = response.data.arrCategories;
								
							}else{
								Swal.fire(
								'Atencion !',
								'no answer...',
								'warning'
								);
							}
							
					}
					this.buscando = false;
				})
				.catch(e => {
					console.log(e);
					this.buscando = false;
				});					

			},
			showStudents:function(infoUEAll){
				this.existStudent=false;
				this.DBstudent={};
				axios.post(Routing.generate('cheesevent_showStudents', infoUEAll ))
				.then(response => {
					if (response.status == 200) {
						this.DBselectedData = response.data.selectedData;
							// console.log(response.data);

							if(response.data.existStudent == true){
								
								// this.DBselectedData = response.data.selectedData;
								this.infoUE.modalidadId = response.data.modalidadId;
								this.infoUE.faseId = response.data.faseId;
								this.infoUE.categorieId = response.data.categorieId;
								this.infoUE.sie = response.data.sie;
								this.DBstudent = response.data.arrStudents;

								this.existStudent = response.data.existStudent;

								// this.infoUE2.krlos = 'krlos';
								// this.DBCategories = response.data.arrCategories;
								
							}else{
								Swal.fire(
								'Atencion !',
								'no answer...',
								'warning'
								);
							}
							
					}
					this.buscando = false;
				})
				.catch(e => {
					console.log(e);
					this.buscando = false;
				});					

			},
			doInscription:function(infoUE, inscriptionid){				
				this.infoUE.inscriptionid=inscriptionid;
				$('#'+inscriptionid).addClass('seleccionado');
				axios.post(Routing.generate('cheesevent_doInscription', this.infoUE ))
				.then(response => {
					if (response.status == 200) {
						this.DBselectedData = response.data.selectedData;
							// console.log(response.data);

							if(response.data.existStudent == true){
								
								// this.DBselectedData = response.data.selectedData;
								this.infoUE.modalidadId = response.data.modalidadId;
								this.infoUE.faseId = response.data.faseId;
								this.infoUE.categorieId = response.data.categorieId;
								this.infoUE.sie = response.data.sie;
								this.DBstudent = response.data.arrStudents;

								this.existStudent = response.data.existStudent;

								// this.infoUE2.krlos = 'krlos';
								// this.DBCategories = response.data.arrCategories;
								
							}else{
								Swal.fire(
								'Atencion !',
								'no answer...',
								'warning'
								);
							}
							
					}
					this.buscando = false;
				})
				.catch(e => {
					console.log(e);
					this.buscando = false;
				});						


			},
			/////////////////////////////////////////////////////////////////////
			lookforrude: function(){
				console.log('lookforrude');

				this.procesar = false;

				this.buscando = true;
				this.responseprocess = false;
				this.swinscription = false;
				this.swoldinscription = false;
				this.swprocessue = false;
				this.DBstudentExist=false;
				this.oldStudent=false;
				this.existStudent=false;
				this.message = '';
				this.dataNewStudent.generoId= '';
				this.dataNewStudent.paisId= '';
				this.DBDepto= '';
				this.DBProvincia= '';
				this.dataNewStudent.localidad='';
				this.dataNewStudent.sie = '';
				this.swhomonimo = false;
				this.dataNewStudent.nivelId='';
				this.dataNewStudent.gradoId='';
				this.dataNewStudent.paraleloId='';
				this.dataNewStudent.turnoId='';
				this.oldStudent = false;


				if (typeof this.dataNewStudent.rude === "undefined") {
					Swal.fire(
						'Atencion !',
						'Debe ingresar el  CÓDIGO RUDE DEL ESTUDIANTE',
						'warning'
						);
					this.buscando = false;
					return;
				}

				axios.get(Routing.generate('registerforeignerperson_lookforrude', this.dataNewStudent ))
				.then(response => {
					console.log(response);
					if (response.status == 200) {
							console.log(response.data);

							if(response.data.existStudent == true){

								this.responseprocess = response.data.swcreatestudent;
								this.message = response.data.message;
								this.DBGenero= response.data.arrGenero;
								this.DBPais= response.data.arrPais;
								this.DBstudentExist= response.data.arrStudentExist;
								this.dataNewStudent.fecnacfind = this.DBstudentExist.fecnacfind;
								this.existStudent = response.data.existStudent;

							}else{
								Swal.fire(
								'Atencion !',
								'CÓDIGO RUDE DEL ESTUDIANTE NO EXISTE',
								'warning'
								);
							}
							
					}
					this.buscando = false;
				})
				.catch(e => {
					console.log(e);
					this.buscando = false;
				});

			},

			mostrarFormulario() {
				console.log('mostrarFormulario');

				this.swhomonimo = false;
				this.swoldinscription = false;
				this.oldStudent = false;
				this.swprocessue = false;

				this.dataNewStudent.swnewforeign = 1;

				axios.get(Routing.generate('newForeign_gohomonimo', this.dataNewStudent ))
				.then(response => {
					if (response.status == 200) {
						console.log(response.data);
						this.responseprocess = response.data.swcreatestudent;
						this.message = response.data.message;
						this.DBGenero= response.data.arrGenero;
						this.DBPais= response.data.arrPais;
						// this.DBstudentExist= response.data.arrStudentExist;
						this.existStudent = response.data.existStudent;
						this.swhomonimo = response.data.swhomonimo;

					}                        
					this.buscando = false;
				})
				.catch(e => {
					console.log(e);
					this.buscando = false;
				});


			},

			enviarFormulario(){

				
				var me = this;

				Swal.fire({
				title: 'Registrar la informacion ?',
				text: "Verifique los datos antes de efectuar la operacion",	
				type: 'question',		
				showCancelButton: true,
				confirmButtonColor: '#3085d6',
				cancelButtonColor: '#d33',
				cancelButtonText: 'Cancelar',
				confirmButtonText: 'Registrar',
				
				}).then((result) => {
					console.log(result);
					if (result.value == true) {

						//TODO: VALIDAR front
						faltan_datos = false;
						console.log(me.dataNewStudent);
						
						if(me.dataNewStudent.paisId == 0){
							faltan_datos = true;
						}
						if(me.dataNewStudent.categoriaId == 0){
							faltan_datos = true;
						}
						if(me.dataNewStudent.numero_documento == ''){
							faltan_datos = true;
						}
						if(me.dataNewStudent.fecha_vencimiento == ''){
							faltan_datos = true;
						}else{
							//es valida ?

							if ( me.dataNewStudent.fecha_vencimiento !== 10 ){
								console.log('error');
							}


							var vregexNaix = /^(0[1-9]|[1-2]\d|3[01])(\/)(0[1-9]|1[012])\2(\d{4})$/;
							console.log(vregexNaix.test(me.dataNewStudent.fecha_vencimiento));
							if(vregexNaix.test(me.dataNewStudent.fecha_vencimiento) == false){
								Swal.fire(
									'Atencion !',
									'La fecha de vencimiento es invalida !',
									'warning'
									);
								this.buscando = false;
								return;
							}else{
								//el formato es valido...y los datos ?
								var fecha = me.dataNewStudent.fecha_vencimiento.split("/");
								var day = parseInt(fecha[0]);
								var month = parseInt(fecha[1]);
								var year = parseInt(fecha[2]);

								error = false;

								var ListofDays = [31,28,31,30,31,30,31,31,30,31,30,31];
								if ( month === 1 || month > 2 )
									if ( day > ListofDays[month-1] || day < 0 || ListofDays[month-1] === undefined )
										error = true;

								// Detecta si es año bisiesto y asigna a febrero 29 dias
								if ( month === 2 ) {
									var lyear = ( (!(year % 4) && year % 100) || !(year % 400) );
									if ( lyear === false && day >= 29 )
										error = true;
									if ( lyear === true && day > 29 )
										error = true;
								}

								if ( error === true ) {

									Swal.fire(
										'Atencion !',
										'La fecha de vencimiento es invalida !',
										'warning'
										);
									this.buscando = false;
									return;

								}


							}						
								
						}


						if(me.dataNewStudent.embajada == ''){
							faltan_datos = true;
						}
						if(me.dataNewStudent.cargo == ''){
							faltan_datos = true;
						}


						if(faltan_datos == true){
							Swal.fire(
								'Atencion !',
								'Todos los datos son requeridos',
								'warning'
								);
							this.buscando = false;
							return;
						}

						


						var data = new FormData();
						data.append('datos', JSON.stringify(this.dataNewStudent));
						//data.append('datos', this.dataNewStudent);
						data.append('informe', this.informe);


						//axios.post(Routing.generate('registerforeignerperson_register',{ datos:me.dataNewStudent }  ))
						axios.post(Routing.generate('registerforeignerperson_register'), data)
						.then(response => {
							console.log(response);
							if (response.status == 200) {

								if(response.data.existe == 0)
								{
									Swal.fire(
										'Datos Registrados!',
										'El registro ha sido exitoso.',
										'success'
									);

									//limpiar form
									me.limpiarFormulario();			

								}
								if(response.data.existe == 1){
									Swal.fire(
										'Error!',
										'El registro ya existe \n (RUDe y Nro.Credencial)',
										'warning'
									);

								}	
								if(response.data.existe == -1){
									Swal.fire(
										'Atencion!',
										'Debe seleccionar el archivo corespondiente',
										'warning'
									);

								}	

							}else{
								Swal.fire(
									'Error!',
									'Se ha producido un error en el registro de la informacion',
									'warning'
								);
							}
							//this.buscando = false;
						})
						.catch(e => {
							console.log(e);
							this.buscando = false;
						});




					}

				});	
                    
			},

			getImage: function(event){
				console.log('archivo');

				var informe = event.target.files[0];
				var allowedExtensions = /(.jpg|.jpeg|.png|.gif|.pdf)$/i;
				if(!allowedExtensions.exec(event.target.value)){
					event.target.value = '';
					Swal.fire(
							'Archivo incorrecto!',
							'El archivo adjunto debe ser una imagen o un archivo pdf',
							'warning'
						);
					this.informe = '';
					return false;
				}else{
					var megas = (informe.size / 1024)/1024;
					if (megas > 2) {
						event.target.value = '';
						Swal.fire(
							'Tamaño no permitido!',
							'El archivo debe tener un tamaño menor a 2MB',
							'warning'
						);
						this.informe = '';
						return false;
					}
				}
				this.informe = event.target.files[0];

			},

			limpiarFormulario(){
				console.log('limpiando');

				this.dataNewStudent.numero_documento = '';
				this.dataNewStudent.fecha_vencimiento = '';
				this.dataNewStudent.nro_pasaporte = '';
				this.dataNewStudent.embajada = '';
				this.dataNewStudent.cargo = '';
				this.dataNewStudent.paisId = 0;
				this.dataNewStudent.rude = '';

				this.buscando = false;
				this.responseprocess = false;
				this.existStudent = '';
				
			}
			
		},
		
	});

	$(document).ready(function(){
		$('[data-toggle="tooltip"]').tooltip();
		$("td").focus();
		$("#fecha_vencimiento").inputmask({ "alias": "dd-mm-yyyy" });
		//$("#idarrPais_p").select2();
	});      

	$(".js-example-basic-multiple").select2({
            tags: "true",
            placeholder: "Seleccione una opción",
            allowClear: true
        });  



</script>
{%endblock%}
