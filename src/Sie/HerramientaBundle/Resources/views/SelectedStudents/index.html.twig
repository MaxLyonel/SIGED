{% extends 'layoutHerramienta.html.twig' %}
{% block stylesheets %}
    {{parent()}}
    <style>

        [v-cloak]{
            display: none;
        }
        .readData{
            background-color: lightblue;
            color:  #000;
            opacity: 0.8;
         

        }
		.jupper{
			text-transform: uppercase;
		}        
    </style>

{% endblock %}
{% block contentoption %}


    <!-- Start page header -->
    <div class="header-content">
        <h2><i class="fa fa-table"></i> Registro Estudiante <span></span></h2>
        <div class="breadcrumb-wrapper hidden-xs">
            <span class="label">Usted esta aquí:</span>
            <ol class="breadcrumb">
                <li>
                    <i class="fa fa-home"></i>
                    <a href="#">Registro Estudiante</a>
                    <i class="fa fa-angle-right"></i>
                </li>
                <li class="active"></li>
            </ol>
        </div><!-- /.breadcrumb-wrapper -->
    </div><!-- /.header-content -->
    <!--/ End page header -->

    <!-- /.row -->
	<div id="app" v-cloak>
		<div v-if="cortina" class="cortina">
			{# <i class="fa fa-refresh fa-spin"></i> Procesando... #}
		</div>
		<div class="body-content animated fadeIn">

			<div class="row">
				<div class="col-md-6">
					<div class="panel panel-default">
						<div class="panel-body">
								<h2 class="titulo">Buscar Estudiante </h2>
								<div class="col-md-12">
									<div role="tabpanel">
										<!-- Nav tabs -->
										<ul class="nav nav-tabs" role="tablist">
											<li role="presentation" :class="{active: opcion == 1}" @click="opcion = 1">
												<a role="tab" data-toggle="tab">Código Rude</a>
											</li>
											<li :class="{active: opcion == 2}" @click="opcion = 2">
												<a aria-controls="tabcarnet" role="tab" data-toggle="tab">Carnet</a>
											</li>
										</ul>
										<!-- Tab panes -->
										<div class="tab-content">
											<div role="tabpanel" :class="['tab-pane', {active: opcion == 1}]">
												<div class="row">
													<div class="form-group col-md-12">
														<label>Código Rude <i class="fa fa-info-circle" data-toggle="popover" data-placement="top" data-content="El Código Rude lo puede encontrar en la libreta electrónica del estudiante de una gestion pasada" data-trigger="hover"></i> </label>
														<input type="text" v-model="estudiante.codigoRude" class="form-control jupper" maxlength="18" v-on:keypress="alfanumerico">
													</div>
												</div>
											</div>
											<div role="tabpanel" :class="['tab-pane', {active: opcion == 2}]">
												<div class="row">
													<div class="form-group col-md-8">
														<label>Carnet</label>
														<input type="text" v-model="estudiante.carnet" class="form-control jupper" maxlength="10" v-on:keypress="numerico">
													</div>
													<div class="form-group col-md-4">
														<label>Complemento <i class="fa fa-info-circle" data-toggle="popover" data-placement="top" data-content="El complemento consta de 2 dígitos que se usan para diferenciar números de carnet idénticos, no es lo mismo que el lugar de expedición, por favor NO colocar abreviaturas de departamentos" data-trigger="hover"></i> </label>
														<input type="text" v-model="estudiante.complemento" class="form-control jupper" maxlength="2" v-on:keypress="alfanumerico">
													</div>
												</div>
											</div>
										</div>
									</div>
								</div>
								<div class="col-md-12 text-center">
									<button type="button" class="btn btn-primary" @click="consultar" v-if="!swConfirmGlobal">Buscar</button>
								</div>							

						</div>
					</div>
				</div>
				<div class="col-md-6" v-if="swregistry">
					<table class="table">
					<thead>
						<tr>
						<th scope="col">RUDE</th>
						<th scope="col">CI-COMPLEMENTO</th>
						<th scope="col">ESTUDIANTE</th>
						<th scope="col">GENERO</th>
						<th scope="col">INSCRIPCION</th>
						<th scope="col">OPCION</th>
						</tr>
					</thead>
					<tbody>
						<tr v-for="(student, index) in DBStudentsQuipus">
						<th scope="row">${student.codigoRude}</th>
						<td> ${student.carnet} </td>
						<td> ${student.paterno}
							 ${student.materno}
							 ${student.nombre}</td>
						<td> ${student.genero}</td>
						<td> ${student.nivel}
							 ${student.grado}
							 ${student.paralelo}</td>						
						<td> <a href="#" @click="removeStudent(student.id)" v-if="!swConfirmGlobal"> <i class="fa fa-trash"></i> </a></td>							 
						</tr>
					</tbody>
					</table>
					<div class="col-md-12 text-center" v-if="swConfirm && !swConfirmGlobal">
						<button type="button" class="btn btn-success" @click="closeRegistry">Cerrar Registro</button>
					</div>					
					<div class="col-md-12 text-center" v-if="swConfirmGlobal">
						<a v-bind:href="urlreport" target="_blank">
							<i class="fa fa-download"> DESCARGAR DDJJ</i>
						</a></br>
					</div>
				</div>


			</div>
			<div class="row">
				<div class="col-md-6" v-if="validado">				
					<div class="panel panel-default">
						<div class="panel-body">
							<table class="table">
							<thead>
								<tr>
								<th scope="col">RUDE</th>
								<th scope="col">CI</th>
								<th scope="col">PATERNO</th>
								<th scope="col">MATERNO</th>
								<th scope="col">NOMBRE(S)</th>
								<th scope="col">GENERO</th>
								</tr>
							</thead>
							<tbody>
								<tr>
								<th scope="row">${estudiante.codigoRude}</th>
								<td> ${estudiante.carnet}</td>
								<td> ${estudiante.paterno}</td>
								<td> ${estudiante.materno}</td>
								<td> ${estudiante.nombre}</td>
								<td> ${estudiante.genero}</td>
								</tr>
							</tbody>
							</table>
							
							<table class="table">
							<thead>
								<tr>
								<th scope="col">SIE</th>
								<th scope="col"  >UNIDAD EDUCATIVA</th>
								<th scope="col" colspan="2">NIVEL</th>
								<th scope="col">GRADO</th>
								<th scope="col">PARALELO</th>
								</tr>
							</thead>
							<tbody>
								<tr>
								<th scope="row">${estudiante.institucioneducativaId}</th>
								<td > ${estudiante.institucioneducativa}</td>
								<td colspan="2"> ${estudiante.nivel}</td>
								<td> ${estudiante.grado}</td>
								<td> ${estudiante.paralelo}</td>
								</tr>
							</tbody>
							</table>													
								<div class="alert" :class="[{'alert-success':datos.statusEstudiante == 'success'}, {'alert-warning':datos.statusEstudiante == 'warning'}]">					
								</div>								
								
								<div class="botones" >
									<button type="button" @click="cerrar" class="btn btn-default">Volver a consultar</button>
									<button type="button" @click="registryStudent" class="btn btn-primary">Registrar Estudiante</button>
									{# <a href="#" class="btn btn-primary">Go somewhere</a> #}
								</div>

							
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>	

{% endblock %}
{% block javascripts%}
    {{parent()}}
    <script type="text/javascript">
    // $("#form_idfecnac").inputmask({ "alias": "dd-mm-yyyy", 'placeholder':'dd-mm-aaaa' });
  </script>
  
    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.24.0/moment-with-locales.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/axios/0.15.2/axios.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@8"></script>   
    <script src="{{asset('js/inputmask.js')}}"></script>
    <script type="text/javascript">
// $("#fecnac").inputmask({ "alias": "dd-mm-yyyy", 'placeholder':'dd-mm-aaaa' });
    


		var app = new Vue({
		    delimiters: ['${', '}'],
		    el: '#app',
		    data: {
		    	state: {isSending: false},
		    	errores: [],
		    	opcion: 1,
		    	niveles: [],
		    	grados: [],
		    	gradosDisponibles: [],
				urlreport: '',
		    	estudiante: {
		    		/*codigoRude: '4073040820205783 809700692017061 718500012020019',*/
					codigoRude: '',
					codigoRudeId: '',
		    		carnet: '',
		    		complemento: '',
		    		nombre: '',
		    		paterno: '',
		    		materno: '',
					genero: '',
		    		fechaNacimiento: '',
		    		nivel: '',
					paralelo: '',
					estId: '',
		    		grado: ''
		    	},
				
		    	validado: false,
		    	cortina: false,
				swConfirm:false,
				swConfirmGlobal:'{{swConfirmGlobal}}',
				swregistry: '{{swregistry}}',
				DBStudentsQuipus: [],
		    	datos: []
		    	
		    },
		    mounted(){	
				this.loadData();
		    
		    },
		    methods: {
				
		    	actualizarGrados(){
		    		if (this.estudiante.nivel == 11) {
		    			this.estudiante.grado = '1';
		    			this.gradosDisponibles = [];
		    			console.log(this.grados);
		    			let me = this;
		    			$.each(this.grados, function(index, val) {
		    				console.log(val);
		    				if (val.id == 1 || val.id == 2) {
		    				 	me.gradosDisponibles.push(me.grados[index]);
		    				}
		    			});
		    		}else{
		    			this.gradosDisponibles = this.grados;
		    		}
		    	},
				loadData(){
					axios.get(Routing.generate('selected_students_loadData'))
		    		.then(response => {
						this.DBStudentsQuipus = response.data.datos.arrStudents;
						this.swConfirm = response.data.datos.swConfirm;
						this.urlreport = response.data.datos.urlreport;
		    		})
		    		.catch(e = {

		    		});					
				},
		    	consultar(){
		    		this.errores = [];
		    		this.state.isSending = false;
		    		if (this.opcion == 1) {
		    			if (this.estudiante.codigoRude == '') {
		    				this.errores.push('Código Rude');
		    			}
		    		}
		    		if (this.opcion == 2) {
		    			if (this.estudiante.carnet == '') {
		    				this.errores.push('Carnet del estudiante');
		    			}
		    		}
		    			    	
		    		if (this.errores.length > 0) {
			    		let texto = '<div class="errores">';
			    		$.each(this.errores, function (i, value) {
	                        texto = texto + '<li>' + value + '</li>';
	                    });
	                    texto = texto + '</div>';
		    			Swal.fire({
		    		  		title:'Complete los siguientes datos',
		    		  		html:texto,
		    		  		type:'warning'
		    			});
		    			return false;
		    		}
		    		this.datos = [];
		    		this.validado = false;
		    		this.cortina = true;
	    			Swal.fire({
	    		  		title:'Procesando',
	    		  		html:'<div style="margin-bottom:20px"> <i class="fa fa-search fa-spin"></i> Espere un momento</div> ',
	    		  		type:'info',
	    		  		showConfirmButton: false,
	    			});
		    		axios.post(Routing.generate('selected_students_buscar', { estudiante: this.estudiante, opcion: this.opcion}))
		    			.then(response => {
		    				if (response.data.status === 'error') {
			    				Swal.fire(
	    					  		'Aviso',
	    					  		response.data.msg,
	    					  		'info'
	    						)
		    				}

		    				if (response.data.status == 'success') {
		    					Swal.close();
								
		    					this.datos = response.data.datos;

								this.estudiante.nombre = this.datos.arrStudent.nombre;
								this.estudiante.paterno = this.datos.arrStudent.paterno;
								this.estudiante.materno = this.datos.arrStudent.materno;
								this.estudiante.carnet = this.datos.arrStudent.carnet;
								this.estudiante.genero = this.datos.arrStudent.genero;
								this.estudiante.idGenero = this.datos.arrStudent.idGenero;
								this.estudiante.estId = this.datos.arrStudent.estId;
								this.estudiante.estInsId = this.datos.arrStudent.estInsId;
								
								this.estudiante.codigoRudeId = this.datos.arrStudent.codigoRude;
								this.estudiante.codigoRude = this.datos.arrStudent.codigoRude;
								this.estudiante.institucioneducativaId = this.datos.arrStudent.institucioneducativaId;
								this.estudiante.institucioneducativa = this.datos.arrStudent.institucioneducativa;
								this.estudiante.nivel = this.datos.arrStudent.nivel;
								this.estudiante.grado = this.datos.arrStudent.grado;
								this.estudiante.paralelo = this.datos.arrStudent.paralelo;
								this.estudiante.nivelId = this.datos.arrStudent.nivelId;
								this.estudiante.gradoId = this.datos.arrStudent.gradoId;
								this.estudiante.paraleloId = this.datos.arrStudent.paraleloId;
								this.estudiante.cicloId = this.datos.arrStudent.cicloId;
								
		    					this.validado = this.datos.swStudent;
		    				}
		    				this.cortina = false;
		    			})
		    			.catch(e => {
		    				Swal.fire(
    					  		'Aviso',
    					  		'No se pudo realizar la verficación',
    					  		'error'
    						)
		    				this.cortina = false;
		    			});
		    	},

				registryStudent(){
					this.swregistry = true;

                	Swal.fire({
                        title: 'Registrar Estudiante?',
                        text: "esta seguro de CONTINUAR con el registro",
                        type: 'question',
                        showCancelButton: true,
                        confirmButtonColor: '#3085d6',
                        cancelButtonColor: '#d33',
                        confirmButtonText: 'Si, proceder',
                        cancelButtonText: 'Cancelar'
                    }).then((result) => {
                    	if (result.value) {  					
					
						axios.post(Routing.generate('selected_students_registryStudent', { estudiante: this.estudiante, opcion: this.opcion}))
							.then(response => {
								if (response.data.status === 'error') {
									Swal.fire(
										'Aviso',
										response.data.msg,
										'info'
									)
								}

								if (response.data.status == 'success') {
									Swal.close();								
									this.datos = response.data.datos;							
									this.DBStudentsQuipus = response.data.datos.arrStudents;
									this.swConfirm = response.data.datos.swConfirm;
									this.validado = this.datos.swStudent;
									this.cerrar();
								}
								this.cortina = false;
							})
							.catch(e => {
								Swal.fire(
									'Aviso',
									'No se pudo realizar la verficación',
									'error'
								)
								this.cortina = false;
							});

							this.cerrar();
	                   }
	                })
						
						
					
					
										
				},				
                removeStudent(id){
                	
                	Swal.fire({
                        title: 'Eliminar Estudiante?',
                        text: "esta seguro de CONTINUAR la Eliminación",
                        type: 'question',
                        showCancelButton: true,
                        confirmButtonColor: '#3085d6',
                        cancelButtonColor: '#d33',
                        confirmButtonText: 'Si, proceder',
                        cancelButtonText: 'Cancelar'
                    }).then((result) => {
                    	if (result.value) {                	

						axios.post(Routing.generate('selected_students_removeStudent', { id: id }))
	                    .then(response => {
		    				if (response.data.status == 'success') {
		    					Swal.close();								
		    					this.datos = response.data.datos;							
								this.DBStudentsQuipus = response.data.datos.arrStudents;
								this.swConfirm = response.data.datos.swConfirm;
		    					this.validado = this.datos.swStudent;
								this.cerrar();
		    				}
		    				this.cortina = false;	                       
	                    })
	                    .catch(e => {
	                        console.log(e);
	                        this.buscando = false;
	                    });

	                   }
	                })


                },
                closeRegistry(id){
                	
                	Swal.fire({
                        title: 'Cerrar Registro de Estudiantes?',
                        text: "esta seguro de CONTINUAR el Registro",
                        type: 'question',
                        showCancelButton: true,
                        confirmButtonColor: '#3085d6',
                        cancelButtonColor: '#d33',
                        confirmButtonText: 'Si, proceder',
                        cancelButtonText: 'Cancelar'
                    }).then((result) => {
                    	if (result.value) {                	

						axios.post(Routing.generate('selected_students_closeRegistry', { estudiantes: this.DBStudentsQuipus}))
	                    .then(response => {
		    				if (response.data.status == 'success') {
		    					Swal.close();								
		    					this.datos = response.data.datos;							
								this.DBStudentsQuipus = response.data.datos.arrStudents;
								this.swConfirm = response.data.datos.swConfirm;
								this.swConfirmGlobal = response.data.datos.swConfirmGlobal;
								this.urlreport = response.data.datos.urlreport;
		    					this.validado = this.datos.swStudent;
								this.cerrar();
		    				}
		    				this.cortina = false;	                       
	                    })
	                    .catch(e => {
	                        console.log(e);
	                        this.buscando = false;
	                    });

	                   }
	                })


                },		
				validEmail(email){
					var re = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
					return re.test(email);
				},			
			
		    	cerrar(){
		    		this.validado = false;
		    		this.opcion = 1;
		    		this.estudiante.codigoRude = '';
		    		this.estudiante.carnet = '';
		    		this.estudiante.complemento = '';
		    		this.estudiante.nombre = '';
		    		this.estudiante.paterno = '';
		    		this.estudiante.materno = '';
		    		this.estudiante.fechaNacimiento = '';
		    		this.estudiante.nivel = '';
		    		this.estudiante.grado = '';
		    	},
		    	validarFormatoFecha(campo) {
	    	        var RegExPattern = /^\d{1,2}\-\d{1,2}\-\d{4}$/;
	    	        if ((campo.match(RegExPattern)) && (campo!='')) {
	    	            return true;
	    	        } else {
	    	            return false;
	    	        }
		    	},
		    	numerico: function(event){
		    	    var k = event.charCode || event.keyCode;
		    	    if ((k < 48 || k > 57) //NUmeros
		    	        && (k != 13) //ENTER
		    	        && (k != 8) //retroceso
		    	        && (k != 9) //tab
		    	    ){
		    	        event.preventDefault();
		    	        return false;
		    	    }
		    	},
		    	alfabetico: function(event){
	                var k = event.charCode || event.keyCode;
	                if ((k < 97 || k > 122)//letras minusculas
	                    && (k < 65 || k > 90) //letras mayusculas
	                    && (k != 13) //ENTER
	                    && (k != 8) //retroceso
	                    && (k != 9) //tab
	                    && (k != 241) //ñ
	                     && (k != 209) //Ñ
	                     && (k != 32) //espacio
	                     && (k != 225) //á
	                     && (k != 233) //é
	                     && (k != 237) //í
	                     && (k != 243) //ó
	                     && (k != 250) //ú
	                     && (k != 193) //Á
	                     && (k != 201) //É
	                     && (k != 205) //Í
	                     && (k != 211) //Ó
	                     && (k != 218) //Ú
	                     && (k != 44) //coma ,
	                     && (k != 46) //punto .
	                ){
	                	event.preventDefault();
	                	return false;
	                }
	            },
		    	alfanumerico: function(event){
	                var k = event.charCode || event.keyCode;
	                if ((k < 97 || k > 122)//letras minusculas
	                    && (k < 65 || k > 90) //letras mayusculas
	                    && (k < 48 || k > 57) //NUmeros
	                    && (k != 13) //ENTER
	                    && (k != 8) //retroceso
	                    && (k != 9) //tab
	                    && (k != 241) //ñ
	                     && (k != 209) //Ñ
	                     && (k != 32) //espacio
	                     && (k != 225) //á
	                     && (k != 233) //é
	                     && (k != 237) //í
	                     && (k != 243) //ó
	                     && (k != 250) //ú
	                     && (k != 193) //Á
	                     && (k != 201) //É
	                     && (k != 205) //Í
	                     && (k != 211) //Ó
	                     && (k != 218) //Ú
	                     && (k != 44) //coma ,
	                     && (k != 46) //punto .
	                ){
	                	event.preventDefault();
	                	return false;
	                }
	            },
		    }
		});

        $(document).ready(function(){
            $('[data-toggle="tooltip"]').tooltip();
            $("td").focus();
        });        


    </script>
{%endblock%}
