{% extends 'layoutRegular.html.twig' %}
{% block stylesheets %}
    {{parent()}}
    <style>
        .higherWider {
            width:800px;
            margin-top:100px;
        }
        [v-cloak]{
            display: none;
        }
        .tachado{
            text-decoration: line-through;
            /* color: #D5956E; */
            color:  #D51528;
            opacity: 0.4;
        }
    </style>

{% endblock %}
{% block contentoption %}


    <div class="row">
        <div class="col-lg-12">
            <div class="page-title">
                <h1>Modificacion de Nivel y Grado
                    <small>en Estudiantes</small>
                </h1>
                <ol class="breadcrumb">
                    <li><i class="fa fa-dashboard"></i>  <a href="#">Buscar</a></li>
                </ol>
            </div>
        </div>
    </div>


    <!-- /.row -->
<div id="app">
<div v-cloak>
    <div class="modal fade" id="modalEstudianteTwo" data-backdrop="static">
        <div class="modal-dialog" style="width:800px">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                    <h4 class="modal-title">HISTORIAL DEL ESTUDIANTE</h4>
                </div>
                <div class="modal-body">

                <div v-if="swhistory" class="text-center">
                                <img src="{{asset('img/loading.gif')}}" alt=""> Buscando...
                              </div>

                              <div v-if="historyReg">

                                <h4 align="center" class="text-primary">Educación Regular</h4><hr>
                                <div id="" class="" role="">
                                <table id="" class="table" style="font-size:11px">
                                    <thead>
                                      <tr role="row">
                                       <th class="text-center">Gestión</th>
                                       <th class="text-center">SIE</th>
                                       <th class="text-center">Unidad Educativa</th>
                                       <th class="text-center">Nivel</th>
                                       <th class="text-center">Grado</th>
                                       <th class="text-center">Paralelo</th>
                                       <th class="text-center">Turno</th>
                                       <th class="text-center">Estado Matrícula</th>
                                      </tr>
                                    </thead>

                                    <tbody role="alert" aria-live="polite" aria-relevant="all">
                                      <tr v-for="(historyR, index) in historyReg">
                                        <td>${historyR.gestion_tipo_id_raep}</td>
                                        <td>${historyR.institucioneducativa_id_raep}</td>
                                        <td>${historyR.institucioneducativa_raep}</td>
                                        <td>${historyR.nivel_r}</td>
                                        <td>${historyR.grado_r}</td>
                                        <td>${historyR.paralelo_raep}</td>
                                        <td>${historyR.turno_raep}</td>
                                        <td class="text-center">${historyR.estadomatricula_fin_r}</td>
                                      </tr>
                                    </tbody>
                                  </table>
                                </div>

                              </div>

                              <div v-if="historyAlt">

                                <h4 align="center" class="text-primary">Educación Alternativa</h4><hr>
                                <div id="" class="dataTables_wrapper form-inline" role="grid">
                                <table id="" class="table table-striped " aria-describedby="example-table_info" style="font-size:11px">
                                    <thead>
                                      <tr role="row">
                                       <th class="text-center">Gestión</th>
                                       <th class="text-center">SIE / Subcentro</th>
                                       <th class="text-center">Centro</th>
                                       <th class="text-center">Periodo</th>
                                       <th class="text-center">Acreditación</th>
                                       <th class="text-center">Área</th>
                                       <th class="text-center">Especialidad</th>
                                       <th class="text-center">Paralelo</th>
                                       <th class="text-center">Turno</th>
                                      </tr>
                                    </thead>

                                    <tbody role="alert" aria-live="polite" aria-relevant="all">
                                      <tr v-for="(historyA, index) in historyAlt">
                                        <td>${historyA.gestion_tipo_id_raep}</td>
                                        <td>${historyA.institucioneducativa_id_raep} - ${historyA.sucursal_tipo_id_a}</td>
                                        <td>${historyA.institucioneducativa_raep}</td>
                                        <td>${historyA.periodo_raep}</td>
                                        <td>${historyA.acreditacion_a}</td>
                                        <td>${historyA.facultad_area_a}</td>
                                        <td>${historyA.especialidad_a}</td>
                                        <td>${historyA.paralelo_raep}</td>
                                        <td>${historyA.turno_raep}</td>
                                      </tr>
                                    </tbody>
                                  </table>
                                </div>

                              </div>                            

                              <div v-if="historyEsp">

                                <h4 align="center" class="text-primary">Educación Especial</h4><hr>
                                <div id="" class="dataTables_wrapper form-inline" role="grid">
                                <table id="" class="table table-striped" aria-describedby="example-table_info" style="font-size:11px">
                                    <thead>
                                      <tr role="row">
                                       <th class="text-center">Gestion</th>
                                       <th class="text-center">SIE</th>
                                       <th class="text-center">Centro</th>
                                       <th class="text-center">Área</th>
                                       <th class="text-center">Nivel</th>
                                       <th class="text-center">Grado</th>
                                       <th class="text-center">Paralelo</th>
                                       <th class="text-center">Turno</th>
                                       <th class="text-center">Técnico</th>
                                      </tr>
                                    </thead>

                                    <tbody role="alert" aria-live="polite" aria-relevant="all">
                                      <tr v-for="(historyE, index) in historyEsp">
                                        <td>${historyE.gestion_tipo_id_raep}</td>
                                        <td>${historyE.institucioneducativa_id_raep}</td>
                                        <td>${historyE.institucioneducativa_raep}</td>
                                        <td>${historyE.area_especial_e}</td>
                                        <td>${historyE.nivel_e}</td>
                                        <td>${historyE.grado_e}</td>
                                        <td>${historyE.paralelo_raep}</td>
                                        <td>${historyE.turno_raep}</td>
                                        <td>${historyE.tecnica_e}</td>
                                      </tr>
                                    </tbody>
                                  </table>
                                </div>

                              </div>

                              <div v-if="historyPer">

                                <h4 align="center" class="text-primary">Programa Nacional de Post-alfabetización</h4><hr>
                                <div id="" class="dataTables_wrapper form-inline" role="grid">
                                <table id="" class="table table-striped " aria-describedby="example-table_info" style="font-size:11px">
                                    <thead>
                                      <tr role="row">
                                        <th class="text-center">Gestión</th>
                                        <th class="text-center">Lugar</th>
                                        <th class="text-center">Plan</th>
                                        <th class="text-center">Grado</th>
                                        <th class="text-center">Fecha Inicio</th>
                                        <th class="text-center">Fecha Fin</th>
                                        <th class="text-center">Id Curso</th>
                                        <th class="text-center">Estado Matrícula</th>
                                        <th class="text-center">Acciones</th>
                                      </tr>
                                    </thead>

                                    <tbody role="alert" aria-live="polite" aria-relevant="all">
                                      <tr v-for="(historyP, index) in historyPer">
                                        <td>${historyP.gestion}</td>
                                        <td>${historyP.institucioneducativa}</td>
                                        <td>${historyP.partp}</td>
                                        <td>${historyP.bloquep}</td>
                                        <td></td>
                                      </tr>
                                    </tbody>
                                  </table>
                                </div>

                              </div>

                </div>
            </div>
        </div>
    </div> 

  <div class="body-content animated fadeIn">
        <div class="row">
            <div class="col-xs-12 col-lg-12">
                <div class="panel panel-icon panel-default">
                    <div class="panel-heading">
                        <i class="fa fa-search"></i>
                        <strong> </strong>
                        <div class="pull-right">
                            {# <a href="{{ path('estudiantehistorialmodificacion') }}">Retornar Lista</a> #}
                        </div>                                        
                    </div>
                    
                    <div class="panel-body">
                        <!-- form to search student -->
                        <form class="form-inline">
                          <div class="form-group mb-2">
                            <label for="staticEmail2" class="sr-only">Email</label>
                            <input type="text" readonly class="form-control-plaintext" id="staticEmail2" value="email@example.com">
                          </div>
                          <div class="form-group mx-sm-3 mb-2">
                            <label for="inputPassword2" class="sr-only">Password</label>
                            <input type="password" class="form-control" id="inputPassword2" placeholder="Password">
                          </div>
                          <button type="submit" class="btn btn-primary mb-2">Confirm identity</button>
                        </form>

                       
                            
                            
                    </div>
                    
                </div>
            </div>
        </div>
  </div>
</div>
</div>

{% endblock %}
{% block javascripts%}
    {{parent()}}
    <script type="text/javascript">
    // $("#form_idfecnac").inputmask({ "alias": "dd-mm-yyyy", 'placeholder':'dd-mm-aaaa' });
  </script>
  
    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.24.0/moment-with-locales.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/axios/0.15.2/axios.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@8"></script>   
      <script src="{{asset('js/inputmask.js')}}"></script>
    <script type="text/javascript">
// $("#form_idfecnac").inputmask({ "alias": "dd-mm-yyyy", 'placeholder':'dd-mm-aaaa' });
    
    Vue.filter('uppercase', function (value) {
      if (typeof value === "undefined") 
      return '';
    else
      return value.toUpperCase()
  })

        var app = new Vue({
            delimiters: ['${', '}'],
            el: '#app',

            /*components: {
          vuejsDatepicker
        },*/

            data: {

                dataStudent:[
                  studentInfo:{},
                  currentInscription:{},
                  studentObs:{}
                ],

                DBHistoryInscription:{},

                message:'',             
                
                DBPais: {},
                DBDepto: {},
                DBProvincia: {},
                DBLevel: {},
                DBGrado:{},
                DBParalelo:{},
                DBTurno:{},
                DBNewStudent:{},
                DBNewInscription:{},
                DBstudentExist:{},
               
               
            },
            methods: {

              clearFields: function(){
                this.buscando = true;
                    this.responseprocess = false;
                    this.swinscription = false;
                    this.swprocessue = false;
                    this.DBstudentExist=false;
                    this.existStudent=false;
                    this.message = '';
                    this.dataNewStudent.generoId= '';
                    this.dataNewStudent.paisId= '';
                  this.DBDepto= '';
                  this.DBProvincia= '';
                  this.dataNewStudent.localidad='';
                  this.dataNewStudent.sie = '';
                  this.swhomonimo = false;


                  this.dataNewStudent.nivelId='';
                this.dataNewStudent.gradoId='';
                this.dataNewStudent.paraleloId='';
                this.dataNewStudent.turnoId=''; 

                this.swhomonimo = false;
                  this.swoldinscription = false;
                  this.oldStudent = {};  
              },
                buscarEstudiante: function(){
                  let _this = this;
                  _this.clearFields();
                    this.state.isSending = false;
                    if (typeof this.dataNewStudent.withoutcifind === "undefined") {
            this.dataNewStudent.withoutcifind = false;
          }
          if(!this.dataNewStudent.withoutcifind){
            if (typeof this.dataNewStudent.cifind === "undefined") {
                  Swal.fire(
                            'Carnet de Identidad',
                            'Debe ingresar un Carnet de Identidad válido',
                            'warning'
                            );
                  this.buscando = false;
                        return;
            }           
          }
          if (typeof this.dataNewStudent.fecnacfind === "undefined") {
            Swal.fire(
                            'Fecha de Nacimiento',
                            'Debe ingresar la Fecha de Nacimiento del Estudiante Ej: 01-01-2015',
                            'warning'
                            );
                this.buscando = false;
                      return;
          }
          if (typeof this.dataNewStudent.nombre === "undefined" || this.dataNewStudent.nombre == "") {
            Swal.fire(
                            'Nombre del Estudiante',
                            'Debe ingresar el Nombre(s) del Estudiante',
                            'warning'
                            );
                this.buscando = false;
                return;
          }         
          if (((typeof this.dataNewStudent.paterno === "undefined" || typeof this.dataNewStudent.materno === "undefined") && (this.dataNewStudent.paterno == "" || this.dataNewStudent.materno == ""))) {
            Swal.fire(
                            'Apellidos del Estudiante',
                            'Debe ingresar Apellido(s) del Estudiante',
                            'warning'
                            );
                this.buscando = false;
                return;
          }
          if (typeof this.dataNewStudent.complementofind === "undefined") {
            this.dataNewStudent.complementofind = '';
          }
          if (typeof this.dataNewStudent.expedidoIdfind === "undefined") {
            this.dataNewStudent.expedidoIdfind = 0;
          }         
        
          
                    axios.get(Routing.generate('newinscriptionInipri_checksegipstudent', this.dataNewStudent ))
                    .then(response => {
                        if (response.status == 200) {
                          this.responseprocess = response.data.swcreatestudent;
                          this.message = response.data.message;
                          this.DBGenero= response.data.arrGenero;
                          this.DBPais= response.data.arrPais;
                          this.DBstudentExist= response.data.arrStudentExist;
                          this.existStudent = response.data.existStudent;
                        }                        
                        this.buscando = false;
                    })
                    .catch(e => {
                        console.log(e);
                        this.buscando = false;
                    });
                },
                goHomonimo: function(){
                  this.swhomonimo = false;
                  this.swoldinscription = false;
                  this.oldStudent.articuleten = false;
                  this.oldStudent.swrezago = false;

                  Swal.fire({
                        title: 'Estudiante Homónimo?',
                        text: "esta seguro de CONTINUAR la Inscripción",
                        type: 'question',
                        showCancelButton: true,
                        confirmButtonColor: '#3085d6',
                        cancelButtonColor: '#d33',
                        confirmButtonText: 'Si, proceder',
                        cancelButtonText: 'Cancelar'
                    }).then((result) => {
                      if (result.value) {                 

            axios.get(Routing.generate('newinscriptionInipri_gohomonimo', this.dataNewStudent ))
                      .then(response => {
                          if (response.status == 200) {
                            this.responseprocess = response.data.swcreatestudent;
                            this.message = response.data.message;
                            this.DBGenero= response.data.arrGenero;
                            this.DBPais= response.data.arrPais;
                            // this.DBstudentExist= response.data.arrStudentExist;
                            this.existStudent = response.data.existStudent;
                            this.swhomonimo = response.data.swhomonimo;
                          }                        
                          this.buscando = false;
                      })
                      .catch(e => {
                          console.log(e);
                          this.buscando = false;
                      });
                     }
                  })


                },
                oldInscription: function(idStudent, index){
                  
                  //this.swhomonimo = false;
                  this.swhomonimo = false;
                  this.swoldinscription = false;
                  this.oldStudent.articuleten = false;
                  this.oldStudent.swrezago = false;
                                 
          //console.log(this.oldStudent);return;
                  Swal.fire({
                        title: 'Continuar con la Inscripción?',
                        text: "Esta seguro de CONTINUAR la Inscripción...",
                        type: 'question',
                        showCancelButton: true,
                        confirmButtonColor: '#3085d6',
                        cancelButtonColor: '#d33',
                        confirmButtonText: 'Si, proceder',
                        cancelButtonText: 'Cancelar'
                    }).then((result) => {
                      if (result.value) {                 
            this.oldStudent = this.DBstudentExist[index];
            this.oldStudent.swnewforeign = 0;
            this.oldStudent.withoutcifind = this.dataNewStudent.withoutcifind;
            this.oldStudent.fecnacfind = this.dataNewStudent.fecnacfind;
            axios.get(Routing.generate('newinscriptionInipri_goOldInscription', this.oldStudent ))
                      .then(response => {
                          if (response.status == 200) {
                            this.responseprocess = false;
                            this.message = response.data.message;
                            this.DBGenero= response.data.arrGenero;
                            this.DBPais= response.data.arrPais;
                            // this.DBstudentExist= response.data.arrStudentExist;
                            this.existStudent = response.data.existStudent;
                            //this.swhomonimo = response.data.swhomonimo;
                            this.swoldinscription = response.data.swhomonimo;
                            this.oldStudent = this.DBstudentExist[index];
                          }                        
                          this.buscando = false;
                      })
                      .catch(e => {
                          console.log(e);
                          this.buscando = false;
                      });
                     }
                  })


                },
                showhistory: function(rude){
            
            this.swhistory = true;
            this.historyReg = false;
            this.historyAlt = false;
            this.historyEsp = false;
            this.historyPer = false;

            axios.get(Routing.generate('newForeign_showhistory', {
                      rude: rude
                  }))
                  .then(response => {
                    if(response.status == 200){
                      this.historyReg  = response.data.dataInscriptionR;
                      this.historyAlt  = response.data.dataInscriptionA;
                      this.historyEsp  = response.data.dataInscriptionE;
                      this.historyPer  = response.data.dataInscriptionP;
                    }
                      this.swhistory = false;
                  })
                  .catch(e => {
                      console.log(e);
                      this.buscando = false;
                  });
            
          },                 

                setGenero: function(){
                    var me = this;
                    $.each(this.DBGenero, function (i, value) {
                        if(me.dataStudentModif.generoTipoId == value.generoId) {
                            me.dataStudentModif.generoTipo = value.genero;
                        }
                    });                    
                },
                setPais: function(){
                  
                    var me = this;
                    
                    /*$.each(this.DBPais, function (i, value) {
                        if(me.dataStudentModif.paisId == value.paisId) {
                            me.dataStudentModif.pais = value.pais;
                            me.dataModifyToSend.push({'paisId':me.dataStudentModif.paisId})
                        }
                    });*/
                    
                    if(me.dataNewStudent.paisId == 1){
                         axios.post(Routing.generate('newinscriptionInipri_getdepto',{ paisId:me.dataNewStudent.paisId }  ))
                            .then(response => {
                                if (response.status == 200) {
                                    this.DBDepto = response.data.arrDepto;
                                    $('[data-toggle="tooltip"]').tooltip();
                                }
                                this.buscando = false;
                            })
                            .catch(e => {
                                console.log(e);
                                this.buscando = false;
                            });
                    }else{
                        this.DBDepto = '';
                        this.DBProvincia = '';
                        me.dataStudentModif.lugarNacTipoId ='';
                        me.dataStudentModif.lugarProvNacTipoId ='';
                    }
                    
                },
                setDepto: function(){
                    var me = this;
                  /*  $.each(this.DBDepto, function (i, value) {
                        if(me.dataStudentModif.lugarNacTipoId == value.deptoId) {
                            me.dataStudentModif.lugarNacTipo = value.depto;
                        }                        
                    });*/  
                    
                    if(me.dataNewStudent.paisId == 1 && me.dataNewStudent.lugarNacTipoId>0){
                         axios.post(Routing.generate('newinscriptionInipri_getprovincia', me.dataNewStudent ))
                            .then(response => {
                                if (response.status == 200) {
                                    this.DBProvincia = response.data.arrProvincia;
                                    $('[data-toggle="tooltip"]').tooltip();
                                }
                                if( response.status == 202){
                                    this.respuesta = response.data;
                                }

                                this.buscando = false;
                            })
                            .catch(e => {
                                console.log(e);
                                this.buscando = false;
                            });
                    }else{
                        this.DBDepto = '';
                        this.DBProvincia = '';
                        me.dataStudentModif.lugarNacTipoId ='';
                        me.dataStudentModif.lugarProvNacTipoId ='';
                    }





                },
                setProvincia: function(){
                    var me = this;
                    $.each(this.DBProvincia, function (i, value) {
                        if(me.dataStudentModif.lugarProvNacTipoId == value.provinciaId) {
                            me.dataStudentModif.lugarProvNacTipo = value.provincia;
                            me.dataModifyToSend.push({'provinciaId':me.dataStudentModif.lugarProvNacTipoId})
                        }
                    });                    
                }, 
                getInfoUe: function(newobject){
                  if(newobject == 1){
                    this.dataSaveStudent = this.dataNewStudent;
                  }else{
                    this.dataSaveStudent = this.oldStudent;
                  }                 

                  if(this.dataSaveStudent.sie.length >= 7){

                    if(newobject == 1){
                      this.dataNewStudent.nivelId='';
                      this.dataNewStudent.gradoId='';
                      this.dataNewStudent.paraleloId='';
                      this.dataNewStudent.turnoId='';
                    }else{
                      this.oldStudent.nivelId='';
                      this.oldStudent.gradoId='';
                      this.oldStudent.paraleloId='';
                      this.oldStudent.turnoId='';
                      
                    }                   
                    this.messageue='';
                    this.buscandoue = true;

                        axios.post(Routing.generate('newinscriptionInipri_getInfoUe', this.dataSaveStudent ))
                            .then(response => {
                                if (response.status == 200) {
                                    this.DBLevel = response.data.aniveles;
                                    this.swprocessue = response.data.swprocessue;
                                    this.nombreue = response.data.nombreue;
                                    this.messageue = response.data.message;
                                    $('[data-toggle="tooltip"]').tooltip();
                                }
                               
                                this.buscandoue = false;
                            })
                            .catch(e => {
                                console.log(e);
                                // this.buscando = false;
                            });

                  }
                },
                setGrado: function(newobject){
                  if(newobject == 1){
                    this.dataSaveStudent = this.dataNewStudent;
                    this.dataNewStudent.paraleloId='';
                    this.dataNewStudent.turnoId='';
                  }else{
                    this.dataSaveStudent = this.oldStudent;
                    this.oldStudent.paraleloId='';
                    this.oldStudent.turnoId='';
                  } 

                    axios.post(Routing.generate('newinscriptionInipri_setGrado', this.dataSaveStudent ))
                        .then(response => {
                            if (response.status == 200) {
                                this.DBGrado = response.data.arrGrado;
                                $('[data-toggle="tooltip"]').tooltip();
                            }
                           
                            this.buscandoue = false;
                        })
                        .catch(e => {
                            console.log(e);
                            // this.buscando = false;
                        });

              
                },    
                setParalelo: function(newobject){
                  if(newobject == 1){
                    this.dataSaveStudent = this.dataNewStudent;
                    this.dataNewStudent.turnoId='';
                  }else{
                    this.dataSaveStudent = this.oldStudent;
                    this.oldStudent.turnoId='';
                  } 

                    axios.post(Routing.generate('newinscriptionInipri_setParalelo', this.dataSaveStudent ))
                        .then(response => {
                            if (response.status == 200) {
                                this.DBParalelo = response.data.arrParalelo;
                                $('[data-toggle="tooltip"]').tooltip();
                            }
                           
                            this.buscandoue = false;
                        })
                        .catch(e => {
                            console.log(e);
                            // this.buscando = false;
                        });

              
                },     
                setTurno: function(newobject){
                  
                  if(newobject == 1){
                    this.dataSaveStudent = this.dataNewStudent;
                  }else{
                    this.dataSaveStudent = this.oldStudent;
                  } 

                    axios.post(Routing.generate('newinscriptionInipri_setTurno', this.dataSaveStudent ))
                        .then(response => {
                            if (response.status == 200) {
                                this.DBTurno = response.data.arrTurno;
                                $('[data-toggle="tooltip"]').tooltip();
                            }
                           
                            this.buscandoue = false;
                        })
                        .catch(e => {
                            console.log(e);
                            // this.buscando = false;
                        });

              
                },        
                doInscriptioninipri: function(swnewforeign){
                  
        
              
            if(swnewforeign == 0){
                                 this.oldStudent.swnewforeign = swnewforeign;
                                 this.dataSaveStudent = this.oldStudent;
                               }else{
                                 this.dataNewStudent.swnewforeign = swnewforeign;
                                 this.dataSaveStudent = this.dataNewStudent;
                               }
           if(this.dataSaveStudent.generoId == '') {
                              Swal.fire(
                              'Campo Género requerido',
                              'Debe seleccionar Género',
                              'warning'
                              );
                              return;
                          }
           if (this.dataSaveStudent.paisId == '') {
                              Swal.fire(
                              'Campo Pais requerido',
                              'Debe debe seleccinar un Pais',
                              'warning'
                              );
                              return;
                          }
           if(this.dataSaveStudent.paisId == 1){
            if(typeof this.dataSaveStudent.lugarNacTipoId ==='undefined' ){
              Swal.fire(
                                'Campo Departamento requerido',
                                'Debe seleccionar un Departamento',
                                'warning'
                                );
                                return;
            }

             if(typeof this.dataSaveStudent.lugarProvNacTipoId ==='undefined' ){
                                      Swal.fire(
                                      'Campo Provincia requerido',
                                      'Debe seleccionar una Provincia',
                                      'warning'
                                      );
                                      return;
                              }
            if(this.dataSaveStudent.localidad =='' ){
                                      Swal.fire(
                                      'Campo Localidad requerido',
                                      'Debe registrar la localidad',
                                      'warning'
                                      );
                                      return;
                              }


          }
           if (this.dataSaveStudent.nivelId == '') {
                              Swal.fire(
                              'Campo Nivel requerido',
                              'Debe seleccionar un Nivel',
                              'warning'
                              );
                              return;
                          }
           if (this.dataSaveStudent.gradoId == '') {
                              Swal.fire(
                              'Campo Grado requerido',
                              'Debe seleccionar un Grado',
                              'warning'
                              );
                              return;
                          }
           if (this.dataSaveStudent.paraleloId == '') {
                              Swal.fire(
                              'Campo Paralelo requerido',
                              'Debe seleccionar un Paralelo',
                              'warning'
                              );
                              return;
                          }
           if (this.dataSaveStudent.turnoId == '') {
                              Swal.fire(
                              'Campo Turno requerido',
                              'Debe seleccionar un Turno',
                              'warning'
                              );
                              return;
                          }
 
                /*validate the file attached*/
            if(this.allowwithoutci){
                    if (typeof this.informe != 'object') {
                        Swal.fire(
                        'Adjuntar Documento',
                        'Debe adjuntar el CERTIFICADO DE NACIMIENTO para ralizar la inscripción, puede ser un archivo de imagen o PDF',
                        'warning'
                        );
                        return;
                    }
                 }
                  Swal.fire({
                        title: 'Realizar Inscripción?',
                        text: "esta seguro de realizar la Inscripción",
                        type: 'question',
                        showCancelButton: true,
                        confirmButtonColor: '#3085d6',
                        cancelButtonColor: '#d33',
                        confirmButtonText: 'Si, proceder',
                        cancelButtonText: 'Cancelar'
                    }).then((result) => {
                      if (result.value) {

                      //  if(swnewforeign == 0){
                      //    this.oldStudent.swnewforeign = swnewforeign;
                      //    this.dataSaveStudent = this.oldStudent;
                      //  }else{
                      //    this.dataNewStudent.swnewforeign = swnewforeign;
                      //    this.dataSaveStudent = this.dataNewStudent;
                      //  }                       
              this.state.isSending = true; 
                        var data = new FormData();
                            data.append('datos', JSON.stringify(this.dataSaveStudent));
                            data.append('informe', this.informe);

                      axios.post(Routing.generate('newinscriptionInipri_doInscriptioninipri'), data )
                          .then(response => {
                              if (response.status == 200) {
                                  this.DBNewStudent = response.data.arrStudent;
                                  this.DBNewInscription = response.data.arrInscription;
                  this.responseprocess=false;
                  this.swinscription=response.data.swinscription;
                  this.message=response.data.message;
                                  this.dataNewStudent = {};

                                  $('[data-toggle="tooltip"]').tooltip();
                              }
                             
                              this.buscandoue = false;
                              //this.message = false;
                              this.existStudent = false;
                              this.swoldinscription = false;
                          })
                          .catch(e => {
                              console.log(e);
                              // this.buscando = false;
                          });
                      }
                    })

              
                },
                // copyfecnac: function(){
                //  console.log(this.dataNewStudent.fecnacfind);
                //  return;
                // },

                customFormatter(date) {
            return moment(date).format('l');
          },
                               



                getImage: function(event){
                    var informe = event.target.files[0];
                    var allowedExtensions = /(.jpg|.jpeg|.png|.gif|.pdf)$/i;
                    if(!allowedExtensions.exec(event.target.value)){
                        event.target.value = '';
                        Swal.fire(
                              'Archivo incorrecto!',
                              'El archivo adjunto debe ser una imagen o un archivo pdf',
                              'warning'
                            );
                        this.informe = '';
                        return false;
                    }else{
                        var megas = (informe.size / 1024)/1024;
                        if (megas > 2) {
                            event.target.value = '';
                            Swal.fire(
                              'Tamaño no permitido!',
                              'El archivo debe tener un tamaño menor a 2MB',
                              'warning'
                            );
                            this.informe = '';
                            return false;
                        }
                    }
                    this.informe = event.target.files[0];
                },                

            },
            mounted(){
                var selector = document.getElementById("form_idfecnac");
                Inputmask("datetime",{ inputFormat: "dd-mm-yyyy", outputFormat: "mm-yyyy-dd", inputEventOnly: true}).mask(selector);
            }
        });

        $(document).ready(function(){
            $('[data-toggle="tooltip"]').tooltip();
            $("td").focus();
        });        









    </script>
{%endblock%}
