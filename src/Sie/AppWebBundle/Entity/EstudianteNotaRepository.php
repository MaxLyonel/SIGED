<?php

namespace Sie\AppWebBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * EstudianteNotaRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class EstudianteNotaRepository extends EntityRepository
{
    public function getArrayNotas($idInscripcion) {
        /*$qb = $this->getEntityManager()->createQueryBuilder();
        $qb
                ->select('e.id, e.carnetIdentidad,e.complemento,e.codigoRude, e.paterno, e.materno, e.nombre, g.id as generoId, g.genero, e.fechaNacimiento, nt.nivel,gt.grado,pt.paralelo,tt.turno,ptp.pais,ltd.lugar,ltp.lugar, e.localidadNac, emt.estadomatricula,emt.id as estadomatriculaId, ei.id as eInsId')
                ->from('SieAppWebBundle:Institucioneducativa', 'ie')
                ->leftjoin('SieAppWebBundle:InstitucioneducativaCurso', 'iec', 'WITH', 'ie.id = iec.institucioneducativa')
                ->leftjoin('SieAppWebBundle:EstudianteInscripcion', 'ei', 'WITH', 'iec.id = ei.institucioneducativaCurso ')
                ->leftjoin('SieAppWebBundle:Estudiante', 'e', 'WITH', 'ei.estudiante = e.id')
                ->leftjoin('SieAppWebBundle:NivelTipo', 'nt', 'WITH', 'iec.nivelTipo = nt.id')
                ->leftjoin('SieAppWebBundle:GradoTipo', 'gt', 'WITH', 'iec.gradoTipo = gt.id')
                ->leftJoin('SieAppWebBundle:ParaleloTipo', 'pt', 'WITH', 'iec.paraleloTipo = pt.id')
                ->leftjoin('SieAppWebBundle:TurnoTipo', 'tt', 'WITH', 'iec.turnoTipo = tt.id')
                ->leftjoin('SieAppWebBundle:PaisTipo', 'ptp', 'WITH', 'e.paisTipo = ptp.id')
                ->leftjoin('SieAppWebBundle:LugarTipo', 'ltd', 'WITH', 'e.lugarNacTipo = ltd.id')
                ->leftjoin('SieAppWebBundle:LugarTipo', 'ltp', 'WITH', 'e.lugarProvNacTipo = ltp.id')
                ->leftjoin('SieAppWebBundle:generoTipo', 'g', 'WITH', 'e.generoTipo = g.id')
                ->leftjoin('SieAppWebBundle:EstadomatriculaTipo', 'emt', 'WITH', 'ei.estadomatriculaTipo = emt.id')
                ->where('ie.id = :sie')
                ->andwhere('iec.gestionTipo = :gestion')
                ->andwhere('iec.nivelTipo = :nivel')
                ->andwhere('iec.gradoTipo = :grado')
                ->andwhere('iec.paraleloTipo = :paralelo')
                ->andwhere('iec.turnoTipo = :turno')
                ->setParameter('sie', $sie)
                ->setParameter('gestion', $gestion)
                ->setParameter('nivel', $nivel)
                ->setParameter('grado', $grado)
                ->setParameter('paralelo', $paralelo)
                ->setParameter('turno', $turno)
                ->orderBy('e.paterno, e.materno')
        ;
        return $qb->getQuery()->getResult();*/
        $em = $GLOBALS['kernel']->getContainer()->get('doctrine')->getManager();
        $inscripcion = $em->getRepository('SieAppWebBundle:EstudianteInscripcion')->find($idInscripcion);
        $nivel = $inscripcion->getInstitucioneducativaCurso()->getNivelTipo()->getId();
        $sie = $inscripcion->getInstitucioneducativaCurso()->getInstitucioneducativa()->getId();
        $gestion = $inscripcion->getInstitucioneducativaCurso()->getGestionTipo()->getId();

        $operativo = $em->getRepository('SieAppWebBundle:Estudiante')->getOperativoToCollege($sie,$gestion)-1;
        /*
        * Solo para gestiones 2016 para adelante
        */
        $conArea = false;

        vuelve:

        if($conArea == true){
            // Obtenemos las areas o campos del estudiante
            $asignaturas = $em->createQueryBuilder()
                        ->select('at.id, at.area, asit.id as asignaturaId, asit.asignatura, ea.id as estAsigId')
                        ->from('SieAppWebBundle:EstudianteAsignatura','ea')
                        ->innerJoin('SieAppWebBundle:EstudianteInscripcion','ei','WITH','ea.estudianteInscripcion = ei.id')
                        ->innerJoin('SieAppWebBundle:InstitucioneducativaCursoOferta','ieco','WITH','ea.institucioneducativaCursoOferta = ieco.id')
                        ->innerJoin('SieAppWebBundle:AsignaturaTipo','asit','WITH','ieco.asignaturaTipo = asit.id')
                        ->innerJoin('SieAppWebBundle:AreaTipo','at','WITH','asit.areaTipo = at.id')
                        ->groupBy('at.id, at.area, asit.id, asit.asignatura, ea.id')
                        ->orderBy('at.id','ASC')
                        ->addOrderBy('asit.id','ASC')
                        ->where('ei.id = :idInscripcion')
                        ->setParameter('idInscripcion',$idInscripcion)
                        ->getQuery()
                        ->getResult();
        }else{
            // Obtenemos las asigganturas sin areas o campos del estudiante
            $asignaturas = $em->createQueryBuilder()
                        ->select('asit.id as asignaturaId, asit.asignatura, ea.id as estAsigId')
                        ->from('SieAppWebBundle:EstudianteAsignatura','ea')
                        ->innerJoin('SieAppWebBundle:EstudianteInscripcion','ei','WITH','ea.estudianteInscripcion = ei.id')
                        ->innerJoin('SieAppWebBundle:InstitucioneducativaCursoOferta','ieco','WITH','ea.institucioneducativaCursoOferta = ieco.id')
                        ->innerJoin('SieAppWebBundle:AsignaturaTipo','asit','WITH','ieco.asignaturaTipo = asit.id')
                        ->groupBy('asit.id, asit.asignatura, ea.id')
                        ->orderBy('asit.id','ASC')
                        ->where('ei.id = :idInscripcion')
                        ->setParameter('idInscripcion',$idInscripcion)
                        ->getQuery()
                        ->getResult();
        }

        // Verificamos si el estudiante tiene las mismas materias de curso oferta
        $cursoOferta = $em->getRepository('SieAppWebBundle:InstitucioneducativaCursoOferta')->findBy(array('insitucioneducativaCurso'=>$inscripcion->getInstitucioneducativaCurso()->getId()));

        $arrayAsignaturasEstudiante = array();
        foreach ($asignaturas as $a) {
            $arrayAsignaturasEstudiante[] = $a['asignaturaId'];
        }
        //dump($arrayAsignaturasEstudiante);die;
        $nuevaArea = false;
        foreach ($cursoOferta as $co) {
            if(!in_array($co->getAsignaturaTipo()->getId(), $arrayAsignaturasEstudiante)){
                // Reiniciamos el id Seq
                $query = $em->getConnection()->prepare("select * from sp_reinicia_secuencia('estudiante_asignatura');")->execute();
                // Si no existe la asignatura, registramos la asignatura para el estudiante
                $newEstAsig = new EstudianteAsignatura();
                $newEstAsig->setGestionTipo($em->getRepository('SieAppWebBundle:GestionTipo')->find($gestion));
                $newEstAsig->setFechaRegistro(new \DateTime('now'));
                $newEstAsig->setEstudianteInscripcion($em->getRepository('SieAppWebBundle:EstudianteInscripcion')->find($idInscripcion));
                $newEstAsig->setInstitucioneducativaCursoOferta($em->getRepository('SieAppWebBundle:InstitucioneducativaCursoOferta')->find($co->getId()));
                $em->persist($newEstAsig);
                $em->flush();
                $nuevaArea = true;
            }
        }
        // Volvemos atras si se adiciono alguna nueva materia o asignatura
        if($nuevaArea == true){
            goto vuelve;
        }

        //Armamos el array de notas
        $notasArray = array();
        $cont = 0;
        foreach ($asignaturas as $a) {
            if($conArea == true){
                $notasArray[$cont] = array('areaId'=>$a['id'],'area'=>$a['area'],'idAsignatura'=>$a['asignaturaId'],'asignatura'=>$a['asignatura']);
            }else{
                $notasArray[$cont] = array('idAsignatura'=>$a['asignaturaId'],'asignatura'=>$a['asignatura']);
            }
            $asignaturasNotas = $em->createQueryBuilder()
                                ->select('en.id as idNota, nt.id as idNotaTipo, nt.notaTipo, ea.id as idEstudianteAsignatura, en.notaCuantitativa, en.notaCualitativa, at.id')
                                ->from('SieAppWebBundle:EstudianteNota','en')
                                ->innerJoin('SieAppWebBundle:EstudianteAsignatura','ea','WITH','en.estudianteAsignatura = ea.id')
                                ->innerJoin('SieAppWebBundle:InstitucioneducativaCursoOferta','ieco','WITH','ea.institucioneducativaCursoOferta = ieco.id')
                                ->innerJoin('SieAppWebBundle:AsignaturaTipo','at','WITH','ieco.asignaturaTipo = at.id')
                                ->innerJoin('SieAppWebBundle:NotaTipo','nt','with','en.notaTipo = nt.id')
                                ->orderBy('nt.id','ASC')
                                ->where('ea.id = :estAsigId')
                                ->setParameter('estAsigId',$a['estAsigId'])
                                ->getQuery()
                                ->getResult();

            for($i=1;$i<=$operativo;$i++){
                $existe = 'no';
                foreach ($asignaturasNotas as $an) {
                    if($nivel != 11 and $nivel != 1){
                        $valorNota = $an['notaCuantitativa'];
                    }else{
                        $valorNota = $an['notaCualitativa'];
                    }
                    if($i == $an['idNotaTipo']){
                        $notasArray[$cont]['notas'][] =   array(
                                                'id'=>$cont."-".$i,
                                                'idEstudianteNota'=>$an['idNota'],
                                                'nota'=>$valorNota,
                                                'idNotaTipo'=>$an['idNotaTipo'],
                                                'idEstudianteAsignatura'=>$an['idEstudianteAsignatura'],
                                                'id2'=>$a['asignaturaId'].'_'.$an['idNotaTipo']
                                            );
                        $existe = 'si';
                        break;
                    }

                }
                if($existe == 'no'){
                    if($nivel != 11 and $nivel != 1){
                        $valorNota = '';
                    }else{
                        $valorNota = '';
                    }
                    $notasArray[$cont]['notas'][] =   array(
                                                'id'=>$cont."-".$i,
                                                'idEstudianteNota'=>'nuevo',
                                                'nota'=>$valorNota,
                                                'idNotaTipo'=>$i,
                                                'idEstudianteAsignatura'=>$a['estAsigId'],
                                                'id2'=>$a['asignaturaId'].'_'.$i
                                            );
                }
            }
            if($nivel != 11 and $nivel != 1 and $operativo >= 4){
                // Para el promedio
                foreach ($asignaturasNotas as $an) {
                    $existe = 'no';
                    if($an['idNotaTipo'] == 5){
                        $notasArray[$cont]['notas'][] =   array(
                                                    'id'=>$cont."-5",
                                                    'idEstudianteNota'=>$an['idNota'],
                                                    'nota'=>$an['notaCuantitativa'],
                                                    'idNotaTipo'=>$an['idNotaTipo'],
                                                    'idEstudianteAsignatura'=>$an['idEstudianteAsignatura'],
                                                    'id2'=>$a['asignaturaId'].'_'.$an['idNotaTipo']
                                                );
                        $existe = 'si';
                        break;
                    }
                }
                if($existe == 'no'){

                    $notasArray[$cont]['notas'][] =   array(
                                                'id'=>$cont."-5",
                                                'idEstudianteNota'=>'nuevo',
                                                'nota'=>"",
                                                'idNotaTipo'=>5,
                                                'idEstudianteAsignatura'=>$a['estAsigId'],
                                                'id2'=>$a['asignaturaId'].'_5'
                                            );
                }
            }
            $cont++;
        }
        $areas = array();
        if($conArea == true){
            foreach ($notasArray as $n) {
                $areas[$n['area']][] = $n;
            }
        }else{
            $areas = $notasArray;
        }
        //dump($areas);die;
        $tipo = 'bimestre';

        /*
        * Notas cualitativas
        */
        //notas cualitativas
        $arrayCualitativas = array();

        $cualitativas = $em->getRepository('SieAppWebBundle:EstudianteNotaCualitativa')->findBy(array('estudianteInscripcion'=>$idInscripcion),array('notaTipo'=>'ASC'));
        if($nivel == 11 or $nivel == 1){
            // Para inicial
            if($operativo >= 4){
                $existe = false;
                foreach ($cualitativas as $c) {
                    if($c->getNotaTipo()->getId() == 18){
                        $arrayCualitativas[] = array('idInscripcion'=>$idInscripcion,
                                                     'idEstudianteNotaCualitativa'=>$c->getId(),
                                                     'idNotaTipo'=>$c->getNotaTipo()->getId(),
                                                     'notaCualitativa'=>$c->getNotaCualitativa(),
                                                     'notaTipo'=>$c->getNotaTipo()->getNotaTipo()
                                                    );
                        $existe = true;
                    }
                }
                if($existe == false){
                    $arrayCualitativas[] = array('idInscripcion'=>$idInscripcion,
                                                 'idEstudianteNotaCualitativa'=>'nuevo',
                                                 'idNotaTipo'=>18,
                                                 'notaCualitativa'=>'',
                                                 'notaTipo'=>'Apreciacion Final'
                                                );
                    $existe = true;
                }
            }
        }else{
            // Para primaria y secundaria
            for($i=1;$i<=$operativo;$i++){
                $existe = false;
                foreach ($cualitativas as $c) {
                    if($c->getNotaTipo()->getId() == $i){
                        $arrayCualitativas[] = array('idInscripcion'=>$idInscripcion,
                                                     'idEstudianteNotaCualitativa'=>$c->getId(),
                                                     'idNotaTipo'=>$c->getNotaTipo()->getId(),
                                                     'notaCualitativa'=>$c->getNotaCualitativa(),
                                                     'notaTipo'=>$c->getNotaTipo()->getNotaTipo()
                                                    );
                        $existe = true;
                    }
                }
                if($existe == false){
                    $arrayCualitativas[] = array('idInscripcion'=>$idInscripcion,
                                                 'idEstudianteNotaCualitativa'=>'nuevo',
                                                 'idNotaTipo'=>$i,
                                                 'notaCualitativa'=>'',
                                                 'notaTipo'=>$i.' Bimestre'
                                                );
                    $existe = true;
                }
            }
        }

        return array('notas'=>$areas,'cualitativas'=>$arrayCualitativas,'operativo'=>$operativo,'inscripcion'=>$inscripcion);

    }
}
