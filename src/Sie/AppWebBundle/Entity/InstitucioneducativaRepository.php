<?php

namespace Sie\AppWebBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * InstitucioneducativaRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class InstitucioneducativaRepository extends EntityRepository {

    /**
     * get the count of student per U. E
     * @param type $id
     * @param type $gestion
     * @return type
     */
    public function getInscriptionsPerUe($id, $gestion) {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb
                ->select('nt.nivel, gt.grado, pt.paralelo, tt.turno,count(ei.institucioneducativaCurso) as students,IDENTITY(iec.nivelTipo) as nivelId, IDENTITY(iec.gradoTipo) as gradoId, IDENTITY(iec.paraleloTipo) as paraleloId, IDENTITY(iec.turnoTipo) as turnoId')
                ->from('SieAppWebBundle:Institucioneducativa', 'ie')
                ->leftJoin('SieAppWebBundle:InstitucioneducativaCurso', 'iec', 'WITH', 'ie.id = iec.institucioneducativa')
                ->leftJoin('SieAppWebBundle:EstudianteInscripcion', 'ei', 'WITH', 'iec.id = ei.institucioneducativaCurso ')
                ->leftJoin('SieAppWebBundle:NivelTipo', 'nt', 'WITH', 'iec.nivelTipo = nt.id')
                ->leftJoin('SieAppWebBundle:GradoTipo', 'gt', 'WITH', 'iec.gradoTipo = gt.id')
                ->leftJoin('SieAppWebBundle:ParaleloTipo', 'pt', 'WITH', 'iec.paraleloTipo = pt.id')
                ->leftJoin('SieAppWebBundle:TurnoTipo', 'tt', 'WITH', 'iec.turnoTipo = tt.id')
                ->where('ie.id = :id')
                ->andwhere('iec.gestionTipo = :gestion')
                ->setParameter('id', $id)
                ->setParameter('gestion', $gestion)
                ->groupBy('nt.nivel, gt.grado, pt.paralelo, tt.turno,iec.nivelTipo, iec.gradoTipo, iec.paraleloTipo, iec.turnoTipo')
                ->orderBy('iec.nivelTipo, iec.gradoTipo, iec.paraleloTipo, iec.turnoTipo');
        return $qb->getQuery()->getResult();
    }

    /**
     * get the count of student per U. E
     * @param type $id
     * @param type $gestion
     * @return type
     */
    public function getInscriptionSegPerUe($id, $gestion) {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb
            ->select('nt.nivel, gt.grado, pt.paralelo, tt.turno,count(ei.institucioneducativaCurso) as students,IDENTITY(iec.nivelTipo) as nivelId, IDENTITY(iec.gradoTipo) as gradoId, IDENTITY(iec.paraleloTipo) as paraleloId, IDENTITY(iec.turnoTipo) as turnoId')
            ->from('SieAppWebBundle:Institucioneducativa', 'ie')
            ->leftJoin('SieAppWebBundle:InstitucioneducativaCurso', 'iec', 'WITH', 'ie.id = iec.institucioneducativa')
            ->leftJoin('SieAppWebBundle:EstudianteInscripcion', 'ei', 'WITH', 'iec.id = ei.institucioneducativaCurso ')
            ->leftJoin('SieAppWebBundle:NivelTipo', 'nt', 'WITH', 'iec.nivelTipo = nt.id')
            ->leftJoin('SieAppWebBundle:GradoTipo', 'gt', 'WITH', 'iec.gradoTipo = gt.id')
            ->leftJoin('SieAppWebBundle:ParaleloTipo', 'pt', 'WITH', 'iec.paraleloTipo = pt.id')
            ->leftJoin('SieAppWebBundle:TurnoTipo', 'tt', 'WITH', 'iec.turnoTipo = tt.id')
            ->where('ie.id = :id')
            ->andwhere('iec.gestionTipo = :gestion')
            ->andwhere('ei.estadomatriculaInicioTipo in (7,19,59,100)')
            ->setParameter('id', $id)
            ->setParameter('gestion', $gestion)
            ->groupBy('nt.nivel, gt.grado, pt.paralelo, tt.turno,iec.nivelTipo, iec.gradoTipo, iec.paraleloTipo, iec.turnoTipo')
            ->orderBy('iec.nivelTipo, iec.gradoTipo, iec.paraleloTipo, iec.turnoTipo');
        return $qb->getQuery()->getResult();
    }

    /**
     * get the list of students per course
     * @param type $sie
     * @param type $gestion
     * @param type $nivel
     * @param type $grado
     * @param type $paralelo
     * @param type $turno
     * @return return object of students per course
     */
    public function getListStudentPerCourse($sie, $gestion, $nivel, $grado, $paralelo, $turno) {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb
                ->select("e.id, e.carnetIdentidad,e.complemento,e.codigoRude, e.paterno, e.materno, e.nombre, g.id as generoId, g.genero, e.fechaNacimiento, nt.nivel,gt.grado,pt.paralelo,tt.turno, emt.estadomatricula,emt.id as estadomatriculaId, ei.id as eInsId, coalesce(eiht.horas,0) as horasPlena, coalesce(eiht.esvalido,false) as esvalidoPlena, case when eiht.id is null then false else true end as conespecialidad, case when eiht.esvalido = true then true else false end as imprimirCut")
                ->from('SieAppWebBundle:Institucioneducativa', 'ie')
                ->leftjoin('SieAppWebBundle:InstitucioneducativaCurso', 'iec', 'WITH', 'ie.id = iec.institucioneducativa')
                ->leftjoin('SieAppWebBundle:EstudianteInscripcion', 'ei', 'WITH', 'iec.id = ei.institucioneducativaCurso ')
                ->leftjoin('SieAppWebBundle:Estudiante', 'e', 'WITH', 'ei.estudiante = e.id')
                // ->leftjoin('SieAppWebBundle:EstudianteInscripcionSocioeconomicoRegular', 'eiser', 'WITH', 'ei.id = eiser.estudianteInscripcion')
                ->leftjoin('SieAppWebBundle:NivelTipo', 'nt', 'WITH', 'iec.nivelTipo = nt.id')
                ->leftjoin('SieAppWebBundle:GradoTipo', 'gt', 'WITH', 'iec.gradoTipo = gt.id')
                ->leftJoin('SieAppWebBundle:ParaleloTipo', 'pt', 'WITH', 'iec.paraleloTipo = pt.id')
                ->leftjoin('SieAppWebBundle:TurnoTipo', 'tt', 'WITH', 'iec.turnoTipo = tt.id')
                ->leftjoin('SieAppWebBundle:PaisTipo', 'ptp', 'WITH', 'e.paisTipo = ptp.id')
                ->leftjoin('SieAppWebBundle:LugarTipo', 'ltd', 'WITH', 'e.lugarNacTipo = ltd.id')
                ->leftjoin('SieAppWebBundle:LugarTipo', 'ltp', 'WITH', 'e.lugarProvNacTipo = ltp.id')
                ->leftjoin('SieAppWebBundle:generoTipo', 'g', 'WITH', 'e.generoTipo = g.id')
                ->leftjoin('SieAppWebBundle:EstadomatriculaTipo', 'emt', 'WITH', 'ei.estadomatriculaTipo = emt.id')
                ->leftjoin('SieAppWebBundle:EstudianteInscripcionHumnisticoTecnico', 'eiht', 'WITH', 'eiht.estudianteInscripcion = ei.id')
                ->where('ie.id = :sie')
                ->andwhere('iec.gestionTipo = :gestion')
                ->andwhere('iec.nivelTipo = :nivel')
                ->andwhere('iec.gradoTipo = :grado')
                ->andwhere('iec.paraleloTipo = :paralelo')
                ->andwhere('iec.turnoTipo = :turno')
                ->setParameter('sie', $sie)
                ->setParameter('gestion', $gestion)
                ->setParameter('nivel', $nivel)
                ->setParameter('grado', $grado)
                ->setParameter('paralelo', $paralelo)
                ->setParameter('turno', $turno)
                ->orderBy('e.paterno, e.materno')
        ;
        return $qb->getQuery()->getResult();
    }

    /**
     * get the list of students per course
     * @param type $sie
     * @param type $gestion
     * @param type $nivel
     * @param type $grado
     * @param type $paralelo
     * @param type $turno
     * @return return object of students per course
     */
    public function getListStudentPerCourseSeg($sie, $gestion, $nivel, $grado, $paralelo, $turno) {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb
            ->select("e.id, e.carnetIdentidad,e.complemento,e.codigoRude, e.paterno, e.materno, e.nombre, g.id as generoId, g.genero, e.fechaNacimiento, nt.nivel,gt.grado,pt.paralelo,tt.turno, emt.estadomatricula,emt.id as estadomatriculaId, ei.id as eInsId, emit.estadomatricula as seguimiento, eiser.registroFinalizado as registroFinalizado, coalesce(eiht.horas,0) as horasPlena, coalesce(eiht.esvalido,false) as esvalidoPlena, case when eiht.id is null then false else true end as conespecialidad, case when eiht.esvalido = true then true else false end as imprimirCut")
            ->from('SieAppWebBundle:Institucioneducativa', 'ie')
            ->leftjoin('SieAppWebBundle:InstitucioneducativaCurso', 'iec', 'WITH', 'ie.id = iec.institucioneducativa')
            ->leftjoin('SieAppWebBundle:EstudianteInscripcion', 'ei', 'WITH', 'iec.id = ei.institucioneducativaCurso ')
            ->leftjoin('SieAppWebBundle:Estudiante', 'e', 'WITH', 'ei.estudiante = e.id')
            ->leftjoin('SieAppWebBundle:EstudianteInscripcionSocioeconomicoRegular', 'eiser', 'WITH', 'ei.id = eiser.estudianteInscripcion')
            ->leftjoin('SieAppWebBundle:NivelTipo', 'nt', 'WITH', 'iec.nivelTipo = nt.id')
            ->leftjoin('SieAppWebBundle:GradoTipo', 'gt', 'WITH', 'iec.gradoTipo = gt.id')
            ->leftJoin('SieAppWebBundle:ParaleloTipo', 'pt', 'WITH', 'iec.paraleloTipo = pt.id')
            ->leftjoin('SieAppWebBundle:TurnoTipo', 'tt', 'WITH', 'iec.turnoTipo = tt.id')
            ->leftjoin('SieAppWebBundle:PaisTipo', 'ptp', 'WITH', 'e.paisTipo = ptp.id')
            ->leftjoin('SieAppWebBundle:LugarTipo', 'ltd', 'WITH', 'e.lugarNacTipo = ltd.id')
            ->leftjoin('SieAppWebBundle:LugarTipo', 'ltp', 'WITH', 'e.lugarProvNacTipo = ltp.id')
            ->leftjoin('SieAppWebBundle:generoTipo', 'g', 'WITH', 'e.generoTipo = g.id')
            ->leftjoin('SieAppWebBundle:EstadomatriculaTipo', 'emt', 'WITH', 'ei.estadomatriculaTipo = emt.id')
            ->leftjoin('SieAppWebBundle:EstadomatriculaTipo', 'emit', 'WITH', 'ei.estadomatriculaInicioTipo = emit.id')
            ->leftjoin('SieAppWebBundle:EstudianteInscripcionHumnisticoTecnico', 'eiht', 'WITH', 'eiht.estudianteInscripcion = ei.id')
            ->where('ie.id = :sie')
            ->andwhere('iec.gestionTipo = :gestion')
            ->andwhere('iec.nivelTipo = :nivel')
            ->andwhere('iec.gradoTipo = :grado')
            ->andwhere('iec.paraleloTipo = :paralelo')
            ->andwhere('iec.turnoTipo = :turno')
            ->andwhere('ei.estadomatriculaInicioTipo in (7,19,59,100)')
            ->setParameter('sie', $sie)
            ->setParameter('gestion', $gestion)
            ->setParameter('nivel', $nivel)
            ->setParameter('grado', $grado)
            ->setParameter('paralelo', $paralelo)
            ->setParameter('turno', $turno)
            ->orderBy('e.paterno, e.materno')
        ;
        return $qb->getQuery()->getResult();
    }

    public function getListStudentPerCourseAlter($sie, $gestion, $nivel, $ciclo, $grado, $paralelo, $turno) {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb
                ->select('e.id, e.carnetIdentidad,e.complemento,e.codigoRude, e.paterno, e.materno, e.nombre, g.id as generoId, g.genero, e.fechaNacimiento, nt.nivel,gt.grado,pt.paralelo,tt.turno,ptp.pais,ltd.lugar,ltp.lugar, e.localidadNac, emt.estadomatricula,emt.id as estadomatriculaId, ei.id as eInsId')
                ->from('SieAppWebBundle:Institucioneducativa', 'ie')
                ->leftjoin('SieAppWebBundle:InstitucioneducativaCurso', 'iec', 'WITH', 'ie.id = iec.institucioneducativa')
                ->leftjoin('SieAppWebBundle:EstudianteInscripcion', 'ei', 'WITH', 'iec.id = ei.institucioneducativaCurso ')
                ->leftjoin('SieAppWebBundle:Estudiante', 'e', 'WITH', 'ei.estudiante = e.id')
                ->leftjoin('SieAppWebBundle:NivelTipo', 'nt', 'WITH', 'iec.nivelTipo = nt.id')
                ->leftjoin('SieAppWebBundle:CicloTipo', 'ct', 'WITH', 'iec.cicloTipo = ct.id')
                ->leftjoin('SieAppWebBundle:GradoTipo', 'gt', 'WITH', 'iec.gradoTipo = gt.id')
                ->leftJoin('SieAppWebBundle:ParaleloTipo', 'pt', 'WITH', 'iec.paraleloTipo = pt.id')
                ->leftjoin('SieAppWebBundle:TurnoTipo', 'tt', 'WITH', 'iec.turnoTipo = tt.id')
                ->leftjoin('SieAppWebBundle:PaisTipo', 'ptp', 'WITH', 'e.paisTipo = ptp.id')
                ->leftjoin('SieAppWebBundle:LugarTipo', 'ltd', 'WITH', 'e.lugarNacTipo = ltd.id')
                ->leftjoin('SieAppWebBundle:LugarTipo', 'ltp', 'WITH', 'e.lugarProvNacTipo = ltp.id')
                ->leftjoin('SieAppWebBundle:generoTipo', 'g', 'WITH', 'e.generoTipo = g.id')
                ->leftjoin('SieAppWebBundle:EstadomatriculaTipo', 'emt', 'WITH', 'ei.estadomatriculaTipo = emt.id')
                ->where('ie.id = :sie')
                ->andwhere('iec.gestionTipo = :gestion')
                ->andwhere('iec.nivelTipo = :nivel')
                ->andwhere('iec.nivelTipo = :ciclo')
                ->andwhere('iec.gradoTipo = :grado')
                ->andwhere('iec.paraleloTipo = :paralelo')
                ->andwhere('iec.turnoTipo = :turno')
                ->setParameter('sie', $sie)
                ->setParameter('gestion', $gestion)
                ->setParameter('nivel', $nivel)
                ->setParameter('ciclo', $ciclo)
                ->setParameter('grado', $grado)
                ->setParameter('paralelo', $paralelo)
                ->setParameter('turno', $turno)
                ->orderBy('e.paterno, e.materno')
        ;
        return $qb->getQuery()->getResult();
    }

    /**
     * get the list of students per nivel grado genero
     * @param type $sie
     * @param type $gestion
     * @param type $nivel
     * @param type $grado
     * @param type $genero
     * @return return object of students per course
     */
    public function getListStudentPerNivelGradoGenero($sie, $gestion, $nivel, $grado, $genero) {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb
                ->select('e.id, e.carnetIdentidad,e.complemento,e.codigoRude, e.paterno, e.materno, e.nombre, g.id as generoId, g.genero, e.fechaNacimiento, nt.nivel,gt.grado,pt.paralelo,tt.turno,ptp.pais,ltd.lugar,ltp.lugar, e.localidadNac, emt.estadomatricula,emt.id as estadomatriculaId, ei.id as eInsId')
                ->from('SieAppWebBundle:Institucioneducativa', 'ie')
                ->leftjoin('SieAppWebBundle:InstitucioneducativaCurso', 'iec', 'WITH', 'ie.id = iec.institucioneducativa')
                ->leftjoin('SieAppWebBundle:EstudianteInscripcion', 'ei', 'WITH', 'iec.id = ei.institucioneducativaCurso')
                ->leftjoin('SieAppWebBundle:Estudiante', 'e', 'WITH', 'ei.estudiante = e.id')
                ->leftjoin('SieAppWebBundle:NivelTipo', 'nt', 'WITH', 'iec.nivelTipo = nt.id')
                ->leftjoin('SieAppWebBundle:GradoTipo', 'gt', 'WITH', 'iec.gradoTipo = gt.id')
                ->leftJoin('SieAppWebBundle:ParaleloTipo', 'pt', 'WITH', 'iec.paraleloTipo = pt.id')
                ->leftjoin('SieAppWebBundle:TurnoTipo', 'tt', 'WITH', 'iec.turnoTipo = tt.id')
                ->leftjoin('SieAppWebBundle:PaisTipo', 'ptp', 'WITH', 'e.paisTipo = ptp.id')
                ->leftjoin('SieAppWebBundle:LugarTipo', 'ltd', 'WITH', 'e.lugarNacTipo = ltd.id')
                ->leftjoin('SieAppWebBundle:LugarTipo', 'ltp', 'WITH', 'e.lugarProvNacTipo = ltp.id')
                ->leftjoin('SieAppWebBundle:generoTipo', 'g', 'WITH', 'e.generoTipo = g.id')
                ->leftjoin('SieAppWebBundle:EstadomatriculaTipo', 'emt', 'WITH', 'ei.estadomatriculaTipo = emt.id')
                ->where('ie.id = :sie')
                ->andwhere('iec.gestionTipo = :gestion')
                ->andwhere('iec.nivelTipo = :nivel')
                ->andwhere('iec.gradoTipo = :grado')
                ->andwhere('e.generoTipo = :genero')
                //->andwhere('emt.id = :matricula')
                ->setParameter('sie', $sie)
                ->setParameter('gestion', $gestion)
                ->setParameter('nivel', $nivel)
                ->setParameter('grado', $grado)
                ->setParameter('genero', $genero)
                //->setParameter('matricula', 4)
                ->orderBy('pt.id, e.paterno, e.materno, e.nombre')
        ;
        return $qb->getQuery()->getResult();
    }

    /**
     * get the ue tecnico humanistico info
     * @param type $id
     * @return type array ue info
     */
    public function getUeTecnicoHumanistico($id) {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb
                ->select('ie.id as idUe, ie.institucioneducativa, ct.id as idConvenio, ct.convenio, dt.id as idDependencia, dt.dependencia')
                ->from('SieAppWebBundle:Institucioneducativa', 'ie')
                ->leftjoin('SieAppWebBundle:ConvenioTipo', 'ct', 'WITH', 'ie.convenioTipo = ct.id')
                ->leftjoin('SieAppWebBundle:DependenciaTipo', 'dt', 'WITH', 'ie.dependenciaTipo = dt.id')
                ->where('ie.id = :id')
                ->setParameter('id', $id);
        //->setMaxResults(5);
        return $qb->getQuery()->getResult();
    }

    public function getCoursesTecnicoHumanistico($id, $gestion) {

        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb
                ->select('nt.nivel, gt.grado, pt.paralelo, tt.turno,count(ei.institucioneducativaCurso) as students,IDENTITY(iec.nivelTipo) as nivelId, IDENTITY(iec.gradoTipo) as gradoId, IDENTITY(iec.paraleloTipo) as paraleloId, IDENTITY(iec.turnoTipo) as turnoId')
                ->from('SieAppWebBundle:Institucioneducativa', 'ie')
                ->leftJoin('SieAppWebBundle:InstitucioneducativaCurso', 'iec', 'WITH', 'ie.id = iec.institucioneducativa')
                ->leftJoin('SieAppWebBundle:EstudianteInscripcion', 'ei', 'WITH', 'iec.id = ei.institucioneducativaCurso')
                ->leftJoin('SieAppWebBundle:NivelTipo', 'nt', 'WITH', 'iec.nivelTipo = nt.id')
                ->leftJoin('SieAppWebBundle:GradoTipo', 'gt', 'WITH', 'iec.gradoTipo = gt.id')
                ->leftJoin('SieAppWebBundle:ParaleloTipo', 'pt', 'WITH', 'iec.paraleloTipo = pt.id')
                ->leftJoin('SieAppWebBundle:TurnoTipo', 'tt', 'WITH', 'iec.turnoTipo = tt.id')
                ->where('ie.id = :id')
                ->andwhere('iec.gestionTipo = :gestion')
                ->andwhere('iec.nivelTipo = :nivel')
                ->andwhere('iec.gradoTipo = :grado')
                ->setParameter('id', $id)
                ->setParameter('gestion', $gestion)
                ->setParameter('nivel', '13')
                ->setParameter('grado', '6')
                ->groupBy('nt.nivel, gt.grado, pt.paralelo, tt.turno,iec.nivelTipo, iec.gradoTipo, iec.paraleloTipo, iec.turnoTipo')
                ->orderBy('iec.nivelTipo, iec.gradoTipo, iec.paraleloTipo, iec.turnoTipo');
        return $qb->getQuery()->getResult();
    }

    /**
     * get students of ue tecnico humanisticos
     * @param type $sie
     * @param type $gestion
     * @return type array students
     */
    public function getStudentTecnicoHumanistico($sie, $gestion, $nivel, $grado, $paralelo) {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb
                ->select('e.paterno', ' e.materno', 'e.nombre', 'e.codigoRude', 'e.fechaNacimiento', 'ie.id as insteduId', 'e.id as studentId', 'ei.id as idIns')
                ->from('SieAppWebBundle:Institucioneducativa', 'ie')
                ->leftjoin('SieAppWebBundle:InstitucioneducativaCurso', 'iec', 'WITH', 'ie.id = iec.institucioneducativa')
                ->leftjoin('SieAppWebBundle:EstudianteInscripcion', 'ei', 'WITH', 'iec.id = ei.institucioneducativaCurso')
                ->leftjoin('SieAppWebBundle:Estudiante', 'e', 'WITH', 'ei.estudiante=e.id')
                ->where('ie.id = :sie')
                ->andwhere('iec.gestionTipo = :gestion')
                ->andwhere('iec.nivelTipo = :nivel')
                ->andwhere('iec.gradoTipo = :grado')
                ->andwhere('iec.paraleloTipo = :paralelo')
                ->setParameter('sie', $sie)
                ->setParameter('gestion', $gestion)
                ->setParameter('nivel', $nivel)
                ->setParameter('grado', $grado)
                ->setParameter('paralelo', $paralelo)
                ->orderBy('e.paterno', 'ASC')
        ;
        return $qb->getQuery()->getResult();
    }

    public function getCoursesPerUe($id, $gestion) {

        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb
                ->select('ie.id', 'nt.nivel, gt.grado, pt.paralelo, tt.turno,count(ei.institucioneducativaCurso) as students,IDENTITY(iec.nivelTipo) as nivelId, IDENTITY(iec.cicloTipo) as cicloId, IDENTITY(iec.gradoTipo) as gradoId, IDENTITY(iec.paraleloTipo) as paraleloId, IDENTITY(iec.turnoTipo) as turnoId')
                ->from('SieAppWebBundle:Institucioneducativa', 'ie')
                ->leftJoin('SieAppWebBundle:InstitucioneducativaCurso', 'iec', 'WITH', 'ie.id = iec.institucioneducativa')
                ->leftJoin('SieAppWebBundle:EstudianteInscripcion', 'ei', 'WITH', 'iec.id = ei.institucioneducativaCurso')
                ->leftJoin('SieAppWebBundle:NivelTipo', 'nt', 'WITH', 'iec.nivelTipo = nt.id')
                ->leftJoin('SieAppWebBundle:GradoTipo', 'gt', 'WITH', 'iec.gradoTipo = gt.id')
                ->leftJoin('SieAppWebBundle:ParaleloTipo', 'pt', 'WITH', 'iec.paraleloTipo = pt.id')
                ->leftJoin('SieAppWebBundle:TurnoTipo', 'tt', 'WITH', 'iec.turnoTipo = tt.id')
                ->where('ie.id = :id')
                ->andwhere('iec.gestionTipo = :gestion')
                ->setParameter('id', $id)
                ->setParameter('gestion', $gestion)
                ->groupBy('ie.id,nt.nivel, gt.grado, pt.paralelo, tt.turno,iec.nivelTipo,iec.cicloTipo, iec.gradoTipo, iec.paraleloTipo, iec.turnoTipo')
                ->orderBy('iec.nivelTipo, iec.gradoTipo, iec.paraleloTipo, iec.turnoTipo');
        return $qb->getQuery()->getResult();
    }

    /**
     * get info about the UE
     * @param type $id
     * @return type array all info UE
     */
    public function getUnidadEducativaInfo($id) {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb
                ->select('i.id as ueId, i.institucioneducativa,IDENTITY(i.orgcurricularTipo) as orgcurricularTipo,
                IDENTITY(i.institucioneducativaTipo) as tipoUe, lt.lugar, dt.dependencia, IDENTITY(jg.distritoTipo) as distritoTipoId ')
                ->from('SieAppWebBundle:Institucioneducativa', 'i')
                ->leftJoin('SieAppWebBundle:JurisdiccionGeografica', 'jg', 'WITH', 'i.leJuridicciongeografica = jg.id')
                ->leftJoin('SieAppWebBundle:DependenciaTipo', 'dt', 'WITH', 'i.dependenciaTipo = dt.id')
                ->leftJoin('SieAppWebBundle:LugarTipo', 'lt', 'WITH', 'jg.lugarTipoIdLocalidad2012 = lt.id')
                ->where('i.id = :id')
                ->setParameter('id', $id)
        ;
        return $qb->getQuery()->getResult();
    }

    /*
     * select *
      from institucioneducativa i
      left join upload_file_control uf on (i.id = uf.cod_ue)
      where uf.distrito = '2085'
     */

    public function getFilesUploadByDistrito($id) {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb
                ->select('i.id, i.institucioneducativa, uf.bimestre, uf.operativo,uf.estadoFile, uf.gestion, uf.distrito, uf.path, uf.dateUpload')
                ->from('SieAppWebBundle:Institucioneducativa', 'i')
                ->leftjoin('SieAppWebBundle:UploadFileControl', 'uf', 'WITH', 'i.id = uf.codUe')
                ->where('uf.distrito = :id')
                ->setParameter('id', $id)
                ->orderby('uf.dateUpload')
        ;
        return $qb->getQuery()->getResult();
    }

    /*
     * select *
      from institucioneducativa i
      left join upload_file_control uf on (i.id = uf.cod_ue)
      where uf.distrito = '2085'
     */

    public function getFilesUploadByDistritoAndOperativo($data) {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb
                ->select('i.id, i.institucioneducativa, uf.bimestre, uf.operativo,uf.estadoFile, uf.gestion, uf.distrito, uf.path, uf.dateUpload')
                ->from('SieAppWebBundle:Institucioneducativa', 'i')
                ->leftjoin('SieAppWebBundle:UploadFileControl', 'uf', 'WITH', 'i.id = uf.codUe')
                ->where('uf.distrito = :id')
                ->andwhere('uf.operativo = :operativo')
                ->andwhere('uf.gestion = :gestion')
                ->setParameter('id', $data['distrito'])
                ->setParameter('operativo', $data['operativo'])
                ->setParameter('gestion', $data['gestion'])
                ->orderby('uf.dateUpload')
        ;
        return $qb->getQuery()->getResult();
    }
    /**
     * getFilesUploadByDistrito description by UE
     * @param  [type] $id [description]
     * @return [type]     [description]
     */
    public function getFilesUploadByUnidadEducativa($id) {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb
                ->select('i.id, i.institucioneducativa, uf.bimestre, uf.operativo,uf.estadoFile, uf.gestion, uf.distrito, uf.path, uf.dateUpload')
                ->from('SieAppWebBundle:Institucioneducativa', 'i')
                ->leftjoin('SieAppWebBundle:UploadFileControl', 'uf', 'WITH', 'i.id = uf.codUe')
                ->where('i.id = :id')
                ->setParameter('id', $id)
                ->orderby('uf.dateUpload')
        ;
        return $qb->getQuery()->getResult();
    }

    /**
     * get the files uploads by UE
     * @param type $id
     * @return type
     */
    public function getFilesUploadByUe($sie, $gestion) {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb
                ->select('i.id, i.institucioneducativa, uf.bimestre, uf.operativo,uf.estadoFile, uf.gestion, uf.distrito, uf.path, uf.dateUpload')
                ->from('SieAppWebBundle:Institucioneducativa', 'i')
                ->leftjoin('SieAppWebBundle:UploadFileControl', 'uf', 'WITH', 'i.id = uf.codUe')
                ->where('uf.codUe = :sie')
                ->andwhere('uf.gestion = :gestion')
                ->setParameter('sie', $sie)
                ->setParameter('gestion', $gestion)
                ->orderby('uf.dateUpload')
        ;
        return $qb->getQuery()->getResult();
    }

    public function getNivelBySieAndGestion($sie, $gestion) {

        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb
                ->select('IDENTITY(iec.nivelTipo) as nivelTipo, nt.nivel')
                ->from('SieAppWebBundle:InstitucioneducativaCurso', 'iec')
                ->leftjoin('SieAppWebBundle:NivelTipo', 'nt', 'WITH', 'iec.nivelTipo= nt.id')
                ->where('iec.institucioneducativa = :sie')
                ->andwhere('iec.gestionTipo = :gestion')
                ->setParameter('sie', $sie)
                ->setParameter('gestion', $gestion)
                ->distinct()
                ->orderBy('iec.nivelTipo', 'ASC')
        ;
        return $qb->getQuery()->getResult();
    }

    public function getGradolBySieAndGestion($sie, $nivel, $gestion) {

        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb
                ->select('IDENTITY(iec.gradoTipo) as gradoTipo, gt.grado')
                ->from('SieAppWebBundle:InstitucioneducativaCurso', 'iec')
                ->leftjoin('SieAppWebBundle:GradoTipo', 'gt', 'WITH', 'iec.gradoTipo= gt.id')
                ->where('iec.institucioneducativa = :sie')
                ->andwhere('iec.gestionTipo = :gestion')
                ->andwhere('iec.nivelTipo = :nivel')
                ->setParameter('sie', $sie)
                ->setParameter('gestion', $gestion)
                ->setParameter('nivel', $nivel)
                ->distinct()
                ->orderBy('iec.gradoTipo', 'ASC')
        ;
        return $qb->getQuery()->getResult();
    }

    public function getParaleloBySieAndGestion($sie, $nivel, $grado, $gestion) {

        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb
                ->select('IDENTITY(iec.paraleloTipo) as paraleloTipo, pt.paralelo')
                ->from('SieAppWebBundle:InstitucioneducativaCurso', 'iec')
                ->leftjoin('SieAppWebBundle:ParaleloTipo', 'pt', 'WITH', 'iec.paraleloTipo= pt.id')
                ->where('iec.institucioneducativa = :sie')
                ->andwhere('iec.gestionTipo = :gestion')
                ->andwhere('iec.nivelTipo = :nivel')
                ->andwhere('iec.gradoTipo = :grado')
                ->setParameter('sie', $sie)
                ->setParameter('gestion', $gestion)
                ->setParameter('nivel', $nivel)
                ->setParameter('grado', $grado)
                ->distinct()
                ->orderBy('iec.paraleloTipo', 'ASC')
        ;
        return $qb->getQuery()->getResult();
    }

    public function getTurnoBySieAndGestion($sie, $nivel, $grado, $paralelo, $gestion) {

        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb
                ->select('IDENTITY(iec.turnoTipo) as turnoTipo, tt.turno')
                ->from('SieAppWebBundle:InstitucioneducativaCurso', 'iec')
                ->leftjoin('SieAppWebBundle:TurnoTipo', 'tt', 'WITH', 'iec.turnoTipo= tt.id')
                ->where('iec.institucioneducativa = :sie')
                ->andwhere('iec.gestionTipo = :gestion')
                ->andwhere('iec.nivelTipo = :nivel')
                ->andwhere('iec.gradoTipo = :grado')
                ->andwhere('iec.paraleloTipo = :paralelo')
                ->setParameter('sie', $sie)
                ->setParameter('gestion', $gestion)
                ->setParameter('nivel', $nivel)
                ->setParameter('grado', $grado)
                ->setParameter('paralelo', $paralelo)
                ->distinct()
                ->orderBy('iec.turnoTipo', 'ASC')
        ;
        return $qb->getQuery()->getResult();
    }

    public function getStudentsBySieAndGestion($sie, $nivel, $grado, $paralelo, $turno, $gestion) {

        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb
                ->select('iec.id as iecId,ei.id as studentInscId,e.id as studentId,e.carnetIdentidad, e.codigoRude,e.paterno, e.materno,e.nombre, e.fechaNacimiento')
                ->from('SieAppWebBundle:InstitucioneducativaCurso', 'iec')
                ->leftjoin('SieAppWebBundle:EstudianteInscripcion', 'ei', 'WITH', 'ei.institucioneducativaCurso= iec.id')
                ->leftjoin('SieAppWebBundle:Estudiante', 'e', 'WITH', 'e.id = ei.estudiante')
                ->where('iec.institucioneducativa = :sie')
                ->andwhere('iec.gestionTipo = :gestion')
                ->andwhere('iec.nivelTipo = :nivel')
                ->andwhere('iec.gradoTipo = :grado')
                ->andwhere('iec.paraleloTipo = :paralelo')
                ->andwhere('iec.turnoTipo = :turno')
                ->setParameter('sie', $sie)
                ->setParameter('gestion', $gestion)
                ->setParameter('nivel', $nivel)
                ->setParameter('grado', $grado)
                ->setParameter('paralelo', $paralelo)
                ->setParameter('turno', $turno)
                //->distinct()
                ->orderBy('e.paterno', 'ASC')
        ;
        return $qb->getQuery()->getResult();
    }

    public function getTurnosBySieAndGestion($sie, $nivel, $gestion) {

        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb
                ->select('IDENTITY(iec.nivelTipo) as nivelTipo, nt.nivel, IDENTITY(iec.turnoTipo) as turnoTipo, tt.turno')
                ->from('SieAppWebBundle:InstitucioneducativaCurso', 'iec')
                ->leftjoin('SieAppWebBundle:TurnoTipo', 'tt', 'WITH', 'iec.turnoTipo= tt.id')
                ->leftjoin('SieAppWebBundle:NivelTipo', 'nt', 'WITH', 'iec.nivelTipo= nt.id')
                ->where('iec.institucioneducativa = :sie')
                ->andwhere('iec.gestionTipo = :gestion')
                ->andwhere('iec.nivelTipo = :nivel')
                ->setParameter('sie', $sie)
                ->setParameter('gestion', $gestion)
                ->setParameter('nivel', $nivel)
                ->distinct()
                ->orderBy('iec.turnoTipo', 'ASC')
        ;
        return $qb->getQuery()->getResult();
    }

    public function getParalelosBySieAndGestion($sie, $nivel, $gestion, $turno) {

        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb
                ->select('iec.id as iecId,IDENTITY(iec.gradoTipo) as gradoTipo,IDENTITY(iec.cicloTipo) as cicloTipo, gt.grado, IDENTITY(iec.paraleloTipo) as paraleloTipo, pt.paralelo')
                ->from('SieAppWebBundle:InstitucioneducativaCurso', 'iec')
                ->leftjoin('SieAppWebBundle:GradoTipo', 'gt', 'WITH', 'iec.gradoTipo= gt.id')
                ->leftjoin('SieAppWebBundle:ParaleloTipo', 'pt', 'WITH', 'iec.paraleloTipo= pt.id')
                ->where('iec.institucioneducativa = :sie')
                ->andwhere('iec.gestionTipo = :gestion')
                ->andwhere('iec.nivelTipo = :nivel')
                ->andWhere('iec.turnoTipo = :turno')
                ->setParameter('sie', $sie)
                ->setParameter('gestion', $gestion)
                ->setParameter('nivel', $nivel)
                ->setParameter('turno', $turno)
                ->distinct()
                ->orderBy('iec.gradoTipo, iec.paraleloTipo', 'ASC')
        ;
        return $qb->getQuery()->getResult();
    }

    public function getGestionBySie($sie) {

        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb
                ->select('IDENTITY(iec.gestionTipo) as gestionTipo')
                ->from('SieAppWebBundle:InstitucioneducativaCurso', 'iec')
                ->where('iec.institucioneducativa = :sie')
                ->setParameter('sie', $sie)
                ->distinct()
                ->orderBy('iec.gestionTipo', 'ASC')
        ;
        return $qb->getQuery()->getResult();
    }

    public function getTurnoBySieInfo($sie, $nivel, $turno, $grado, $gestion) {

        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb
                ->select('IDENTITY(iec.turnoTipo) as turnoTipo, tt.turno')
                ->from('SieAppWebBundle:InstitucioneducativaCurso', 'iec')
                ->leftjoin('SieAppWebBundle:Turnotipo', 'tt', 'WITH', 'iec.turnoTipo = tt.id')
                ->where('iec.institucioneducativa = :sie')
                ->andwhere('iec.nivelTipo = :nivel')
                ->andwhere('iec.gradoTipo = :grado')
                ->andWhere('iec.turnoTipo = :turno')
                ->andwhere('iec.gestionTipo = :gestion')
                ->setParameter('sie', $sie)
                ->setParameter('nivel', $nivel)
                ->setParameter('grado', $grado)
                ->setParameter('turno', $turno)
                ->setParameter('gestion', $gestion)
                ->distinct()
                ->orderBy('iec.turnoTipo', 'ASC')
        ;
        return $qb->getQuery()->getResult();
    }

    public function getInfoUeducativaBySieGestion($sie, $gestion) {
        $qb = $this->getEntityMAnager()->createQueryBuilder();
        $qb
                ->select('tt.id as turnoId, nt.id as nivelId, gt.id as gradoId, pt.id as paraleloId, tt.turno, nt.nivel, gt.grado, pt.paralelo, IDENTITY(iec.cicloTipo) as cicloTipoId, iec.id as iecId ')
                ->from('SieAppWebBundle:InstitucioneducativaCurso', 'iec')
                ->leftJoin('SieAppWebBundle:TurnoTipo', 'tt', 'WITH', 'iec.turnoTipo = tt.id')
                ->leftJoin('SieAppWebBundle:NivelTipo', 'nt', 'WITH', 'iec.nivelTipo = nt.id')
                ->leftJoin('SieAppWebBundle:GradoTipo', 'gt', 'WITH', 'iec.gradoTipo = gt.id')
                ->leftJoin('SieAppWebBundle:ParaleloTipo', 'pt', 'WITH', 'iec.paraleloTipo = pt.id')
                ->where('iec.institucioneducativa = :sie')
                ->andwhere('iec.gestionTipo =  :gestion')
                ->setParameter('sie', $sie)
                ->setParameter('gestion', $gestion)
                //->distinct()
                ->groupBy('tt.id, nt.id, gt.id, pt.id, iec.cicloTipo, iec.id')
                ->orderBy('tt.id, nt.id, gt.id, pt.id, iec.cicloTipo, iec.id')


        ;
        return $qb->getQuery()->getResult();
    }
    public function getInfoUeducativaEspecialBySieGestion($sie, $gestion) {
        $qb = $this->getEntityMAnager()->createQueryBuilder();
        $qb
                ->select('tt.id as turnoId, nt.id as nivelId, gt.id as gradoId, pt.id as paraleloId, tt.turno,
                          nt.nivel, gt.grado, pt.paralelo, IDENTITY(iec.cicloTipo) as cicloTipoId, eat.id as areaEspecialId,
                          IDENTITY(iece.especialProgramaTipo) as especialProgramaTipo, ept.programa as programa,
                          IDENTITY(iece.especialServicioTipo) as especialServicioTipo, est.servicio as servicio,
                          iec.id as iecId, eat.areaEspecial,iece.id as ieceId, iec.lugar as iecLugar
                          ')
                ->from('SieAppWebBundle:InstitucioneducativaCurso', 'iec')
                ->leftJoin('SieAppWebBundle:InstitucioneducativaCursoEspecial', 'iece', 'WITH', 'iec.id = iece.institucioneducativaCurso')
                ->leftJoin('SieAppWebBundle:EspecialAreaTipo', 'eat', 'WITH', 'iece.especialAreaTipo = eat.id')
                ->leftJoin('SieAppWebBundle:EspecialProgramaTipo', 'ept', 'WITH', 'iece.especialProgramaTipo = ept.id')
                ->leftJoin('SieAppWebBundle:EspecialServicioTipo', 'est', 'WITH', 'iece.especialServicioTipo = est.id')
                ->leftJoin('SieAppWebBundle:TurnoTipo', 'tt', 'WITH', 'iec.turnoTipo = tt.id')
                ->leftJoin('SieAppWebBundle:NivelTipo', 'nt', 'WITH', 'iec.nivelTipo = nt.id')
                ->leftJoin('SieAppWebBundle:GradoTipo', 'gt', 'WITH', 'iec.gradoTipo = gt.id')
                ->leftJoin('SieAppWebBundle:ParaleloTipo', 'pt', 'WITH', 'iec.paraleloTipo = pt.id')
                ->where('iec.institucioneducativa = :sie')
                ->andwhere('iec.gestionTipo =  :gestion')
                ->setParameter('sie', $sie)
                ->setParameter('gestion', $gestion)
                //->distinct()
                ->groupBy('tt.id, nt.id, ept.programa, est.servicio, gt.id, pt.id, iec.cicloTipo,eat.id, iec.id,iece.id')
                //->orderBy('tt.id, nt.id,ept.programa, gt.id, pt.id, iec.cicloTipo,eat.id, iec.id,iece.id')
                ->orderBy('tt.id, eat.id, nt.id,ept.programa, est.servicio, gt.id, pt.id, iec.cicloTipo, iec.id,iece.id')


        ;
        return $qb->getQuery()->getResult();
    }

    /**
     * ge the ue's special
     * @param type $sie
     * @param type $gestion
     * @return true or false
     */
    public function getUeSpecialByGestion($sie, $gestion) {
        $qb = $this->getEntityMAnager()->createQueryBuilder();
        $qb
                ->select('iena')
                ->from('SieAppWebBundle:Institucioneducativa', 'ie')
                ->leftJoin('SieAppWebBundle:InstitucioneducativaNivelAutorizado', 'iena', 'WITH', 'ie.id = iena.institucioneducativaId')
                ->where('ie.id = :sie')
                ->andwhere('iena.gestionTipoId =  :gestion')
                ->andWhere('iena.nivelTipoId = :nivel')
                ->setParameter('sie', $sie)
                ->setParameter('gestion', $gestion)
                ->setParameter('nivel', '16')
        ;
        return $qb->getQuery()->getResult();
    }

    /**
     * get info about the UE
     * @param type $id
     * @return type array all info UE
     */
    /*

      select e.codigo_rude, e.paterno, e.materno, e.nombre, oit.observacion, iec.gestion_tipo_id
      from estudiante_inscripcion ei
      left join estudiante e on (ei.estudiante_id=e.id)
      left join estudiante_inscripcion_observacion eio on (ei.id=eio.estudiante_inscripcion_id )
      left join institucioneducativa_curso iec on (ei.institucioneducativa_curso_id= iec.id)
      left join observacion_inscripcion_tipo oit on (eio.observacion_inscripcion_tipo_id =   oit.id)
      where iec.institucioneducativa_id='40730005 'and iec.gestion_tipo_id='2016' and eio.observacion_inscripcion_tipo_id >=4 */
    public function getObservationUnidadEducativaInfo($data) {

        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb
                ->select('e.codigoRude, e.paterno, e.materno, e.nombre, oit.observacion, IDENTITY(iec.gestionTipo) as gestionTipo')
                ->from('SieAppWebBundle:EstudianteInscripcion', 'ei')
                ->leftJoin('SieAppWebBundle:Estudiante', 'e', 'WITH', 'ei.estudiante = e.id')
                ->leftJoin('SieAppWebBundle:EstudianteInscripcionObservacion', 'eio', 'WITH', 'ei.id=eio.estudianteInscripcion')
                ->leftJoin('SieAppWebBundle:InstitucioneducativaCurso', 'iec', 'WITH', 'ei.institucioneducativaCurso =  iec.id')
                ->leftjoin('SieAppWebBundle:ObservacionInscripcionTipo', 'oit', 'WITH', 'eio.observacionInscripcionTipo = oit.id')
                ->where('iec.institucioneducativa = :sie')
                ->andWhere('iec.gestionTipo = :gestion')
                ->andWhere('eio.observacionInscripcionTipo > :obs')
                ->andWhere('eio.esactivo = :activo')
                ->setParameter('sie', $data['sie'])
                ->setParameter('gestion', $data['gestion'])
                ->setParameter('obs', '4')
                ->setParameter('activo', 't')
        ;
        return $qb->getQuery()->getResult();
    }


    /**
    * get studenst no acreditados
    **/
    /**
     * get the list of students per course
     * @param type $sie
     * @param type $gestion
     * @param type $nivel
     * @param type $grado
     * @param type $paralelo
     * @param type $turno
     * @return return object of students per course
     */
    public function getListStudentPerCourseNoAcreditados($idCurso) {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb
                ->select('e.id, e.carnetIdentidad,e.complemento,e.codigoRude, e.paterno, e.materno, e.nombre, g.id as generoId, g.genero, e.fechaNacimiento, nt.nivel,gt.grado,pt.paralelo,tt.turno,ptp.pais,ltd.lugar,ltp.lugar, e.localidadNac, emt.estadomatricula,emt.id as estadomatriculaId, ei.id as eInsId')
                ->from('SieAppWebBundle:Institucioneducativa', 'ie')
                ->leftjoin('SieAppWebBundle:InstitucioneducativaCurso', 'iec', 'WITH', 'ie.id = iec.institucioneducativa')
                ->leftjoin('SieAppWebBundle:EstudianteInscripcion', 'ei', 'WITH', 'iec.id = ei.institucioneducativaCurso ')
                ->leftjoin('SieAppWebBundle:Estudiante', 'e', 'WITH', 'ei.estudiante = e.id')
                ->leftjoin('SieAppWebBundle:NivelTipo', 'nt', 'WITH', 'iec.nivelTipo = nt.id')
                ->leftjoin('SieAppWebBundle:GradoTipo', 'gt', 'WITH', 'iec.gradoTipo = gt.id')
                ->leftJoin('SieAppWebBundle:ParaleloTipo', 'pt', 'WITH', 'iec.paraleloTipo = pt.id')
                ->leftjoin('SieAppWebBundle:TurnoTipo', 'tt', 'WITH', 'iec.turnoTipo = tt.id')
                ->leftjoin('SieAppWebBundle:PaisTipo', 'ptp', 'WITH', 'e.paisTipo = ptp.id')
                ->leftjoin('SieAppWebBundle:LugarTipo', 'ltd', 'WITH', 'e.lugarNacTipo = ltd.id')
                ->leftjoin('SieAppWebBundle:LugarTipo', 'ltp', 'WITH', 'e.lugarProvNacTipo = ltp.id')
                ->leftjoin('SieAppWebBundle:generoTipo', 'g', 'WITH', 'e.generoTipo = g.id')
                ->leftjoin('SieAppWebBundle:EstadomatriculaTipo', 'emt', 'WITH', 'ei.estadomatriculaTipo = emt.id')
                ->where('ei.institucioneducativaCurso = :idCurso')
                ->setParameter('idCurso', $idCurso)
                ->orderBy('e.paterno, e.materno')
        ;
        //dum($qb->getQuery()->getSQL());die;
        return $qb->getQuery()->getResult();
    }

    /**
     * get the list of students special per course
     * @param type $sie
     * @param type $gestion
     * @param type $nivel
     * @param type $grado
     * @param type $paralelo
     * @param type $turno
     * @return return object of students per course
     */
    public function getListStudentPerCourseSpecial($sie, $gestion, $iecId) {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb
                ->select('e.id, eie.id as estInsEspId, ei.id as estInsId, e.carnetIdentidad,e.complemento,e.codigoRude, e.paterno, e.materno, e.nombre,e.fechaNacimiento,emt.id as estadomatriculaId,emt.estadomatricula')
                ->from('SieAppWebBundle:EstudianteInscripcionEspecial', 'eie')
                ->leftjoin('SieAppWebBundle:estudianteInscripcion', 'ei', 'WITH', 'eie.estudianteInscripcion = ei.id')
                ->leftjoin('SieAppWebBundle:EstadomatriculaTipo', 'emt', 'WITH', 'emt.id = ei.estadomatriculaTipo')
                ->leftjoin('SieAppWebBundle:Estudiante', 'e', 'WITH', 'ei.estudiante = e.id')
                ->leftjoin('SieAppWebBundle:InstitucioneducativaCursoEspecial', 'iece', 'WITH', 'eie.institucioneducativaCursoEspecial = iece.id')
                ->where('eie.institucioneducativaCursoEspecial = :iecId')
                ->setParameter('iecId', $iecId)
                ->orderBy('e.paterno, e.materno')
        ;

        return $qb->getQuery()->getResult();
    }
    public function getInfoCentroSpecial($sie) {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb
                ->select('rc')
                ->from('SieAppWebBundle:RegistroConsolidacion', 'rc')
                ->where('rc.unidadEducativa = :sie')
                ->setParameter('sie', $sie)
                ->orderBy('rc.gestion')
        ;

        return $qb->getQuery()->getResult();
    }



}
