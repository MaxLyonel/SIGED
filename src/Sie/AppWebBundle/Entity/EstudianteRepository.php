<?php

namespace Sie\AppWebBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Sie\AppWebBundle\Entity\Estudiante;
use Sie\AppWebBundle\Entity\EstudianteInscripcion;
use Sie\AppWebBundle\Entity\InstitucioneducativaCurso;

/**
 * EstudianteRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class EstudianteRepository extends EntityRepository {

    /**
     * get the student data
     * @param type $rude
     * @return type
     */
    public function findStudent2($rude) {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb
                ->select('e')
                ->from('SieAppWebBundle:Estudiante', 'e')
                ->where('e.codigoRude = :rude')
                ->setParameter('rude', $rude);

        return $qb->getQuery()->getResult();
    }

    public function findStudent1($rude) {
        return $this->getEntityManager()
                        ->createQuery(
                                'SELECT e FROM SieAppWebBundle:Estudiante e WHERE e.codigoRude = :rude '
                        )
                        ->setParameter('rude', $rude)
                        ->getResult();
    }

    public function findCurrentStudentInscription($id, $gestion) {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb
                //->select('e.id as idStudent, e.paterno, e.materno, e.nombre, e.fechaNacimiento, nt.nivel, gt.grado, pt.paralelo,tt.turno, IDENTITY(ei.estadomatriculaTipo), emt.estadomatricula, get.genero')
                ->select('e.id as idStudent,e.codigoRude, e.paterno, e.materno,e.nombre,g.genero, e.carnetIdentidad', 'e.fechaNacimiento', 'e.complemento', 'e.oficialia', 'e.libro', 'e.partida', 'e.folio', 'IDENTITY(e.generoTipo) as generoId', 'ptp.pais', '(ltd.lugar) as departamento', 'ltp.lugar as provincia', 'e.localidadNac,nt.nivel, gt.grado, pt.paralelo,tt.turno,emt.estadomatricula, IDENTITY(ei.institucioneducativaCurso) as institucioneducativaCurso, IDENTITY(iec.nivelTipo) as nivelId')
                ->from('SieAppWebBundle:Estudiante', 'e')
                ->leftJoin('SieAppWebBundle:EstudianteInscripcion', 'ei', 'WITH', 'e.id = ei.estudiante')
                ->leftjoin('SieAppWebBundle:InstitucioneducativaCurso', 'iec', 'WITH', 'ei.institucioneducativaCurso = iec.id')
                ->leftjoin('SieAppWebBundle:NivelTipo', 'nt', 'WITH', 'iec.nivelTipo = nt.id')
                ->leftJoin('SieAppWebBundle:GradoTipo', 'gt', 'WITH', 'iec.gradoTipo = gt.id')
                ->leftJoin('SieAppWebBundle:ParaleloTipo', 'pt', 'WITH', 'iec.paraleloTipo = pt.id')
                ->leftjoin('SieAppWebBundle:TurnoTipo', 'tt', 'WITH', 'iec.turnoTipo = tt.id')
                ->leftJoin('SieAppWebBundle:EstadomatriculaTipo', 'emt', 'WITH', 'ei.estadomatriculaTipo = emt.id')
                ->leftJoin('SieAppWebBundle:GeneroTipo', 'g', 'WITH', 'e.generoTipo = g.id')
                ->leftjoin('SieAppWebBundle:PaisTipo', 'ptp', 'WITH', 'e.paisTipo = ptp.id')
                ->leftjoin('SieAppWebBundle:LugarTipo', 'ltd', 'WITH', 'e.lugarNacTipo = ltd.id')
                ->leftjoin('SieAppWebBundle:LugarTipo', 'ltp', 'WITH', 'e.lugarProvNacTipo = ltp.id')
                ->where('e.id = :id')
                ->andwhere('iec.gestionTipo = :gestion')
                ->andWhere('ei.estadomatriculaTipo = :mat')
                ->setParameter('id', $id)
                ->setParameter('gestion', $gestion)
                ->setParameter('mat', '4'); //
        //->orderBy('iec.nivelId, iec.gradoId, iec.paralelo, iec.turnoId ', 'DESC');
        return $qb->getQuery()->getResult();
    }

    public function findCurrentStudentInscriptionWithOutEstado($id, $gestion) {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb
                //->select('e.id as idStudent, e.paterno, e.materno, e.nombre, e.fechaNacimiento, nt.nivel, gt.grado, pt.paralelo,tt.turno, IDENTITY(ei.estadomatriculaTipo), emt.estadomatricula, get.genero')
                ->select('e.id as idStudent,e.codigoRude, e.paterno, e.materno,e.nombre,g.genero, e.carnetIdentidad', 'e.fechaNacimiento', 'e.complemento', 'e.oficialia', 'e.libro', 'e.partida', 'e.folio', 'IDENTITY(e.generoTipo) as generoId', 'ptp.pais', '(ltd.lugar) as departamento', 'ltp.lugar as provincia', 'e.localidadNac,nt.nivel, gt.grado, pt.paralelo,tt.turno,emt.estadomatricula, IDENTITY(ei.institucioneducativaCurso) as institucioneducativaCurso, IDENTITY(iec.nivelTipo) as nivelId')
                ->from('SieAppWebBundle:Estudiante', 'e')
                ->leftJoin('SieAppWebBundle:EstudianteInscripcion', 'ei', 'WITH', 'e.id = ei.estudiante')
                ->leftjoin('SieAppWebBundle:InstitucioneducativaCurso', 'iec', 'WITH', 'ei.institucioneducativaCurso = iec.id')
                ->leftjoin('SieAppWebBundle:NivelTipo', 'nt', 'WITH', 'iec.nivelTipo = nt.id')
                ->leftJoin('SieAppWebBundle:GradoTipo', 'gt', 'WITH', 'iec.gradoTipo = gt.id')
                ->leftJoin('SieAppWebBundle:ParaleloTipo', 'pt', 'WITH', 'iec.paraleloTipo = pt.id')
                ->leftjoin('SieAppWebBundle:TurnoTipo', 'tt', 'WITH', 'iec.turnoTipo = tt.id')
                ->leftJoin('SieAppWebBundle:EstadomatriculaTipo', 'emt', 'WITH', 'ei.estadomatriculaTipo = emt.id')
                ->leftJoin('SieAppWebBundle:GeneroTipo', 'g', 'WITH', 'e.generoTipo = g.id')
                ->leftjoin('SieAppWebBundle:PaisTipo', 'ptp', 'WITH', 'e.paisTipo = ptp.id')
                ->leftjoin('SieAppWebBundle:LugarTipo', 'ltd', 'WITH', 'e.lugarNacTipo = ltd.id')
                ->leftjoin('SieAppWebBundle:LugarTipo', 'ltp', 'WITH', 'e.lugarProvNacTipo = ltp.id')
                ->where('e.id = :id')
                ->andwhere('iec.gestionTipo = :gestion')
                //->andWhere('ei.estadomatriculaTipo = :mat')
                ->setParameter('id', $id)
                ->setParameter('gestion', $gestion)
                //->setParameter('mat', '4')
                ; //
        //->orderBy('iec.nivelId, iec.gradoId, iec.paralelo, iec.turnoId ', 'DESC');
        return $qb->getQuery()->getResult();
    }


    public function getStudentsEfectivos($id, $gestion) {

        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb
                ->select('e.id as eId, ei.id as eiId, oi.observacion as ObsTipoDesc', 'eo.obs as Obs', 'oi.id as idObsTipo', 'eo.id as idObservacion', 'n.nivel as nivel', 'g.grado as grado', 'p.paralelo as paralelo', 't.turno as turno', 'em.estadomatricula as estadoMatricula', 'IDENTITY(iec.nivelTipo) as nivelId', 'IDENTITY(iec.gestionTipo) as gestion', 'IDENTITY(iec.gradoTipo) as gradoId', 'IDENTITY(iec.turnoTipo) as turnoId', 'IDENTITY(ei.estadomatriculaTipo) as estadoMatriculaId', 'IDENTITY(iec.paraleloTipo) as paraleloId', 'ei.fechaInscripcion', 'i.id as sie', 'i.institucioneducativa')
                ->from('SieAppWebBundle:Estudiante', 'e')
                ->leftjoin('SieAppWebBundle:EstudianteInscripcion', 'ei', 'WITH', 'e.id = ei.estudiante')
                ->leftjoin('SieAppWebBundle:InstitucioneducativaCurso', 'iec', 'WITH', 'ei.institucioneducativaCurso = iec.id')
                ->leftjoin('SieAppWebBundle:Institucioneducativa', 'i', 'WITH', 'iec.institucioneducativa = i.id')
                ->leftjoin('SieAppWebBundle:institucioneducativaTipo', 'it', 'WITH', 'i.institucioneducativaTipo = it.id')
                ->leftjoin('SieAppWebBundle:NivelTipo', 'n', 'WITH', 'iec.nivelTipo = n.id')
                ->leftjoin('SieAppWebBundle:GradoTipo', 'g', 'WITH', 'iec.gradoTipo = g.id')
                ->leftjoin('SieAppWebBundle:ParaleloTipo', 'p', 'WITH', 'iec.paraleloTipo = p.id')
                ->leftjoin('SieAppWebBundle:TurnoTipo', 't', 'WITH', 'iec.turnoTipo = t.id')
                ->leftJoin('SieAppWebBundle:EstadoMatriculaTipo', 'em', 'WITH', 'ei.estadomatriculaTipo = em.id')
                ->leftJoin('SieAppWebBundle:EstudianteInscripcionObservacion', 'eo', 'WITH', 'ei.id = eo.estudianteInscripcion')
                ->leftJoin('SieAppWebBundle:ObservacionInscripcionTipo', 'oi', 'WITH', 'eo.observacionInscripcionTipo = oi.id')
                ->where('e.id = :id')
                ->andwhere('iec.gestionTipo = :gestion')
                ->andwhere('it.id = :ittipo')
                //->andwhere('ei.estadomatriculaTipo = :mat')
                ->setParameter('id', $id)
                ->setParameter('gestion', $gestion)
                ->setParameter('ittipo', 1)
                //->setParameter('mat', '4')
                ->orderBy('ei.fechaInscripcion', 'DESC');


        return $qb->getQuery()->getResult();
    }

    public function getStudentsEfectivosEspecial($id, $gestion) {

        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb
                ->select('e.id as eId, ei.id as eiId, oi.observacion as ObsTipoDesc', 'eo.obs as Obs', 'oi.id as idObsTipo', 'eo.id as idObservacion', 'n.nivel as nivel', 'g.grado as grado', 'p.paralelo as paralelo', 't.turno as turno', 'em.estadomatricula as estadoMatricula', 'IDENTITY(iec.nivelTipo) as nivelId', 'IDENTITY(iec.gestionTipo) as gestion', 'IDENTITY(iec.gradoTipo) as gradoId', 'IDENTITY(iec.turnoTipo) as turnoId', 'IDENTITY(ei.estadomatriculaTipo) as estadoMatriculaId', 'IDENTITY(iec.paraleloTipo) as paraleloId', 'ei.fechaInscripcion', 'i.id as sie', 'i.institucioneducativa')
                ->from('SieAppWebBundle:Estudiante', 'e')
                ->leftjoin('SieAppWebBundle:EstudianteInscripcion', 'ei', 'WITH', 'e.id = ei.estudiante')
                ->leftjoin('SieAppWebBundle:InstitucioneducativaCurso', 'iec', 'WITH', 'ei.institucioneducativaCurso = iec.id')
                ->leftjoin('SieAppWebBundle:Institucioneducativa', 'i', 'WITH', 'iec.institucioneducativa = i.id')
                ->leftjoin('SieAppWebBundle:institucioneducativaTipo', 'it', 'WITH', 'i.institucioneducativaTipo = it.id')
                ->leftjoin('SieAppWebBundle:NivelTipo', 'n', 'WITH', 'iec.nivelTipo = n.id')
                ->leftjoin('SieAppWebBundle:GradoTipo', 'g', 'WITH', 'iec.gradoTipo = g.id')
                ->leftjoin('SieAppWebBundle:ParaleloTipo', 'p', 'WITH', 'iec.paraleloTipo = p.id')
                ->leftjoin('SieAppWebBundle:TurnoTipo', 't', 'WITH', 'iec.turnoTipo = t.id')
                ->leftJoin('SieAppWebBundle:EstadoMatriculaTipo', 'em', 'WITH', 'ei.estadomatriculaTipo = em.id')
                ->leftJoin('SieAppWebBundle:EstudianteInscripcionObservacion', 'eo', 'WITH', 'ei.id = eo.estudianteInscripcion')
                ->leftJoin('SieAppWebBundle:ObservacionInscripcionTipo', 'oi', 'WITH', 'eo.observacionInscripcionTipo = oi.id')
                ->where('e.id = :id')
                ->andwhere('iec.gestionTipo = :gestion')
                ->andwhere('it.id = :ittipo')
                //->andwhere('ei.estadomatriculaTipo = :mat')
                ->setParameter('id', $id)
                ->setParameter('gestion', $gestion)
                ->setParameter('ittipo', 4)
                //->setParameter('mat', '4')
                ->orderBy('ei.fechaInscripcion', 'DESC');


        return $qb->getQuery()->getResult();
    }    

    public function getStudentsEfectivosChange($id, $gestion) {

        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb
                ->select('e.id as eId, ei.id as eiId, oi.observacion as ObsTipoDesc', 'eo.obs as Obs', 'oi.id as idObsTipo', 'eo.id as idObservacion', 'n.nivel as nivel', 'g.grado as grado', 'p.paralelo as paralelo', 't.turno as turno', 'em.estadomatricula as estadoMatricula', 'IDENTITY(iec.nivelTipo) as nivelId', 'IDENTITY(iec.gestionTipo) as gestion', 'IDENTITY(iec.gradoTipo) as gradoId', 'IDENTITY(iec.turnoTipo) as turnoId', 'IDENTITY(ei.estadomatriculaTipo) as estadoMatriculaId', 'IDENTITY(iec.paraleloTipo) as paraleloId', 'ei.fechaInscripcion', 'i.id as sie', 'i.institucioneducativa')
                ->from('SieAppWebBundle:Estudiante', 'e')
                ->leftjoin('SieAppWebBundle:EstudianteInscripcion', 'ei', 'WITH', 'e.id = ei.estudiante')
                ->leftjoin('SieAppWebBundle:InstitucioneducativaCurso', 'iec', 'WITH', 'ei.institucioneducativaCurso = iec.id')
                ->leftjoin('SieAppWebBundle:Institucioneducativa', 'i', 'WITH', 'iec.institucioneducativa = i.id')
                ->leftjoin('SieAppWebBundle:institucioneducativaTipo', 'it', 'WITH', 'i.institucioneducativaTipo = it.id')
                ->leftjoin('SieAppWebBundle:NivelTipo', 'n', 'WITH', 'iec.nivelTipo = n.id')
                ->leftjoin('SieAppWebBundle:GradoTipo', 'g', 'WITH', 'iec.gradoTipo = g.id')
                ->leftjoin('SieAppWebBundle:ParaleloTipo', 'p', 'WITH', 'iec.paraleloTipo = p.id')
                ->leftjoin('SieAppWebBundle:TurnoTipo', 't', 'WITH', 'iec.turnoTipo = t.id')
                ->leftJoin('SieAppWebBundle:EstadoMatriculaTipo', 'em', 'WITH', 'ei.estadomatriculaTipo = em.id')
                ->leftJoin('SieAppWebBundle:EstudianteInscripcionObservacion', 'eo', 'WITH', 'ei.id = eo.estudianteInscripcion')
                ->leftJoin('SieAppWebBundle:ObservacionInscripcionTipo', 'oi', 'WITH', 'eo.observacionInscripcionTipo = oi.id')
                ->where('e.id = :id')
                ->andwhere('iec.gestionTipo = :gestion')
                ->andwhere('it.id = :ittipo')
                ->andwhere('ei.estadomatriculaTipo = :mat')
                ->setParameter('id', $id)
                ->setParameter('gestion', $gestion)
                ->setParameter('ittipo', 1)
                ->setParameter('mat', '4')
                ->orderBy('ei.fechaInscripcion', 'DESC');

        return $qb->getQuery()->getResult();
    }
    public function getStudentsEfectivosModular($id, $gestion) {

        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb
                ->select( 'ei.id as insId, emini.estadomatricula inimatricula, eo.id as idObservacion', 'n.nivel as nivel', 'g.grado as grado', 'p.paralelo as paralelo', 't.turno as turno', 'em.estadomatricula as estadoMatricula', 'IDENTITY(iec.nivelTipo) as nivelId', 'IDENTITY(iec.gestionTipo) as gestion', 'IDENTITY(iec.gradoTipo) as gradoId', 'IDENTITY(iec.turnoTipo) as turnoId', 'IDENTITY(ei.estadomatriculaTipo) as estadoMatriculaId', 'IDENTITY(iec.paraleloTipo) as paraleloId', 'ei.fechaInscripcion', 'i.id as sie', 'i.institucioneducativa')
                ->from('SieAppWebBundle:Estudiante', 'e')
                ->leftjoin('SieAppWebBundle:EstudianteInscripcion', 'ei', 'WITH', 'e.id = ei.estudiante')
                ->leftjoin('SieAppWebBundle:InstitucioneducativaCurso', 'iec', 'WITH', 'ei.institucioneducativaCurso = iec.id')
                ->leftjoin('SieAppWebBundle:Institucioneducativa', 'i', 'WITH', 'iec.institucioneducativa = i.id')
                ->leftjoin('SieAppWebBundle:NivelTipo', 'n', 'WITH', 'iec.nivelTipo = n.id')
                ->leftjoin('SieAppWebBundle:GradoTipo', 'g', 'WITH', 'iec.gradoTipo = g.id')
                ->leftjoin('SieAppWebBundle:ParaleloTipo', 'p', 'WITH', 'iec.paraleloTipo = p.id')
                ->leftjoin('SieAppWebBundle:TurnoTipo', 't', 'WITH', 'iec.turnoTipo = t.id')
                ->leftJoin('SieAppWebBundle:EstadoMatriculaTipo', 'em', 'WITH', 'ei.estadomatriculaTipo = em.id')
                ->leftJoin('SieAppWebBundle:EstadoMatriculaTipo', 'emini', 'WITH', 'ei.estadomatriculaInicioTipo= emini.id')
                ->leftJoin('SieAppWebBundle:EstudianteInscripcionObservacion', 'eo', 'WITH', 'ei.id = eo.estudianteInscripcion')
                ->where('e.id = :id')
                ->andwhere('iec.gestionTipo = :gestion')
                //->andwhere('ei.estadomatriculaTipo = :mat')
                ->setParameter('id', $id)
                ->setParameter('gestion', $gestion)
                //->setParameter('mat', '4')
                ->orderBy('ei.fechaInscripcion', 'DESC');
        return $qb->getQuery()->getResult();
    }

    public function getInfoStudentChange($data) {

        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb
                ->select('ei.id as idinscrip')
                ->from('SieAppWebBundle:Estudiante', 'e')
                ->leftjoin('SieAppWebBundle:EstudianteInscripcion', 'ei', 'WITH', 'e.id = ei.estudiante')
                ->leftjoin('SieAppWebBundle:InstitucioneducativaCurso', 'iec', 'WITH', 'ei.institucioneducativaCurso = iec.id')
                ->where('e.codigoRude = :rude')
                ->andwhere('iec.gestionTipo = :gestion')
                ->andwhere('iec.nivelTipo = :nivel')
                ->andwhere('iec.gradoTipo = :grado')
                ->andwhere('iec.paraleloTipo = :paralelo')
                ->andwhere('iec.turnoTipo = :turno')
                ->andwhere('iec.institucioneducativa = :sie')
                ->setParameter('rude', $data['codigoRude'])
                ->setParameter('gestion', $data['gestion'])
                ->setParameter('nivel', $data['nivel'])
                ->setParameter('grado', $data['grado'])
                ->setParameter('paralelo', $data['paralelo'])
                ->setParameter('turno', $data['turno'])
                ->setParameter('sie', $data['sie'])

        ;
        return $qb->getQuery()->getResult();
    }

    public function getnumberInscription($id, $gestion) {

        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb
                ->select('n.nivel as nivel', 'g.grado as grado', 'p.paralelo as paralelo', 't.turno as turno', 'em.estadomatricula as estadoMatricula', 'IDENTITY(iec.nivelTipo) as nivelId', 'IDENTITY(iec.gestionTipo) as gestion', 'IDENTITY(iec.gradoTipo) as gradoId', 'IDENTITY(iec.turnoTipo) as turnoId', 'IDENTITY(ei.estadomatriculaTipo) as estadoMatriculaId', 'IDENTITY(iec.paraleloTipo) as paraleloId', 'ei.fechaInscripcion', 'i.id as sie', 'i.institucioneducativa')
                ->from('SieAppWebBundle:Estudiante', 'e')
                ->leftjoin('SieAppWebBundle:EstudianteInscripcion', 'ei', 'WITH', 'e.id = ei.estudiante')
                ->leftjoin('SieAppWebBundle:InstitucioneducativaCurso', 'iec', 'WITH', 'ei.institucioneducativaCurso = iec.id')
                ->leftjoin('SieAppWebBundle:Institucioneducativa', 'i', 'WITH', 'iec.institucioneducativa = i.id')
                ->leftjoin('SieAppWebBundle:NivelTipo', 'n', 'WITH', 'iec.nivelTipo = n.id')
                ->leftjoin('SieAppWebBundle:GradoTipo', 'g', 'WITH', 'iec.gradoTipo = g.id')
                ->leftjoin('SieAppWebBundle:ParaleloTipo', 'p', 'WITH', 'iec.paraleloTipo = p.id')
                ->leftjoin('SieAppWebBundle:TurnoTipo', 't', 'WITH', 'iec.turnoTipo = t.id')
                ->leftJoin('SieAppWebBundle:EstadoMatriculaTipo', 'em', 'WITH', 'ei.estadomatriculaTipo = em.id')
                ->where('e.id = :id')
                ->andwhere('iec.gestionTipo = :gestion')
                ->andwhere('ei.estadomatriculaTipo = :mat')
                ->setParameter('id', $id)
                ->setParameter('gestion', $gestion)
                ->setParameter('mat', '4')
                ->orderBy('ei.fechaInscripcion', 'DESC');


        return $qb->getQuery()->getResult();
    }

    public function getHistoryInscription($id) {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb
                ->select('n.nivel as nivel', 'g.grado as grado', 'p.paralelo as paralelo', 't.turno as turno', 'em.estadomatricula as estadoMatricula', 'IDENTITY(iec.nivelTipo) as nivelId', 'IDENTITY(iec.gestionTipo) as gestion', 'IDENTITY(iec.gradoTipo) as gradoId', 'IDENTITY(iec.turnoTipo) as turnoId', 'IDENTITY(ei.estadomatriculaTipo) as estadoMatriculaId', 'IDENTITY(iec.paraleloTipo) as paraleloId', 'ei.fechaInscripcion', 'i.id as sie', 'i.institucioneducativa, (ei.id) as insId, e.id idStudent')
                ->from('SieAppWebBundle:Estudiante', 'e')
                ->leftjoin('SieAppWebBundle:EstudianteInscripcion', 'ei', 'WITH', 'e.id = ei.estudiante')
                ->leftjoin('SieAppWebBundle:InstitucioneducativaCurso', 'iec', 'WITH', 'ei.institucioneducativaCurso = iec.id')
                ->leftjoin('SieAppWebBundle:Institucioneducativa', 'i', 'WITH', 'iec.institucioneducativa = i.id')
                ->leftjoin('SieAppWebBundle:NivelTipo', 'n', 'WITH', 'iec.nivelTipo = n.id')
                ->leftjoin('SieAppWebBundle:GradoTipo', 'g', 'WITH', 'iec.gradoTipo = g.id')
                ->leftjoin('SieAppWebBundle:ParaleloTipo', 'p', 'WITH', 'iec.paraleloTipo = p.id')
                ->leftjoin('SieAppWebBundle:TurnoTipo', 't', 'WITH', 'iec.turnoTipo = t.id')
                ->leftJoin('SieAppWebBundle:EstadoMatriculaTipo', 'em', 'WITH', 'ei.estadomatriculaTipo = em.id')
                ->where('e.id = :id')
                ->setParameter('id', $id)
                ->orderBy('iec.gestionTipo', 'DESC')
        ;
        return $qb->getQuery()->getResult();
    }

    /* select *
      from estudiante_inscripcion  ei
      left join institucioneducativa_curso iec on (ei.institucioneducativa_curso_id = iec.id)
      where ei.estudiante_id=3148828 and iec.gestion_tipo_id=2015 and ei.estadomatricula_tipo_id in (4,5) */

    public function getUeIdbyEstudianteId($id, $gestion) {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb
                ->select('IDENTITY(iec.institucioneducativa) as ueId')
                ->from('SieAppWebBundle:Estudiante', 'e')
                ->leftjoin('SieAppWebBundle:EstudianteInscripcion', 'ei', 'WITH', 'e.id = ei.estudiante')
                ->leftjoin('SieAppWebBundle:InstitucioneducativaCurso', 'iec', 'WITH', 'ei.institucioneducativaCurso = iec.id')
                ->where('ei.estudiante = :id')
                ->andwhere('iec.gestionTipo = :gestion')
                ->andwhere('ei.estadomatriculaTipo = :matricula')
                ->setParameter('id', $id)
                ->setParameter('gestion', $gestion)
                ->setParameter('matricula', 4)
        ;
        return $qb->getQuery()->getResult();
    }

    public function getUeIdbyEstudianteId_SinMatricula($id, $gestion) {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb
                ->select('IDENTITY(iec.institucioneducativa) as ueId')
                ->from('SieAppWebBundle:Estudiante', 'e')
                ->leftjoin('SieAppWebBundle:EstudianteInscripcion', 'ei', 'WITH', 'e.id = ei.estudiante')
                ->leftjoin('SieAppWebBundle:InstitucioneducativaCurso', 'iec', 'WITH', 'ei.institucioneducativaCurso = iec.id')
                ->where('ei.estudiante = :id')
                ->andwhere('iec.gestionTipo = :gestion')
                //->andwhere('ei.estadomatriculaTipo = :matricula')
                ->setParameter('id', $id)
                ->setParameter('gestion', $gestion)
                //->setParameter('matricula', 4)
        ;
        return $qb->getQuery()->getResult();
    }

    public function getHistoryInscriptionEfectivo($id) {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb
                ->select('e.id as idStudent,e.codigoRude,e.carnetIdentidad,e.complemento,IDENTITY(e.generoTipo)as generoTipo,e.paterno, e.materno, e.nombre,e.fechaNacimiento,n.nivel as nivel', 'g.grado as grado', 'p.paralelo as paralelo', 't.turno as turno', 'em.estadomatricula as estadoMatricula', 'IDENTITY(iec.nivelTipo) as nivelId', 'IDENTITY(iec.gestionTipo) as gestion', 'IDENTITY(iec.gradoTipo) as gradoId', 'IDENTITY(iec.turnoTipo) as turnoId', 'IDENTITY(ei.estadomatriculaTipo) as estadoMatriculaId', 'IDENTITY(iec.paraleloTipo) as paraleloId', 'ei.fechaInscripcion', 'i.id as sie', 'i.institucioneducativa', 'ei.id as eiId, iec.id as iecId')
                ->from('SieAppWebBundle:Estudiante', 'e')
                ->leftjoin('SieAppWebBundle:EstudianteInscripcion', 'ei', 'WITH', 'e.id = ei.estudiante')
                ->leftjoin('SieAppWebBundle:InstitucioneducativaCurso', 'iec', 'WITH', 'ei.institucioneducativaCurso = iec.id')
                ->leftjoin('SieAppWebBundle:Institucioneducativa', 'i', 'WITH', 'iec.institucioneducativa = i.id')
                ->leftjoin('SieAppWebBundle:NivelTipo', 'n', 'WITH', 'iec.nivelTipo = n.id')
                ->leftjoin('SieAppWebBundle:GradoTipo', 'g', 'WITH', 'iec.gradoTipo = g.id')
                ->leftjoin('SieAppWebBundle:ParaleloTipo', 'p', 'WITH', 'iec.paraleloTipo = p.id')
                ->leftjoin('SieAppWebBundle:TurnoTipo', 't', 'WITH', 'iec.turnoTipo = t.id')
                ->leftJoin('SieAppWebBundle:EstadoMatriculaTipo', 'em', 'WITH', 'ei.estadomatriculaTipo = em.id')
                ->where('e.id = :id')
                //->andwhere('ei.estadomatriculaTipo IN (:mat)')
                ->setParameter('id', $id)
                //->setParameter('mat', array(4, 6, 9, 11))
                ->orderBy('iec.gestionTipo', 'DESC')
        ;
        return $qb->getQuery()->getResult();
    }

    public function getNotePerStudent($id) {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb
                ->select('e.id as idStudent,e.codigoRude,e.carnetIdentidad,e.complemento,IDENTITY(e.generoTipo)as generoTipo,e.paterno, e.materno, e.nombre,e.fechaNacimiento,n.nivel as nivel', 'g.grado as grado', 'p.paralelo as paralelo', 't.turno as turno', 'em.estadomatricula as estadoMatricula', 'IDENTITY(iec.nivelTipo) as nivelId', 'IDENTITY(iec.gestionTipo) as gestion', 'IDENTITY(iec.gradoTipo) as gradoId', 'IDENTITY(iec.turnoTipo) as turnoId', 'IDENTITY(ei.estadomatriculaTipo) as estadoMatriculaId', 'IDENTITY(iec.paraleloTipo) as paraleloId', 'ei.fechaInscripcion', 'i.id as sie', 'i.institucioneducativa', 'ei.id as eiId, iec.id as iecId')
                ->from('SieAppWebBundle:Estudiante', 'e')
                ->leftjoin('SieAppWebBundle:EstudianteInscripcion', 'ei', 'WITH', 'e.id = ei.estudiante')
                ->leftjoin('SieAppWebBundle:InstitucioneducativaCurso', 'iec', 'WITH', 'ei.institucioneducativaCurso = iec.id')
                ->leftjoin('SieAppWebBundle:Institucioneducativa', 'i', 'WITH', 'iec.institucioneducativa = i.id')
                ->leftjoin('SieAppWebBundle:NivelTipo', 'n', 'WITH', 'iec.nivelTipo = n.id')
                ->leftjoin('SieAppWebBundle:GradoTipo', 'g', 'WITH', 'iec.gradoTipo = g.id')
                ->leftjoin('SieAppWebBundle:ParaleloTipo', 'p', 'WITH', 'iec.paraleloTipo = p.id')
                ->leftjoin('SieAppWebBundle:TurnoTipo', 't', 'WITH', 'iec.turnoTipo = t.id')
                ->leftJoin('SieAppWebBundle:EstadoMatriculaTipo', 'em', 'WITH', 'ei.estadomatriculaTipo = em.id')
                ->where('e.id = :id')
                //->andwhere('ei.estadomatriculaTipo IN (:mat)')
                ->setParameter('id', $id)
                //->setParameter('mat', array(4, 5))
                ->orderBy('ei.fechaInscripcion', 'DESC')
        ;
        return $qb->getQuery()->getResult();
    }

    public function getHistoryPerStudent($id, $gestion) {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb
                ->select('e.id as idStudent,e.codigoRude,e.carnetIdentidad,e.complemento,IDENTITY(e.generoTipo)as generoTipo,e.paterno, e.materno, e.nombre,e.fechaNacimiento,n.nivel as nivel', 'g.grado as grado', 'p.paralelo as paralelo', 't.turno as turno', 'em.estadomatricula as estadoMatricula', 'IDENTITY(iec.nivelTipo) as nivelId', 'IDENTITY(iec.gestionTipo) as gestion', 'IDENTITY(iec.gradoTipo) as gradoId', 'IDENTITY(iec.turnoTipo) as turnoId', 'IDENTITY(ei.estadomatriculaTipo) as estadoMatriculaId', 'IDENTITY(iec.paraleloTipo) as paraleloId', 'IDENTITY(iec.cicloTipo) as cicloId', 'ei.fechaInscripcion', 'i.id as sie', 'i.institucioneducativa', 'ei.id as eiId, iec.id as iecId')
                ->from('SieAppWebBundle:Estudiante', 'e')
                ->leftjoin('SieAppWebBundle:EstudianteInscripcion', 'ei', 'WITH', 'e.id = ei.estudiante')
                ->leftjoin('SieAppWebBundle:InstitucioneducativaCurso', 'iec', 'WITH', 'ei.institucioneducativaCurso = iec.id')
                ->leftjoin('SieAppWebBundle:Institucioneducativa', 'i', 'WITH', 'iec.institucioneducativa = i.id')
                ->leftjoin('SieAppWebBundle:NivelTipo', 'n', 'WITH', 'iec.nivelTipo = n.id')
                ->leftjoin('SieAppWebBundle:GradoTipo', 'g', 'WITH', 'iec.gradoTipo = g.id')
                ->leftjoin('SieAppWebBundle:ParaleloTipo', 'p', 'WITH', 'iec.paraleloTipo = p.id')
                ->leftjoin('SieAppWebBundle:TurnoTipo', 't', 'WITH', 'iec.turnoTipo = t.id')
                ->leftJoin('SieAppWebBundle:EstadoMatriculaTipo', 'em', 'WITH', 'ei.estadomatriculaTipo = em.id')
                ->where('e.id = :id')
                ->andwhere('ei.estadomatriculaTipo IN (:mat)')
                ->andwhere('iec.gestionTipo = :gestion')
                ->andWhere('i.orgcurricularTipo = :tipoie')
                ->setParameter('id', $id)
                ->setParameter('mat', array(4, 5))
                ->setParameter('gestion', $gestion)
                ->setParameter('tipoie', 1)
                ->orderBy('ei.fechaInscripcion', 'DESC')
        ;
        return $qb->getQuery()->getResult();
    }

    public function getHistoryPerStudentUe($id, $gestion, $sie) {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb
                ->select('e.id as idStudent,e.codigoRude,e.carnetIdentidad,e.complemento,IDENTITY(e.generoTipo)as generoTipo,e.paterno, e.materno, e.nombre,e.fechaNacimiento,n.nivel as nivel', 'g.grado as grado', 'p.paralelo as paralelo', 't.turno as turno', 'em.estadomatricula as estadoMatricula', 'IDENTITY(iec.nivelTipo) as nivelId', 'IDENTITY(iec.gestionTipo) as gestion', 'IDENTITY(iec.gradoTipo) as gradoId', 'IDENTITY(iec.turnoTipo) as turnoId', 'IDENTITY(ei.estadomatriculaTipo) as estadoMatriculaId', 'IDENTITY(iec.paraleloTipo) as paraleloId', 'IDENTITY(iec.cicloTipo) as cicloId', 'ei.fechaInscripcion', 'i.id as sie', 'i.institucioneducativa', 'ei.id as eiId, iec.id as iecId')
                ->from('SieAppWebBundle:Estudiante', 'e')
                ->leftjoin('SieAppWebBundle:EstudianteInscripcion', 'ei', 'WITH', 'e.id = ei.estudiante')
                ->leftjoin('SieAppWebBundle:InstitucioneducativaCurso', 'iec', 'WITH', 'ei.institucioneducativaCurso = iec.id')
                ->leftjoin('SieAppWebBundle:Institucioneducativa', 'i', 'WITH', 'iec.institucioneducativa = i.id')
                ->leftjoin('SieAppWebBundle:NivelTipo', 'n', 'WITH', 'iec.nivelTipo = n.id')
                ->leftjoin('SieAppWebBundle:GradoTipo', 'g', 'WITH', 'iec.gradoTipo = g.id')
                ->leftjoin('SieAppWebBundle:ParaleloTipo', 'p', 'WITH', 'iec.paraleloTipo = p.id')
                ->leftjoin('SieAppWebBundle:TurnoTipo', 't', 'WITH', 'iec.turnoTipo = t.id')
                ->leftJoin('SieAppWebBundle:EstadoMatriculaTipo', 'em', 'WITH', 'ei.estadomatriculaTipo = em.id')
                ->where('e.id = :id')
                ->andwhere('ei.estadomatriculaTipo IN (:mat)')
                ->andwhere('iec.gestionTipo = :gestion')
                ->andWhere('i.id = :sie')
                ->setParameter('id', $id)
                ->setParameter('mat', array(4, 5))
                ->setParameter('gestion', $gestion)
                ->setParameter('sie', $sie)
                ->orderBy('ei.fechaInscripcion', 'DESC')
        ;
        return $qb->getQuery()->getResult();
    }

    public function getHistoryInscriptionEfectivoDoblePrmocion($id, $gestion) {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb
                ->select('e.id as idStudent,e.codigoRude,e.carnetIdentidad,e.complemento,IDENTITY(e.generoTipo)as generoTipo,e.paterno, e.materno, e.nombre,e.fechaNacimiento,n.nivel as nivel', 'g.grado as grado', 'p.paralelo as paralelo', 't.turno as turno', 'em.estadomatricula as estadoMatricula', 'IDENTITY(iec.nivelTipo) as nivelId', 'IDENTITY(iec.gestionTipo) as gestion', 'IDENTITY(iec.gradoTipo) as gradoId', 'IDENTITY(iec.turnoTipo) as turnoId', 'IDENTITY(ei.estadomatriculaTipo) as estadoMatriculaId', 'IDENTITY(iec.paraleloTipo) as paraleloId', 'ei.fechaInscripcion', 'i.id as sie', 'i.institucioneducativa', 'ei.id as eiId, iec.id as iecId, IDENTITY(iec.cicloTipo) as cicloId')
                ->from('SieAppWebBundle:Estudiante', 'e')
                ->leftjoin('SieAppWebBundle:EstudianteInscripcion', 'ei', 'WITH', 'e.id = ei.estudiante')
                ->leftjoin('SieAppWebBundle:InstitucioneducativaCurso', 'iec', 'WITH', 'ei.institucioneducativaCurso = iec.id')
                ->leftjoin('SieAppWebBundle:Institucioneducativa', 'i', 'WITH', 'iec.institucioneducativa = i.id')
                ->leftjoin('SieAppWebBundle:NivelTipo', 'n', 'WITH', 'iec.nivelTipo = n.id')
                ->leftjoin('SieAppWebBundle:GradoTipo', 'g', 'WITH', 'iec.gradoTipo = g.id')
                ->leftjoin('SieAppWebBundle:ParaleloTipo', 'p', 'WITH', 'iec.paraleloTipo = p.id')
                ->leftjoin('SieAppWebBundle:TurnoTipo', 't', 'WITH', 'iec.turnoTipo = t.id')
                ->leftJoin('SieAppWebBundle:EstadoMatriculaTipo', 'em', 'WITH', 'ei.estadomatriculaTipo = em.id')
                ->where('e.id = :id')
                ->andwhere('iec.gestionTipo = :gestion')
                ->andwhere('ei.estadomatriculaTipo IN (:mat)')
                ->andWhere('ei.estadomatriculaInicioTipo != :matinicio or ei.estadomatriculaInicioTipo is null  ')
                ->setParameter('id', $id)
                ->setParameter('gestion', $gestion)
                ->setParameter('mat', array(5, 11))
                ->setParameter('matinicio', 64)
                ->orderBy('ei.fechaInscripcion', 'DESC')
        ;
        return $qb->getQuery()->getResult();
    }

    /**
     * get the Student data
     * @param type $rudeOrCi
     * @param type $fecNac
     * @return error with the id of student
     */
    public function getDataStudent($rudeOrCi, $fecNac) {

        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb
                ->select('e.id, e.codigoRude')
                ->from('SieAppWebBundle:Estudiante', 'e')
                ->Where('e.codigoRude = :rude')
                ->OrWhere('e.carnetIdentidad = :ci')
                ->AndWhere('e.fechaNacimiento = :fn')
                ->setParameter('rude', $rudeOrCi)
                ->setParameter('ci', $rudeOrCi)
                ->setParameter('fn', $fecNac)
        ;

        return $qb->getQuery()->getResult();
    }

    public function getStudentInscriptionData($id, $gestion) {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb
                ->select('IDENTITY(iec.institucioneducativa) as sie, IDENTITY(iec.nivelTipo) as nivel, IDENTITY(iec.gradoTipo) as grado, IDENTITY(iec.paraleloTipo) as paralelo, IDENTITY(iec.turnoTipo) as turno, IDENTITY(iec.gestionTipo) as gestion, (ei.id) as inscripcionid')
                ->from('SieAppWebBundle:Estudiante', 'e')
                ->leftjoin('SieAppWebBundle:EstudianteInscripcion', 'ei', 'WITH', 'e.id = ei.estudiante')
                ->leftjoin('SieAppWebBundle:InstitucioneducativaCurso', 'iec', 'WITH', 'ei.institucioneducativaCurso = iec.id')
                ->leftjoin('SieAppWebBundle:Institucioneducativa', 'ie', 'WITH', 'iec.institucioneducativa = ie.id')
                ->where('ei.estudiante = :id')
                ->andwhere('iec.gestionTipo = :gestion')
                ->andwhere('ei.estadomatriculaTipo IN (:matricula)')
                ->andwhere('ie.institucioneducativaTipo = 1')
                ->setParameter('id', $id)
                ->setParameter('gestion', $gestion)
                ->setParameter('matricula', array(4,5,26, 55, 56, 57, 58))
        ;
        return $qb->getQuery()->getResult();
    }

    public function getStudentInscriptionDatabyRude($rude) {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb
                ->select('IDENTITY(iec.institucioneducativa) as sie, IDENTITY(iec.nivelTipo) as nivel, IDENTITY(iec.gradoTipo) as grado, IDENTITY(iec.paraleloTipo) as paralelo, IDENTITY(iec.turnoTipo) as turno, IDENTITY(iec.gestionTipo) as gestion')
                ->from('SieAppWebBundle:Estudiante', 'e')
                ->leftjoin('SieAppWebBundle:EstudianteInscripcion', 'ei', 'WITH', 'e.id = ei.estudiante')
                ->leftjoin('SieAppWebBundle:InstitucioneducativaCurso', 'iec', 'WITH', 'ei.institucioneducativaCurso = iec.id')
                ->where('e.codigoRude = :rude')
                ->setParameter('rude', $rude)
        ;
        return $qb->getQuery()->getResult();
    }

    public function getStudentsByPatMatNom($data) {

        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb
                ->select('e.id, e.codigoRude, e.paterno, e.materno, e.nombre, e.fechaNacimiento')
                ->from('SieAppWebBundle:Estudiante', 'e')
                ->where('e.paterno like :paterno')
                ->andWhere('e.materno like :materno')
                ->andWhere('e.nombre like :nombre')
                ->setParameter('paterno', strtoupper($data['paterno']) . '%')
                ->setParameter('materno', strtoupper($data['materno']) . '%')
                ->setParameter('nombre', strtoupper($data['nombre']) . '%')
                ->orderBy('e.paterno, e.materno, e.nombre', 'ASC')
                ->getQuery()
        ;
        return $qb->getQuery()->getResult();
    }

    public function getApoderadoData($rude, $gestion) {

        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb
                ->select('e.id as eid, e.codigoRude,p.id as pid, p.paterno, p.materno, p.nombre,p.carnet,p.fechaNacimiento, a.id as aid, a.telefono, a.empleo,at.id as idparentesco, at.apoderado')
                ->from('SieAppWebBundle:Estudiante', 'e')
                ->innerJoin('SieAppWebBundle:Apoderado', 'a', 'WITH', 'e.id = a.personaEstudiante')
                ->innerJoin('SieAppWebBundle:Persona', 'p', 'WITH', 'a.personaApoderado = p.id')
                ->innerJoin('SieAppWebBundle:ApoderadoTipo', 'at', 'WITH', 'a.apoderadoTipo = at.id')
                ->where('e.codigoRude = :rude')
                ->andWhere('a.gestion = :gestion')
                ->setParameter('rude', $rude)
                ->setParameter('gestion', $gestion)
                ->orderBy('p.paterno, p.materno, p.nombre', 'ASC')
                ->getQuery()
        ;

        return $qb->getQuery()->getResult();
    }
    /*
    select *
    from estudiante_inscripcion ei
    left join apoderado_inscripcion  ai on (ei.id = ai.estudiante_inscripcion_id)
    left join persona p on (ai.persona_id = p.id)
    left join apoderado_tipo at on (ai.apoderado_tipo_id = at.id)
    where ei.id ='162360395'
    */

    public function getApoderadoInscriptionData ($rude, $gestion, $inscriptionStudentId) {
      //echo "$rude, $gestion, $inscriptionStudentId)";die;
        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb
                ->select('ei.id as studentInscId,e.id as eid, e.codigoRude, p.id as pid, p.paterno, p.materno, p.nombre,p.carnet,p.fechaNacimiento, ai.id as aid, at.id as idparentesco, at.apoderado')
                ->from('SieAppWebBundle:EstudianteInscripcion', 'ei')
                ->innerJoin('SieAppWebBundle:Estudiante', 'e', 'WITH', 'ei.estudiante = e.id  ')
                ->innerJoin('SieAppWebBundle:ApoderadoInscripcion', 'ai', 'WITH', 'ei.id = ai.estudianteInscripcion')
                ->innerJoin('SieAppWebBundle:Persona', 'p', 'WITH', 'ai.persona = p.id')
                ->innerJoin('SieAppWebBundle:ApoderadoTipo', 'at', 'WITH', 'ai.apoderadoTipo = at.id')
                ->where('ei.id = :inscriptionStudentId')
                ->setParameter('inscriptionStudentId', $inscriptionStudentId)
                ->orderBy('p.paterno, p.materno, p.nombre', 'ASC')
                ->getQuery()
        ;

        return $qb->getQuery()->getResult();
    }

    /**
     * get the apoderados
     * @param type $rudeOrCi
     * @param type $fecNac
     * @return error with the id of student
     */
    public function getApoderadoPerCourse ($iecId) {
      //echo "$rude, $gestion, $inscriptionStudentId)";die;
        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb
                ->select('ei.id as studentInscId,IDENTITY(ei.institucioneducativaCurso) as iecId,e.id as estId, e.codigoRude, p.id as persId, p.paterno, p.materno, p.nombre,p.carnet,p.fechaNacimiento, ai.id as aid, at.id as idparentesco, at.apoderado')
                ->from('SieAppWebBundle:EstudianteInscripcion', 'ei')
                ->innerJoin('SieAppWebBundle:Estudiante', 'e', 'WITH', 'ei.estudiante = e.id  ')
                ->innerJoin('SieAppWebBundle:ApoderadoInscripcion', 'ai', 'WITH', 'ei.id = ai.estudianteInscripcion')
                ->innerJoin('SieAppWebBundle:Persona', 'p', 'WITH', 'ai.persona = p.id')
                ->innerJoin('SieAppWebBundle:ApoderadoTipo', 'at', 'WITH', 'ai.apoderadoTipo = at.id')
                ->where('ei.institucioneducativaCurso = :iecId')
                ->setParameter('iecId', $iecId)
                ->orderBy('p.paterno, p.materno, p.nombre', 'ASC')
                ->getQuery()
        ;

        return $qb->getQuery()->getResult();
    }

    /**
     * get the Student data
     * @param type $rudeOrCi
     * @param type $fecNac
     * @return error with the id of student
     */
    public function findChildrenByCourse ($persId, $gestion) {
      //echo "$rude, $gestion, $inscriptionStudentId)";die;
        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb
                ->select('ei.id as studentInscId,e.id as eid, e.codigoRude, e.paterno, e.materno, e.nombre,e.carnetIdentidad,e.fechaNacimiento, ai.id as apoId, nt.nivel, gt.grado, pt.paralelo, inst.institucioneducativa, inst.id as sie')
                ->from('SieAppWebBundle:ApoderadoInscripcion', 'ai')
                ->leftJoin('SieAppWebBundle:EstudianteInscripcion', 'ei', 'WITH', 'ai.estudianteInscripcion = ei.id')
                ->leftJoin('SieAppWebBundle:Estudiante', 'e', 'WITH', 'ei.estudiante = e.id  ')
                ->leftJoin('SieAppWebBundle:InstitucioneducativaCurso', 'iec', 'WITH', 'ei.institucioneducativaCurso = iec.id')
                ->leftJoin('SieAppWebBundle:NivelTipo', 'nt', 'WITH', 'iec.nivelTipo = nt.id  ')
                ->leftJoin('SieAppWebBundle:GradoTipo', 'gt', 'WITH', 'iec.gradoTipo = gt.id  ')
                ->leftJoin('SieAppWebBundle:ParaleloTipo', 'pt', 'WITH', 'iec.paraleloTipo = pt.id  ')
                ->leftJoin('SieAppWebBundle:institucioneducativa', 'inst', 'WITH', 'iec.institucioneducativa = inst.id  ')
                ->where('ai.persona = :persId')
                ->andwhere('iec.gestionTipo = :gestion')
                ->setParameter('persId', $persId)
                ->setParameter('gestion', $gestion)
                ->orderBy('e.paterno, e.materno, e.nombre', 'ASC')
                ->getQuery()
        ;

        return $qb->getQuery()->getResult();
    }
    /**
     * get the Student data
     * @param type $rudeOrCi
     * @param type $fecNac
     * @return error with the id of student
     */
    public function getDataPersonByCiOrdataPerson($ci, $paterno, $materno, $nombre) {
        //die("$ci $paterno $materno $nombre");
        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb
                ->select('p')
                ->from('SieAppWebBundle:Persona', 'p')
        ;
        if ($ci) {
            $qb
                    ->Where('p.carnet = :ci')
                    ->setParameter('ci', $ci);
        } else {
            $qb
                    ->Where('p.paterno like :paterno')
                    ->AndWhere('p.materno like :materno')
                    ->andWhere('p.nombre like :nombre')
                    ->setParameter('paterno', $paterno . '%')
                    ->setParameter('materno', $materno . '%')
                    ->setParameter('nombre', $nombre . '%');
        }
        return $qb->getQuery()->getResult();
    }

    public function dataApoderado($pid, $aid) {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb
                ->select('p.id as pid, p.paterno, p.materno, p.nombre,p.carnet,p.fechaNacimiento,p.celular, a.id as aid, a.telefono , a.empleo, at.apoderado')
                ->from('SieAppWebBundle:Persona', 'p')
                ->innerJoin('SieAppWebBundle:Apoderado', 'a', 'WITH', 'p.id = a.personaApoderado')
                ->innerJoin('SieAppWebBundle:ApoderadoTipo', 'at', 'WITH', 'a.apoderadoTipo = at.id')
                ->where('a.id = :aid')
                ->setParameter('aid', $aid)
                ->getQuery();

        return $qb->getQuery()->getResult();
    }

    public function dataApoderadoInsc($pid, $aid) {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb
                ->select('p.id as pid, p.paterno, p.materno, p.nombre,p.carnet,p.fechaNacimiento,p.celular, at.apoderado')
                ->from('SieAppWebBundle:Persona', 'p')
                ->innerJoin('SieAppWebBundle:ApoderadoInscripcion', 'ai', 'WITH', 'p.id = ai.persona')
                ->innerJoin('SieAppWebBundle:ApoderadoTipo', 'at', 'WITH', 'ai.apoderadoTipo = at.id')
                ->where('p.id = :pid')
                ->setParameter('pid', $pid)
                ->getQuery();

        return $qb->getQuery()->getResult();
    }


    public function dataChildren($pid, $gestion) {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb
                ->select('p.id as pid, e.paterno, e.materno, e.nombre,e.carnetIdentidad,e.fechaNacimiento, a.id as aid, at.apoderado')
                ->from('SieAppWebBundle:Persona', 'p')
                ->innerJoin('SieAppWebBundle:Apoderado', 'a', 'WITH', 'p.id = a.personaApoderado')
                ->innerJoin('SieAppWebBundle:ApoderadoTipo', 'at', 'WITH', 'a.apoderadoTipo = at.id')
                ->innerJoin('SieAppWebBundle:Estudiante', 'e', 'WITH', ' a.personaEstudiante = e.id')
                ->where('p.id = :pid')
                ->andWhere('a.gestion = :gestion')
                ->setParameter('pid', $pid)
                ->setParameter('gestion', $gestion)
                ->getQuery();

        return $qb->getQuery()->getResult();
    }
    /*
    select *
    from apoderado_inscripcion ai
    left join persona p on (ai.persona_id = p.id)
    left join estudiante_inscripcion ei on (ai.estudiante_inscripcion_id = ei.id)
    left join estudiante e on (ei.estudiante_id = e.id)
    where ai.persona_id = 17596022
    */
    public function dataChildrenApoderado($pid, $gestion) {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb
                ->select('p.id as pid, e.paterno, e.materno, e.nombre,e.carnetIdentidad,e.fechaNacimiento')
                ->from('SieAppWebBundle:ApoderadoInscripcion', 'ai')
                ->innerJoin('SieAppWebBundle:Persona', 'p', 'WITH', 'ai.persona = p.id')
                ->innerJoin('SieAppWebBundle:EstudianteInscripcion', 'ei', 'WITH', 'ai.estudianteInscripcion = ei.id')
                ->innerJoin('SieAppWebBundle:Estudiante', 'e', 'WITH', ' ei.estudiante = e.id ')
                ->where('ai.persona = :pid')
                ->setParameter('pid', $pid)
                ->getQuery();

        return $qb->getQuery()->getResult();
    }

    public function getStudentsToInscription($iecId, $matricula) {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb
                ->select('e.id,ei.id as eiId, e.paterno, e.materno, e.nombre, e.carnetIdentidad,e.fechaNacimiento, e.codigoRude')
                ->from('SieAppWebBundle:Estudiante', 'e')
                ->leftjoin('SieAppWebBundle:EstudianteInscripcion', 'ei', 'WITH', 'e.id = ei.estudiante')
                ->where('ei.institucioneducativaCurso = :iecId')
                ->andwhere('ei.estadomatriculaTipo = :matricula')
                ->setParameter('iecId', $iecId)
                ->setParameter('matricula', $matricula)
        ;
        return $qb->getQuery()->getResult();
    }

    /**
     * * HISTORIAL DEL ALUMNO INCLUYENDO OBSERVACIONES
     * * HISTORIAL DEL ALUMNO INCLUYENDO OBSERVACIONES
     * * HISTORIAL DEL ALUMNO INCLUYENDO OBSERVACIONES
     */
    public function getInscriptionHistoryEstudenWhitObservation($rude, $roluser,$gestion=null) {
/**/
        if($gestion==null)
        {
            $gestion= date('Y');
        }

        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb
                ->select('eo.esactivo as obsActivo, ei.id as inscripcionid, oi.observacion as ObsTipoDesc', 'eo.obs as Obs', 'oi.id as idObsTipo', 'eo.id as idObservacion', 'e.id idStudent, n.nivel as nivel', 'g.grado as grado', 'p.paralelo as paralelo', 't.turno as turno', 'em.estadomatricula as estadoMatricula', 'IDENTITY(iec.nivelTipo) as nivelId', 'IDENTITY(iec.gestionTipo) as gestion', 'IDENTITY(iec.gradoTipo) as gradoId', 'IDENTITY(iec.turnoTipo) as turnoId', 'IDENTITY(ei.estadomatriculaTipo) as estadoMatriculaId', 'IDENTITY(iec.paraleloTipo) as paraleloId', 'ei.fechaInscripcion', 'i.id as sie', 'i.institucioneducativa','emini.estadomatricula as estadoMatriculaInicio')
                ->from('SieAppWebBundle:Estudiante', 'e')
                ->leftjoin('SieAppWebBundle:EstudianteInscripcion', 'ei', 'WITH', 'e.id = ei.estudiante')
                ->leftjoin('SieAppWebBundle:InstitucioneducativaCurso', 'iec', 'WITH', 'ei.institucioneducativaCurso = iec.id')
                ->leftjoin('SieAppWebBundle:Institucioneducativa', 'i', 'WITH', 'iec.institucioneducativa = i.id')
                //->leftjoin('SieAppWebBundle:institucioneducativaTipo', 'it', 'WITH', 'i.institucioneducativaTipo = it.id')
                ->leftjoin('SieAppWebBundle:NivelTipo', 'n', 'WITH', 'iec.nivelTipo = n.id')
                ->leftjoin('SieAppWebBundle:GradoTipo', 'g', 'WITH', 'iec.gradoTipo = g.id')
                ->leftjoin('SieAppWebBundle:ParaleloTipo', 'p', 'WITH', 'iec.paraleloTipo = p.id')
                ->leftjoin('SieAppWebBundle:TurnoTipo', 't', 'WITH', 'iec.turnoTipo = t.id')
                ->leftJoin('SieAppWebBundle:EstadoMatriculaTipo', 'em', 'WITH', 'ei.estadomatriculaTipo = em.id')
                ->leftJoin('SieAppWebBundle:EstadoMatriculaTipo', 'emini', 'WITH', 'ei.estadomatriculaInicioTipo= emini.id')
                ->leftJoin('SieAppWebBundle:EstudianteInscripcionObservacion', 'eo', 'WITH', 'ei.id = eo.estudianteInscripcion')
                ->leftJoin('SieAppWebBundle:ObservacionInscripcionTipo', 'oi', 'WITH', 'eo.observacionInscripcionTipo = oi.id')
                ->where('e.codigoRude = :rude')
                ->andwhere('iec.gestionTipo = :gestion')
                ->andwhere('ei.estadomatriculaTipo IN (:matricula)')
                //->andwhere('it.id = :ittipo')
                ->setParameter('rude', $rude)
                ->setParameter('gestion', $gestion)
                ;
            if($roluser == 8){
                $arrMat = array(4,9,5);
            }else{
                $arrMat = array(6,9);
            }
            $qb = $qb ->setParameter('matricula', $arrMat);
            $qb = $qb ->orderBy('iec.gestionTipo', 'DESC')
        ;
        return $qb->getQuery()->getResult();
    }

    /**
     * get info if the student has been registered in tec unidad educativa
     * @param type $id
     * @param type $gestion
     * @return return array with data info
     */
     public function getInscriptionTalRez($rude, $currentYear) {

   /**/
         $qb = $this->getEntityManager()->createQueryBuilder();
         $qb
                 ->select('eo.esactivo as obsActivo, ei.id as inscripcionid, oi.observacion as ObsTipoDesc', 'eo.obs as Obs', 'oi.id as idObsTipo', 'eo.id as idObservacion', 'e.id idStudent, n.nivel as nivel', 'g.grado as grado', 'p.paralelo as paralelo', 't.turno as turno', 'em.estadomatricula as estadoMatricula', 'IDENTITY(iec.nivelTipo) as nivelId', 'IDENTITY(iec.gestionTipo) as gestion', 'IDENTITY(iec.gradoTipo) as gradoId', 'IDENTITY(iec.turnoTipo) as turnoId', 'IDENTITY(ei.estadomatriculaTipo) as estadoMatriculaId', 'IDENTITY(iec.paraleloTipo) as paraleloId', 'ei.fechaInscripcion', 'i.id as sie', 'i.institucioneducativa','emini.estadomatricula as estadoMatriculaInicio')
                 ->from('SieAppWebBundle:Estudiante', 'e')
                 ->leftjoin('SieAppWebBundle:EstudianteInscripcion', 'ei', 'WITH', 'e.id = ei.estudiante')
                 ->leftjoin('SieAppWebBundle:InstitucioneducativaCurso', 'iec', 'WITH', 'ei.institucioneducativaCurso = iec.id')
                 ->leftjoin('SieAppWebBundle:Institucioneducativa', 'i', 'WITH', 'iec.institucioneducativa = i.id')
                 //->leftjoin('SieAppWebBundle:institucioneducativaTipo', 'it', 'WITH', 'i.institucioneducativaTipo = it.id')
                 ->leftjoin('SieAppWebBundle:NivelTipo', 'n', 'WITH', 'iec.nivelTipo = n.id')
                 ->leftjoin('SieAppWebBundle:GradoTipo', 'g', 'WITH', 'iec.gradoTipo = g.id')
                 ->leftjoin('SieAppWebBundle:ParaleloTipo', 'p', 'WITH', 'iec.paraleloTipo = p.id')
                 ->leftjoin('SieAppWebBundle:TurnoTipo', 't', 'WITH', 'iec.turnoTipo = t.id')
                 ->leftJoin('SieAppWebBundle:EstadoMatriculaTipo', 'em', 'WITH', 'ei.estadomatriculaTipo = em.id')
                 ->leftJoin('SieAppWebBundle:EstadoMatriculaTipo', 'emini', 'WITH', 'ei.estadomatriculaInicioTipo= emini.id')
                 ->leftJoin('SieAppWebBundle:EstudianteInscripcionObservacion', 'eo', 'WITH', 'ei.id = eo.estudianteInscripcion')
                 ->leftJoin('SieAppWebBundle:ObservacionInscripcionTipo', 'oi', 'WITH', 'eo.observacionInscripcionTipo = oi.id')
                 ->where('e.codigoRude = :rude')
                 ->andWhere('iec.gestionTipo = :currentyear')
                 //->andwhere('it.id = :ittipo')
                 ->setParameter('rude', $rude)
                 ->setParameter('currentyear', $currentYear)
                 //->setParameter('ittipo', 1)
                 ->orderBy('iec.gestionTipo', 'DESC')
                 ->orderBy('ei.estadomatriculaTipo', 'DESC')
         ;
         return $qb->getQuery()->getResult();
     }
    /**
     * get info if the student has been registered in tec unidad educativa
     * @param type $id
     * @param type $gestion
     * @return return array with data info
     */
    public function getInscriptionStudentTecnica($rude, $gestion) {


        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb
                ->select('IDENTITY(iec.institucioneducativa) as ueId')
                ->from('SieAppWebBundle:Estudiante', 'e')
                ->leftjoin('SieAppWebBundle:EstudianteInscripcion', 'ei', 'WITH', 'e.id = ei.estudiante')
                ->leftjoin('SieAppWebBundle:InstitucioneducativaCurso', 'iec', 'WITH', 'ei.institucioneducativaCurso = iec.id')
                //->leftJoin('SieAppWebBundle:InstitucioneducativaHumanisticoTecnico', 'ieht', 'iec.institucioneducativa = ieht.institucioneducativa')
                ->where('e.codigoRude = :rude')
                ->andwhere('iec.gestionTipo = :gestion')
                ->andWhere('iec.nivelTipo = :nivel')
                ->andWhere('iec.gradoTipo IN (:grados)')
                ->andwhere('ei.estadomatriculaTipo = :matricula')
                ->setParameter('rude', $rude)
                ->setParameter('gestion', $gestion)
                ->setParameter('nivel', '13')
                ->setParameter('grados', array(5, 6))
                ->setParameter('matricula', 4)
        ;
        return $qb->getQuery()->getResult();
    }


    /**
     * get the Student data by ci or data info send
     * @param type $rudeOrCi
     * @param type $fecNac
     * @return error with the id of student
     */
    public function getDataStudentByCiOrdataStudent($ci, $nombre, $paterno, $materno, $fechaNacimiento) {
        //echo "($ci, $paterno, $materno, $nombre, $fechaNacimiento)";
        //die("$ci $paterno $materno $nombre");
        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb
                ->select('e')
                ->from('SieAppWebBundle:Estudiante', 'e')
        ;
        //todo some validation to find the student
        switch (true) {
          case ($ci):
            $qb
                    ->Where('e.carnetIdentidad = :ci')
                    ->setParameter('ci', $ci);
          break;

          case ($paterno && $materno && $nombre):
            $qb
                    ->Where('e.paterno like :paterno')
                    ->AndWhere('e.materno like :materno')
                    ->andWhere('e.nombre like :nombre')
                    ->andWhere('e.fechaNacimiento = :fechaNacimiento')
                    ->setParameter('paterno', $paterno . '%')
                    ->setParameter('materno', $materno . '%')
                    ->setParameter('nombre', $nombre . '%')
                    ->setParameter('fechaNacimiento', $fechaNacimiento )
                    ;
          break;

          case ($paterno && !$materno && $nombre):
            $qb
                    ->Where('e.paterno like :paterno')
                    ->andWhere('e.nombre like :nombre')
                    ->andWhere('e.fechaNacimiento = :fechaNacimiento')
                    ->setParameter('paterno', $paterno . '%')
                    ->setParameter('nombre', $nombre . '%')
                    ->setParameter('fechaNacimiento', $fechaNacimiento )
                    ;
          break;
          case (!$paterno && $materno && $nombre):
            $qb
                    ->Where('e.materno like :materno')
                    ->andWhere('e.nombre like :nombre')
                    ->andWhere('e.fechaNacimiento = :fechaNacimiento')
                    ->setParameter('materno', $materno . '%')
                    ->setParameter('nombre', $nombre . '%')
                    ->setParameter('fechaNacimiento', $fechaNacimiento )
                    ;
          break;
          default:
          # krlos was wherecode...
          break;
        }
        return $qb->getQuery()->getResult();
    }


    /**
     * get the Student data by ci or data info send
     * @param type $rudeOrCi
     * @param type $fecNac
     * @return error with the id of student
     */
    public function getDataStudentByCiOrdataStudentNoAcredit($ci, $nombre, $paterno, $materno, $fechaNacimiento, $gestion, $complemento) {
        //echo "($ci, $paterno, $materno, $nombre, $fechaNacimiento)";
        //die("$ci $paterno $materno $nombre");
        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb
                ->select('e.id, e.paterno, e.materno, e.nombre, e.fechaNacimiento, e.codigoRude, e.carnetIdentidad, (i.id) as ueId,
                          IDENTITY(iec.gestionTipo) as gestionTipo,  n.nivel as nivel', 'g.grado as grado', 'p.paralelo as paralelo', 't.turno as turno', 'em.estadomatricula as estadoMatricula'
                          )
                ->from('SieAppWebBundle:Estudiante', 'e')
                ->leftjoin('SieAppWebBundle:EstudianteInscripcion', 'ei', 'WITH', 'e.id = ei.estudiante')
                ->leftjoin('SieAppWebBundle:InstitucioneducativaCurso', 'iec', 'WITH', 'ei.institucioneducativaCurso = iec.id')
                ->leftjoin('SieAppWebBundle:Institucioneducativa', 'i', 'WITH', 'iec.institucioneducativa = i.id')
                ->leftjoin('SieAppWebBundle:NivelTipo', 'n', 'WITH', 'iec.nivelTipo = n.id')
                ->leftjoin('SieAppWebBundle:GradoTipo', 'g', 'WITH', 'iec.gradoTipo = g.id')
                ->leftjoin('SieAppWebBundle:ParaleloTipo', 'p', 'WITH', 'iec.paraleloTipo = p.id')
                ->leftjoin('SieAppWebBundle:TurnoTipo', 't', 'WITH', 'iec.turnoTipo = t.id')
                ->leftJoin('SieAppWebBundle:EstadoMatriculaTipo', 'em', 'WITH', 'ei.estadomatriculaTipo = em.id')
        ;

        if($complemento){
            $qb = $qb->where('e.complemento = :complemento');
            $qb = $qb->setParameter('complemento', $form['complemento']);
        }else{
            $qb = $qb->where('e.complemento IS NULL');
            $qb = $qb->orwhere('e.complemento = :complemento');
            $qb = $qb->setParameter('complemento', '');
        }
        if($ci){
            $qb = $qb->andwhere('e.carnetIdentidad = :carnetIdentidad');
            $qb = $qb->setParameter('carnetIdentidad', $ci);
        }
        // else{
        //     $qb = $qb->andwhere('e.carnetIdentidad IS NULL');
        //     $qb = $qb->orwhere('e.carnetIdentidad = :carnetIdentidad');
        //     $qb = $qb->setParameter('carnetIdentidad', '');
        // }

      $qb
                ->andWhere('e.paterno like :paterno')
                ->AndWhere('e.materno like :materno')
                ->andWhere('e.nombre like :nombre')
                ->andWhere('e.fechaNacimiento = :fechaNacimiento')
                ->setParameter('paterno', $paterno . '%')
                ->setParameter('materno', $materno . '%')
                ->setParameter('nombre', $nombre . '%')
                ->setParameter('fechaNacimiento', $fechaNacimiento )
                ;
       $qb->andWhere('iec.gestionTipo = :cyear');
        $qb->andwhere('ei.estadomatriculaTipo IN (:matricula)');
        $qb->setParameter('cyear', $gestion);
        $qb->setParameter('matricula', array(4,5));
        $qb->orderBy('iec.gestionTipo', 'DESC');

        return $qb->getQuery()->getResult();
        //todo some validation to find the student
    //     switch (true) {
    //       /*case ($ci):
    //         $qb
    //                 ->Where('e.carnetIdentidad = :ci')
    //                 ->setParameter('ci', $ci);
    //       break;*/

    //       case ($paterno && $materno && $nombre):
    //         $qb
    //                 ->Where('e.paterno like :paterno')
    //                 ->AndWhere('e.materno like :materno')
    //                 ->andWhere('e.nombre like :nombre')
    //                 ->andWhere('e.fechaNacimiento = :fechaNacimiento')
    //                 ->setParameter('paterno', $paterno . '%')
    //                 ->setParameter('materno', $materno . '%')
    //                 ->setParameter('nombre', $nombre . '%')
    //                 ->setParameter('fechaNacimiento', $fechaNacimiento )
    //                 ;
    //       break;

    //       case ($paterno && !$materno && $nombre):
    //         $qb
    //                 ->Where('e.paterno like :paterno')
    //                 ->andWhere('e.nombre like :nombre')
    //                 ->andWhere('e.fechaNacimiento = :fechaNacimiento')
    //                 ->setParameter('paterno', $paterno . '%')
    //                 ->setParameter('nombre', $nombre . '%')
    //                 ->setParameter('fechaNacimiento', $fechaNacimiento )
    //                 ;
    //       break;
    //       case (!$paterno && $materno && $nombre):
    //         $qb
    //                 ->Where('e.materno like :materno')
    //                 ->andWhere('e.nombre like :nombre')
    //                 ->andWhere('e.fechaNacimiento = :fechaNacimiento')
    //                 ->setParameter('materno', $materno . '%')
    //                 ->setParameter('nombre', $nombre . '%')
    //                 ->setParameter('fechaNacimiento', $fechaNacimiento )
    //                 ;
    //       break;
    //       default:
    //       # krlos was wherecode...
    //       break;
    //     }
     
    }
    /**
    *
    **/
    public function getOperativoToStudent($data){

        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb
                ->select('rc.bim1,rc.bim2,rc.bim3,rc.bim4')
                ->from('SieAppWebBundle:RegistroConsolidacion', 'rc')
                ->where('rc.unidadEducativa = :ue')
                ->andWhere('rc.gestion = :gestion')
                ->setParameter('ue',$data['sie'])
                ->setParameter('gestion',$data['gestion'])
        ;
        $objRegistroConsolidado =  $qb->getQuery()->getResult();
        $operativo = 5;
        if(!$objRegistroConsolidado){
            // Si no existe es operativo inicio de gestion
            $operativo = 0;
        }else{
            //dump($objRegistroConsolidado);die;
            if($objRegistroConsolidado[0]['bim1'] == 0 and $objRegistroConsolidado[0]['bim2'] == 0 and $objRegistroConsolidado[0]['bim3'] == 0 and $objRegistroConsolidado[0]['bim4'] == 0){
                $operativo = 1; // Primer Bimestre
            }
            if($objRegistroConsolidado[0]['bim1'] >= 1 and $objRegistroConsolidado[0]['bim2'] == 0 and $objRegistroConsolidado[0]['bim3'] == 0 and $objRegistroConsolidado[0]['bim4'] == 0){
                $operativo = 2; // segundo Bimestre
            }
            if($objRegistroConsolidado[0]['bim1'] >= 1 and $objRegistroConsolidado[0]['bim2'] >= 1 and $objRegistroConsolidado[0]['bim3'] == 0 and $objRegistroConsolidado[0]['bim4'] == 0){
                $operativo = 3; // tercero Bimestre
            }
            if($objRegistroConsolidado[0]['bim1'] >= 1 and $objRegistroConsolidado[0]['bim2'] >= 1 and $objRegistroConsolidado[0]['bim3'] >= 1 and $objRegistroConsolidado[0]['bim4'] == 0){
                $operativo = 4; // cuarto Bimestre
            }
            if($objRegistroConsolidado[0]['bim1'] >= 1 and $objRegistroConsolidado[0]['bim2'] >= 1 and $objRegistroConsolidado[0]['bim3'] >= 1 and $objRegistroConsolidado[0]['bim4'] >= 1){
                $operativo = 5; // Fin de gestion o cerrado
            }
        }

        return $operativo;

    }

    public function getOperativoToCollege($sie,$gestion){

        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb
                ->select('rc.bim1,rc.bim2,rc.bim3,rc.bim4')
                ->from('SieAppWebBundle:RegistroConsolidacion', 'rc')
                ->where('rc.unidadEducativa = :ue')
                ->andWhere('rc.gestion = :gestion')
                ->setParameter('ue',$sie)
                ->setParameter('gestion',$gestion)
        ;
        $objRegistroConsolidado =  $qb->getQuery()->getResult();
        $operativo = 5;
        if(!$objRegistroConsolidado){
            // Si no existe es operativo inicio de gestion
            $operativo = 0;
        }else{
            //dump($objRegistroConsolidado);die;
            if($objRegistroConsolidado[0]['bim1'] == 0 and $objRegistroConsolidado[0]['bim2'] == 0 and $objRegistroConsolidado[0]['bim3'] == 0 and $objRegistroConsolidado[0]['bim4'] == 0){
                $operativo = 1; // Primer Bimestre
            }
            if($objRegistroConsolidado[0]['bim1'] >= 1 and $objRegistroConsolidado[0]['bim2'] == 0 and $objRegistroConsolidado[0]['bim3'] == 0 and $objRegistroConsolidado[0]['bim4'] == 0){
                $operativo = 2; // segundo Bimestre
            }
            if($objRegistroConsolidado[0]['bim1'] >= 1 and $objRegistroConsolidado[0]['bim2'] >= 1 and $objRegistroConsolidado[0]['bim3'] == 0 and $objRegistroConsolidado[0]['bim4'] == 0){
                $operativo = 3; // tercero Bimestre
            }
            if($objRegistroConsolidado[0]['bim1'] >= 1 and $objRegistroConsolidado[0]['bim2'] >= 1 and $objRegistroConsolidado[0]['bim3'] >= 1 and $objRegistroConsolidado[0]['bim4'] == 0){
                $operativo = 4; // cuarto Bimestre
            }
            if($objRegistroConsolidado[0]['bim1'] >= 1 and $objRegistroConsolidado[0]['bim2'] >= 1 and $objRegistroConsolidado[0]['bim3'] >= 1 and $objRegistroConsolidado[0]['bim4'] >= 1){
                $operativo = 5; // Fin de gestion o cerrado
            }
        }

        return $operativo;

    }


        /**
         * get the Student data
         * @param type $rudeOrCi
         * @param type $fecNac
         * @return error with the id of student
         */
         /*
         select ei.id
          from estudiante_inscripcion ei
          left join institucioneducativa_curso iec on (ei.institucioneducativa_curso_id = iec.id)
          left join estudiante e on (ei.estudiante_id = e.id)
          where e.codigo_rude = '604200282007673' and iec.gestion_tipo_id = 2016
         */
        public function findIdChildrenInscription ($codigoRude, $gestion) {
          //echo "$codigoRude, $gestion)";die;
            $qb = $this->getEntityManager()->createQueryBuilder();
            $qb
                    ->select('ei.id as studentInscId')
                    ->from('SieAppWebBundle:EstudianteInscripcion', 'ei')
                    ->leftJoin('SieAppWebBundle:InstitucioneducativaCurso', 'iec', 'WITH', 'ei.institucioneducativaCurso = iec.id')
                    ->leftJoin('SieAppWebBundle:Estudiante', 'e', 'WITH', 'ei.estudiante = e.id  ')
                    ->where('e.codigoRude = :codigoRude')
                    ->andwhere('iec.gestionTipo = :gestion')
                    ->setParameter('codigoRude', $codigoRude)
                    ->setParameter('gestion', $gestion)
                    ->getQuery()
            ;

            return $qb->getQuery()->getResult();
        }

        public function getDataStudentToRestart ($codigoRude, $gestion) {
          //echo "$codigoRude, $gestion)";die;
            $qb = $this->getEntityManager()->createQueryBuilder();
            $qb
                    ->select('e.codigoRude, e.paterno, e.materno, e.nombre, ei.id as studentInscId')
                    ->from('SieAppWebBundle:EstudianteInscripcion', 'ei')
                    ->leftJoin('SieAppWebBundle:InstitucioneducativaCurso', 'iec', 'WITH', 'ei.institucioneducativaCurso = iec.id')
                    ->leftJoin('SieAppWebBundle:Estudiante', 'e', 'WITH', 'ei.estudiante = e.id  ')
                    ->where('e.codigoRude = :codigoRude')
                    ->andwhere('iec.gestionTipo = :gestion')
                    ->setParameter('codigoRude', $codigoRude)
                    ->setParameter('gestion', $gestion)
                    ->getQuery()
            ;

            return $qb->getQuery()->getResult();
        }
}
